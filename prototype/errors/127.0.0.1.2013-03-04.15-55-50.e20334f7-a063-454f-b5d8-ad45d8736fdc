(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'id'"
p3
sS'layer'
p4
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n########################## Tips\n#http://stackoverflow.com/questions/12354353/duplicate-a-record-and-its-references-in-web2py\n\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL(\'default\',\'list_all_projects\'))\n    #redirect(URL(\'plugin_wiki\',\'page/home\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef authenticate(uid,pid,func):   \n   result = db(db.role.user == uid)(db.role.approval_status==1)(db.role.project == pid).select(db.role.ALL)\n   myroles = [role_list[int(k.role)] for k in result]\n   is_coordinator = db(db.project.project_coordinator == uid).select(db.project.ALL)\n   if func == \'roles\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'You must be a project co-ordinator to manage roles\'\n\treturn error  \n   if func == \'add_project\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'\'\n        return error\n   if func == \'add_sample\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'SignUp for  "Experimentalist Role" in this project to add a sample. Use Browser back button to navigate to Project View.\'\n        return error\n   if func == \'experimentalist\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You must be an experimentalist to add the biosource information of a sample\'\n        return error\n   if func == \'my_samples\':\n\tif  \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You are not authorized to view this page\'\n        return error\n\ndef basic_groups(pid):\n    """ creates the basic groups on general basis or id basis """\n    if not pid:\n        for i in role_list:\n\t   auth.add_group(i,i) \n    else:\n        pid_groups = [str(pid)+\'#\'+i for i in role_list]\n\tfor k in pid_groups:\n\t   auth.add_group(k,k)\n    return locals()\t   \n\n\ndef add_project():\n    error = authenticate(auth.user.id,\'\',\'add_project\')\n    form = SQLFORM(db.project,fields=[\'name\',\'code\',\'start_date\',\'project_description\',\'project_literature_reference\',\'project_journal_name\',\'project_publication_date\',\'project_pubmed_id\'],showid=False)\n    form.vars.project_coordinator = auth.user.id\n    if form.process().accepted:\n       response.flash =\'accepted\'\n       result = db(db.project.name == form.vars.name).select(db.project.ALL).first()\n       basic_groups(result.id)\n       db.role.insert(user=auth.user.id,project=result.id,role=6,approval_status=1,member_since=now)\n       redirect(URL(\'project_viewer\',args = form.vars.id))\n    elif form.errors:\n       response.flash = \'errors\'\n    return locals()\n\ndef remove_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """takes an id and removes the project """ \n    pid  = request.args(0)\n    pid_groups = [str(pid)+\'#\'+i for i in role_list]\n    for z in pid_groups:\n\tpgid = auth.id_group(z)\n\tauth.del_group(pgid)\n    del db.project[pid]\n    return locals()\n\ndef add_experiment():\n    grid = SQLFORM.grid(db.experiment)\n    return locals()\n\ndef new_affiliation():\n    form = SQLFORM(db.affiliation)\n    return locals()\n\ndef edit_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    crud.settings.update_next = URL(\'project_viewer\',args=request.args)\n    form=crud.update(db.project,request.args(0),deletable=False)\n    return locals();\n \n@auth.requires_login()\ndef project_viewer():\n    pid = request.args[-1]\n    project=db(db.project.id==pid).select(db.project.ALL).first()\n    cord = db(db.auth_user.id==project.project_coordinator).select(db.auth_user.ALL).first()\n    \n    if authenticate(auth.user.id,\'\',\'roles\') == \'\':\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'Grant Role\'),False,URL(\'roles\',args=project.id)),\n      (T(\'Edit Project\'),False,URL(\'edit_project\',args=project.id)),\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n    else :\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n      \n    if project.project_status == \'1\':\n      response.menu+= [\n      (T(\'Published Samples\'), False,URL(\'list_all_pub_samples\',args=(pid)),[])\n      ]\n    elif authenticate(auth.user.id,pid,\'add_sample\')==\'\':\n        response.menu+= [\n        (T(\'Samples\'), False,URL(\'my_samples\',args=(pid)),[\n        (T(\'My Samples\'), False,URL(\'my_samples\',args=(pid))),\n        ])\n        ]\n      \n    users=db(db.role.approval_status==1)(db.role.project==pid)(db.role.project == db.project.id)(db.role.user==db.auth_user.id).select(db.role.ALL,db.auth_user.ALL)\n    is_coordinator = \'\'\n    myroles = \'\'\n    if auth.user:\n      is_coordinator = db(db.project.id == pid)(db.project.project_coordinator == auth.user.id).select(db.project.ALL).first()\n      result = db(db.role.user == auth.user.id)(db.role.project == pid).select(db.role.ALL)\n      myroles = [role_list[int(k.role)] for k in result]\n      \n    return locals()\n\n\ndef add_sample():\n  """ creates a exp on an project basis and should continue to fill the bio source data """\n  """ available to the experimentalist """ \n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  if \'new\' in request.args:\n   pid = request.args[-3]\n  else:\n   pid = request.args(0)\n  error = authenticate(auth.user.id,pid,\'add_sample\') \n  form = SQLFORM(db.sample,fields=[\'name\',\'code\',\'description\',\'scientific_name\'],showid=False)\n#added a field project in sample table\n#added two more fields in form insert root/replica etc and scientific name\n  if form.validate():\n      i = db.sample.insert(experimentalist=auth.user.id,name=form.vars.name,code=form.vars.code ,description=form.vars.description,experiment=pid,scientific_name=form.vars.scientific_name,working_status=1,publication_status=0)\n      response.flash = \'sample has been created\'\n      redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',pid])) \n      # redirect to the sample creation \n  elif form.errors:\n      response.flash = \'Form has errors\'\n  return locals()\n\ndef sample_viewer():\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   i = request.args[-1]\n   if \'view\' in request.args: \n\tform = SQLFORM(db.sample, i,readonly =True,showid=False)\n   if \'edit\' in request.args: \n\tform = SQLFORM(db.sample, i,showid=False)\n   if form.process().accepted:\n\tresponse.flash = \'form accepted\'\n\tredirect(URL(\'list_all_dev_projects\',args = request.args[0:-3])) \n   elif form.errors:\n\tresponse.flash = \'form has errors\'\n   return dict(form=form)\n\ndef list_all_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'index\'), [])\n    #(T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    #(T(\'Project\'), False, URL(\'default\',\'list_all_projects\'), [(T(\'Add Project\'),False,URL(\'default\',\'add_project\'))])\n    ]\n    form=FORM(\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    form.elements(\'input[type=submit]\')[0]["_value"] = "Search"\n    if form.accepts(request,session):\n      redirect(URL(\'grid?keywords=tomato\')) \n    \n    #form=FORM(\'\',INPUT(_name=\'name\') ,INPUT(_type=\'submit\'))\n    #if form.process().accepted:\n      #redirect(URL(\'grid\')) \n    pub_projects = db(db.project.project_status == 1)(db.project.project_coordinator==db.auth_user.id).select(db.project.ALL,db.auth_user.ALL)\n    dev_projects = db(db.project.project_status == 0)(db.project.project_coordinator==db.auth_user.id).select(db.project.ALL,db.auth_user.ALL)\n    authenticated = \'no\'\n    if auth.user:\n     authenticated = authenticate(auth.user.id,\'\',\'add_project\')\n    return locals()\n\ndef grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.sample.id==db.biosource.sample_name))\n   #query=((db.project.project_status==0))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n   grid = SQLFORM.grid(query)\n   return locals() \n\ndef temp():\n   q1 = (db.project.project_status ==  0)\n   q2 = (db.sample.publication_status == True)\n   ck = {}\n   fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n   l1=[lambda row: A(\'View Post\',_href=URL("default","view",args=[row.id]))]\n   links={\'project\':l1}\n   grid = SQLFORM.smartgrid(db.project,ck,fields=fi,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n   return locals() \n\ndef list_all_pub_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    q1 = (db.project.project_status ==  1)\n    q2 = (db.sample.publication_status == True)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n    \trouter(request.args)\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=False,deletable=False,create = False,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n    \n    return locals()\n\ndef list_all_dev_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    db.sample.experimentalist.default=auth.user.id\n    db.sample.experiment.writable = False\n    q1 = (db.project.project_status ==  0)\n    q2 = (db.sample.experimentalist == auth.user.id)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.sample.publication_status,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.spectrophotometry.sample_name,db.raw_data_storage_information.sample_name]\n    edit_dict = {\'project\':False}\n    delete_dict = {\'project\':False}\n#Allow only one original sample to be added in an experiment others are replicates\n    addsample = True\n   # if \'sample\' in request.args and \'new\' in request.args:\n   #      count = db(db.sample.experiment==request.args[-3]).count()\n   #      if(count>0):\n   #        db.sample.replica.default = \'replicate\'\n   #       # db.sample.replica.requires=IS_IN_SET([\'replicate\',\'alicot\'])\n   #      else:\n   #        db.sample.replica.default = \'Original\'\n   #        db.sample.replica.writable = False\n           \n    create_dict = {\'project\':False,\'sample\':addsample}\n#Links for replicating samples  \n    args= request.args[0:5]\n    #args1=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],"biosource.sample_name","edit","biosource"]\n    l1=[lambda row: A(\'copy\',_href=URL("default","replicate",args=request.args[:]+[row.id])),\\\n           lambda row: A(\'aliqout\',_href=URL("default","duplicate",args=request.args[:]+["aliqout"]+[row.id])), \\\n           lambda row: A(\'aliqout\',_href=URL("default","duplicate",args=request.args[:]+["aliqout"]+[row.id])), \\\n           lambda row: A(\'biosource_\'+tes(row.id,\'biosource\'),_href=URL("default","router",args=getargs(row.id,args,"biosource"))), \\\n           lambda row: A(\'PGC_\'+tes(row.id,\'plant_growth_condition\'),_href=URL("default","router",args=getargs(row.id,args,"plant_growth_condition"))), \\\n           lambda row: A(\'treatment_\'+tes(row.id,\'treatments\'),_href=URL("default","router",args=getargs(row.id,args,"treatments"))), \\\n           lambda row: A(\'harvest_\'+tes(row.id,\'harvests\'),_href=URL("default","router",args=getargs(row.id,args,"harvests"))), \\\n           lambda row: A(\'Ext_\'+tes(row.id,\'extraction_preparation\'),_href=URL("default","router",args=getargs(row.id,args,"extraction_preparation"))), \\\n           lambda row: A(\'GC_\'+tes(row.id,\'gas_chromatography\'),_href=URL("default","router",args=getargs(row.id,args,"gas_chromatography"))), \\\n           lambda row: A(\'LC_\'+tes(row.id,\'liquid_chromatography\'),_href=URL("default","router",args=getargs(row.id,args,"liquid_chromatography"))), \\\n           lambda row: A(\'MS_\'+tes(row.id,\'mass_spectroscopy\'),_href=URL("default","router",args=getargs(row.id,args,"mass_spectroscopy"))), \\\n           lambda row: A(\'spectrophotometry_\'+tes(row.id,\'spectrophotometry\'),_href=URL("default","router",args=getargs(row.id,args,"spectrophotometry")))]\n    links={\'sample\':l1}\n#customized Views for certain forms using router   \n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n     \trouter()\n    s={\'sample\':lambda ids : redirect(URL(\'default\', \'mapping_multiple\', vars=dict(id=ids)))}\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=[\'experiment\',\'sample\',\'raw_data_storage_information\'],selectable = s) \n    return locals()\n\n#gets table name and rowid as input and creates another row with same details as rowid recod has\ndef tes(a,table):\n    if db(db[table].sample_name==a).count()==0:\n     return "add"\n    else:\n        return "edit"\n    return "add"\ndef getargs(a,args,table):\n    row = db(db[table].sample_name==a).select(db[table].id).first()\n    if row:\n        args=args+[table+".sample_name",a,"edit",table,row.id]\n        return args\n    else:\n        args = args+[table+".sample_name",a,"new",table]\n        return args\n\ndef replicate():\n    if db(db.template.user==auth.user.id).count() == 0:\n       db.template.insert(user=auth.user.id, sample=request.args[-1])\n    else:   \n       db(db.template.user == auth.user.id).update(sample=request.args[-1])\n    redirect(URL(\'list_all_dev_projects\',args=request.args[0:-1]))\n    #Unique fields take care\n    #product.update(sampleid=\'temp\')\n    return() \ndef duplicate():\n    if True:\n        rec = db(db.sample.id==request.args[-1]).select(db.sample.ALL).first()\n        rec.update(parent=rec.id,replica=str(request.args[-2]))\n        in_row = db.sample.insert(**db.sample._filter_fields(rec))\n        for tb in [\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\']:\n            row = db(db[tb].sample_name==request.args[-1]).select(db[tb].ALL).first()\n            if row:\n                row.update(sample_name = in_row.id)\n                db[tb].insert(**db[tb]._filter_fields(row)) \n        redirect(URL(\'list_all_dev_projects\',args=request.args[0:-2]))\n    redirect(URL(\'list_all_dev_projects\',args=[]))\n\n\ndef my_samples():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """ all my samples in the project with permissions to edit delete publish/unpublish samples """\n    error = authenticate(auth.user.id,request.args(0),\'add_sample\') \n    l =  [\'project\',\'experiment.project\',request.args(0)]\n    if error == \'\':\n      redirect(URL(\'list_all_dev_projects\',args=l))\n    return locals()\n\ndef list_all_samples1():\n    proj_id = request.args(0)\n    pub_samples = db((db.sample.working_status == 1)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    dev_samples = db((db.sample.working_status == 0)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    return locals()\n\ndef view_published_samples():\n    proj_id = request.args(0)\n    return locals() \n\ndef router():\n    l=request.args\n    if \'biosource\' in l:\n      redirect(URL(\'insert_biosource\',args = l))\n    elif \'plant_growth_condition\' in l:\n      redirect(URL(\'insert_pgc\',args = l))\n    elif \'treatments\' in l:\n      redirect(URL(\'insert_treatments\',args = l))\n    elif \'harvests\' in l:\n      redirect(URL(\'insert_harvests\',args = l))\n    elif \'extraction_preparation\' in l:\n      redirect(URL(\'insert_ep\',args = l))\n    elif \'gas_chromatography\' in l:\n        redirect(URL(\'insert_gc\',args = l))\n    elif \'liquid_chromatography\' in l:\n        redirect(URL(\'insert_lc\',args = l))\n    elif \'mass_spectroscopy\' in l:\n        redirect(URL(\'insert_ms\',args = l))\n    elif \'raw_data_storage_information\' in l:\n          redirect(URL(\'insert_raw_data\',args = l))\n    elif \'sample\' in l and \'view\' in l:\t\t\n        redirect(URL(\'sample\',args=l))\n    else:\n        return()\n\n\'\'\'\telif \'sample\' in l and \'new\' in l:\t\t\n\t  redirect(URL(\'add_sample\',args = l))\n\telif \'sample\' in l:\t\t\n\t  redirect(URL(\'sample_viewer\',args = l))\n\telif \'project\' in l:\n\t  redirect(URL(\'project_viewer\',args=l))\n\telse : \n\t  redirect(URL(\'index\'))\'\'\'\n\ndef list_all_pub_samples():\n#    proj_id = request.args(0)\n#    pub = request.args(1) # if pub == 1 show published samples otherwise non published samples\n#   pub_query = (db.sample.working_status == 1 and db.sample.project == proj_id)\n#   unpub_query = (db.sample.working_status == 0 and db.sample.project == proj_id)\n#   pquery_dict = {\'sample\':pub_query}\n#   nquery_dict = {\'sample\':unpub_query}\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#       router(request.args)\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#     \trouter(request.args)\n    \n    """an argument to display published and non-published samples"""\n    """ request.args(0) - project  , request.args(1) published"""\n\n    redirect(URL(\'list_all_pub_projects\',args=[\'project\',\'experiment.project\',request.args(0)]))\n    \ndef list_all_dev_samples():\n   \n    redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',request.args(0)]))\n    return locals()\n\ndef ajx_role():\n    """ an ajax call back which takes care of insert , update and delete in the roles table """\n    rid = request.args(1)\n    if request.args(0) == \'accept\':\n       row = db(db.role.id == rid).update(approval_status = 1)\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.add_membership(gid,result.user)\n    if request.args(0) == \'unblock\':\n       del db.role[rid] \n    if request.args(0) == \'block\':\n       row = db(db.role.id == rid).update(approval_status = 2)\n    if request.args(0) == \'delete\' or request.args(0) == \'deny\':\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.del_membership(gid,result.user)\n       del db.role[rid] \n    return locals()\n\ndef reg_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ takes an id for the project and registers """\n    import datetime\n    now = datetime.datetime.now()\n    """ already requested """\n    pid = request.args(0)\n    ptitle = db(db.project.id == pid).select(db.project.ALL).first()\n    form = SQLFORM(db.role,fields=[\'role\'],showid=False)\n    if form.validate():\n       requested = db(db.role.user == auth.user.id)(db.role.project == pid)(db.role.approval_status == 0)(db.role.role==form.vars.role).count()\n       if requested == 0: \n        db.role.insert(user=auth.user.id,approval_status=0,project=pid,member_since=now,role=form.vars.role)\n        response.flash = \'accepted\'\n       else:\n        response.flash = \'You already hold the applied role\' \n    return locals() \n\ndef ajx_publish():\n    """ an ajax call back which takes care of publication status """\n    eid = request.args(1)\n    if request.args(0) == \'publish\':\n     row = db(db.project.id == eid).update(project_status = "1")\n    elif request.args(0) == \'unpublish\':\n     row = db(db.project.id == eid).update(project_status = "0")\n    redirect(URL(\'project_viewer\',args = eid))\n    return locals() \n\ndef roles():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ complete interface for managing roles for a particular project"""\n    """ should be accessible to only project co-ordinators """\n    pid = request.args(0)\n    error = authenticate(auth.user.id,pid,\'roles\')\n    accepted = db(db.auth_user.id == db.role.user)(db.role.approval_status == 1)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    pending = db(db.auth_user.id == db.role.user)(db.role.approval_status == 0)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    blocked = db(db.auth_user.id == db.role.user)(db.role.approval_status == 2)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    return locals()\n   \ndef home_page():\n    """ home page for a user , shows list of projects he is working on and his past work """\n    uid = request.args(0)\n    #my roles \n    \n    roles = db(db.role.user == uid)(db.role.project == db.project.id).select(db.role.ALL,db.project.name) \n    myroles = [role_list[int(p.role.role)] for p in roles]\n    k = {}\n    """\n    is_coordinator = db(db.project.project_coordinator==uid).select(db.project.ALL)\n    coordinating_projects = [row.name for row in is_coordinator]\n    value=\'\'\n    for p in coordinating_projects:\n       value = value + \',\'+ p\n\t  \n    k[6] = value[1:] """\n    for row in roles:\n       if row.role.role not in k:\n          k[row.role.role] = row.project.name\n       else:\n          k[row.role.role] = k[row.role.role] + \',\' + row.project.name\n    com_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    incom_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    pub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == True)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    unpub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == False) (db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    for p in k:\n       list_projects = k[p].split(\',\')\n       proj = \'\' \n       for d in list_projects:\n          res = db(db.project.name == d).select(db.project.ALL).first()\n          cat = \'\'\n          if res:\n             cat = A(res.name,_href=URL(\'project_viewer\',args=res.id))\n          if proj == \'\':\n             proj=SPAN(cat)\n          else:\n           proj = SPAN(proj,\',\',cat)\n       k[p] = proj \n    return locals()\n\ndef download():\n    return response.download(request, db)\n\ndef insert_biosource():\n#prepopulating records  \n   if \'clear\' not in request.args and \'new\' in request.args:    \n    trows = db(db.template.user==auth.user.id).select()\n    count = db(db.template.user==auth.user.id).count()\n    if count > 0:\n     rows = db(db.biosource.sample_name==trows[0].sample).select()\n     count1 = db(db.biosource.sample_name==trows[0].sample).count()\n     if count1 > 0:\n      row = rows[0]      \n      for fieldname in db.biosource.fields:\n       if fieldname!=\'id\': \n        db.biosource[fieldname].default=row[fieldname]\n   elif \'clear\' in request.args: \n    request.args.pop()\n   #result = db(db.sample.id == request.args[-3]).select(db.sample.ALL).first()\n#  error = authenticate(auth.user.id,result.project,\'insert_biosource\')\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   redirect_args = request.args[0:-3]\n   form = SQLFORM(db.biosource)\n   if \'view\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],readonly = True,showid=False)\t  \n   elif \'edit\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],showid=False)\n   elif \'new\' in request.args:\n               db.biosource.sample_name.readable = False \n               hid = {}   \n\t       form=SQLFORM(db.biosource,showid=False)\n\t       form.vars.sample_name = request.args[-3]\n \t       redirect_args = request.args[0:-4]\n   i=1\n   f1=form[0][:i+2]\n   fs1=form[0][i+2:i+7]\n   f2=form[0][i+7:]\n   form[0]=TABLE(TABLE(f1),\n      FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n   if form.process().accepted:\n     redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n     response.flash="Inserted entry"\n   return locals()\n\ndef insert_pgc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.plant_growth_condition.sample_name==trows[0].sample).select()\n    count1 = db(db.plant_growth_condition.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.plant_growth_condition.fields:\n      if fieldname!=\'id\': \n       db.plant_growth_condition[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.plant_growth_condition) \n  if \'view\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.plant_growth_condition.sample_name.readable = False \n\tform=SQLFORM(db.plant_growth_condition,showid=False)\n        form.vars.sample_name = request.args[-3]\n\tredirect_args = request.args[0:-2]\t \n  i=1\n  fs1=form[0][:i+5]\n  fss1=form[0][i+5:i+9]\n  fss2=form[0][i+9:i+10]\n  fss3=form[0][i+10:i+15]\n  f2=form[0][i+15:i+18]\n  fs2=form[0][i+18:i+21]\n  fs3=form[0][i+21:i+27]\n  f3=form[0][i+27:]\n  t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n  t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n  t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n  t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n  form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n  if form.process().accepted:\n    redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n    response.flash="form accepted"\n# redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  else:\n    response.flsh="form has some errors"\n  return locals()\n\ndef insert_ep():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.extraction_preparation.sample_name==trows[0].sample).select()\n    count1 = db(db.extraction_preparation.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.extraction_preparation.fields:\n      if fieldname!=\'id\': \n       db.extraction_preparation[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.extraction_preparation.sample_name.readable=False\n       form=SQLFORM(db.extraction_preparation,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:i+8]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][i+8:i+12])))))\n  t2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][i+12:])))\n  form[0]=TABLE(FIELDSET(t1,t2))\n  if form.process().accepted:\n       response.flash="Inserted entry"\n       redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_treatments():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.treatments.sample_name==trows[0].sample).select()\n    count1 = db(db.treatments.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.treatments.fields:\n      if fieldname!=\'id\': \n       db.treatments[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.treatments.sample_name.readable=False\n       form=SQLFORM(db.treatments,showid=False)\n       form.vars.sample_name = request.args[-3] \n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n  form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_harvests():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.harvests.sample_name==trows[0].sample).select()\n    count1 = db(db.harvests.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.harvests.fields:\n      if fieldname!=\'id\': \n       db.harvests[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.harvests.sample_name.readable=False\n       form=SQLFORM(db.harvests,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\n  i=1\t \n  t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n  form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\t  \t\ndef insert_gc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.gas_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.gas_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.gas_chromatography.fields:\n      if fieldname!=\'id\': \n       db.gas_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n\tform=SQLFORM(db.gas_chromatography,request.args[-1],readonly = True,pload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n        form=SQLFORM(db.gas_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.gas_chromatography.sample_name.readable=False\n        redirect_args = request.args[0:-2]\t \n        form=SQLFORM(db.gas_chromatography,showid=False)\n        form.vars.sample_name = request.args[-3]\n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n\tresponse.flash="Inserted entry"\n\tredirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#       redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_lc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.liquid_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.liquid_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.liquid_chromatography.fields:\n      if fieldname!=\'id\': \n       db.liquid_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.liquid_chromatography)\n  if \'view\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n      db.liquid_chromatography.sample_name.readable=False\n      redirect_args = request.args[0:-2]\t \n      form=SQLFORM(db.liquid_chromatography,showid=False)\n      form.vars.sample_name = request.args[-3] \n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_ms():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.mass_spectroscopy.sample_name==trows[0].sample).select()\n    count1 = db(db.mass_spectroscopy.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.mass_spectroscopy.fields:\n      if fieldname!=\'id\': \n       db.mass_spectroscopy[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.mass_spectroscopy.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.mass_spectroscopy,showid=False)\n    form.vars.sample_name = request.args[-3]\n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n  t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n  t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n  t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n  form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_raw_data():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.raw_data_storage_information.sample_name==trows[0].sample).select()\n    count1 = db(db.raw_data_storage_information.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.raw_data_storage_information.fields:\n      if fieldname!=\'id\': \n       db.raw_data_storage_information[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.raw_data_storage_information.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.raw_data_storage_information,showid=False)\n    form.vars.sample_name = request.args[-3]\n    form.vars.email_id_of_person=auth.user.email \n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_spectrophotometry():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.spectrophotometry.sample_name==trows[0].sample).select()\n    count1 = db(db.spectrophotometry.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.spectrophotometry.fields:\n      if fieldname!=\'id\': \n       db.spectrophotometry[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.spectrophotometry.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.spectrophotometry,showid=False)\n    form.vars.sample_name = request.args[-3]\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n#def drop_tables():\n    #are you sure you want to do this?\n    #for t in [\'auth_user\',\'auth_group\', \'auth_membership\', \'auth_permission\', \'auth_event\',\'sample\',\'biosource\',\'affiliation\',\'project\',\'role\',\'template\',\'experiment\',\'project_meta\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'feedback\',\'sample_files\']:\n    #    db[t].drop()\n    # pass\n    #return \n\ndef show_feedback():\n    grid = SQLFORM.smartgrid(db.feedback)\n    return locals()\n\n \ndef post_feedback():\n    """ allows to post feedback to the table feedback """ \n    past_feeds = db(db.feedback.feedback_on == request.env.http_referer).select(db.feedback.feedback_body,db.feedback.id)\n    form = SQLFORM(db.feedback,fields=[\'feedback_body\'],labels={\'feedback_body\':\'Your feedback about this page\'})\n    feedback_by = \'\'\n    if form.validate():\n\tif auth.user:\n            feedback_by = auth.user.id\n        else:\n\t   feedback_by = \'\'\n\tdb.feedback.insert(feedback_on=request.env.http_referer,feedback_body=form.vars.feedback_body,feedback_by=feedback_by)\n\tresponse.flash = "feedback has been duly noted and will be taken care of "\n    return locals()\n\n\ndef user_viewer():\n   """shows the user details """\n   uid = request.args(0)\n   record = db.auth_user(uid)\n   form = SQLFORM(db.auth_user,record,readonly=True,showid=False,fields=[\'first_name\',\'last_name\',\'email\',\'affiliated_to\',\'phone\',\'mobile\',\'city\'])\n   return locals()\n\n\ndef dict_dump(obj,inp):\n  ans = \'<dl class="dl-horizontal">\'\n  for key in inp.keys():\n     add = \'<dt>\'+str(inp[key])+\'</dt>\'+\'<dd>\'+str(obj[key])+\'</dd>\'\n     ans = ans+add\n  return ans\t\n\n\ndef sample():\n  """gets all the information regarding a sample in a single page """\n  sid = request.args[-1]\n  sample = db(db.sample.id == sid).select(db.sample.ALL).first()\n  user = db(db.auth_user.id == sample.experimentalist).select(db.auth_user.ALL).first()\n  experiment = db(db.experiment.id == sample.experiment).select(db.experiment.ALL).first()\n  biosource = db(db.biosource.sample_name == sid).select(db.biosource.ALL)\n  plant_growth = db(db.plant_growth_condition.sample_name == sid).select(db.plant_growth_condition.ALL)\n  treatment = db(db.treatments.sample_name == sid).select(db.treatments.ALL)\n  harvest = db(db.harvests.sample_name == sid).select(db.harvests.ALL)\n  extraction_preparation = db(db.extraction_preparation.sample_name == sid).select(db.extraction_preparation.ALL)\n  gc = db(db.gas_chromatography.sample_name == sid).select(db.gas_chromatography.ALL)\n  lc = db(db.liquid_chromatography.sample_name == sid).select(db.liquid_chromatography.ALL)\n  ms = db(db.mass_spectroscopy.sample_name == sid).select(db.mass_spectroscopy.ALL)\n  raw_storage = db(db.raw_data_storage_information.sample_name == sid).select(db.raw_data_storage_information.ALL)\n  biosource_forms = [] #a list of forms\n  for each in biosource:\n\tform = SQLFORM(db.biosource,each.id,showid=False,readonly=True)\n\ti=1\n\tf1=form[0][:i+2]\n\tfs1=form[0][i+2:i+7]\n\tf2=form[0][i+7:]\n\tform[0]=TABLE(TABLE(f1),FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n\tbiosource_forms.append(form[0])\n        \n  pgc_forms = []\n  for each in plant_growth:\n     form = SQLFORM(db.plant_growth_condition,each.id,showid=False,readonly=True)\n     i=1\n     fs1=form[0][:i+5]\n     fss1=form[0][i+5:i+9]\n     fss2=form[0][i+9:i+10]\n     fss3=form[0][i+10:i+15]\n     f2=form[0][i+15:i+18]\n     fs2=form[0][i+18:i+21]\n     fs3=form[0][i+21:i+27]\n     f3=form[0][i+27:]\n     t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n     t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n     t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n     t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n     form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n     pgc_forms.append(form[0])\n  \n  treatment_forms = []\n  for each in treatment:\n     form = SQLFORM(db.treatments,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n     form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n\n\n  harvest_forms = []\n  for each in harvest:\n     form = SQLFORM(db.harvests,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n     form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n     harvest_forms.append(form[0])\n\n  gc_forms = []\n  for each in gc:\n     form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n     j=1\n     t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n     t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n     i=15\n     t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n     t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n     t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n     t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n     t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n     t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n     t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n     form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n\n     gc_forms.append(form[0])\n \n  lc_forms = []\n  \n  for each in lc:\n    form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n    j=1\n    t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n    t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n    i=15\n    t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n    t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n    t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n    t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n    t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n    t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n    form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n    lc_forms.append(form[0])\n \n  ms_forms = []\n  for each in ms:\n    form = SQLFORM(db.mass_spectroscopy,each.id,showid=False,readonly=True)\n    i=1\n    t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n    t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n    t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n    t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n    t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n    form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))  \n    ms_forms.append(form[0])\n\n  raw_forms = []\n  for each in raw_storage:\n     form = SQLFORM(db.raw_data_storage_information,each.id,showid=False,readonly=True)\n     raw_forms.append(form[0])\n\n\n  return locals() \n\n#def grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   #query=((db.sample.project==db.project.id)&(db.project.id>0))\n   #query=((db.project.id>0)&(db.sample.project==db.project.id)&((db.sample.id==db.biosource.sample_name)&(db.sample.id==db.plant_growth_condition.sample_name)))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n#   grid = SQLFORM.grid(query)\n#   return locals()\n\n\ndef search():\n    form=FORM(\'Your name:\',\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n      redirect(URL(\'sample\',args=form.vars.name)) \n    return locals()\n    \ndef multiple_files():\n   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """\n   """ per sample . takes id of the sample as the input """\n   sid = request.args(0)\n   sample = db(db.sample.id == sid).select().first() \n   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)\n   form = SQLFORM(db.sample_files)\n   form.vars.sample = sid\n   return locals()\n\n\n\nresponse._vars=response._caller(list_all_dev_projects)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.AttributeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.AttributeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.AttributeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.AttributeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.AttributeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.AttributeError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.AttributeError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.AttributeError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.AttributeError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.AttributeError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.AttributeError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.AttributeError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.AttributeError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.AttributeError object>"
p41
sS'args'
p42
S'("\'NoneType\' object has no attribute \'id\'",)'
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.AttributeError object>'
p47
sS'__doc__'
p48
S"'Attribute not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.AttributeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'NoneType' object has no attribute 'id'"
p55
sS'request'
p56
ccopy_reg
_reconstructor
p57
(cgluon.html
BEAUTIFY
p58
c__builtin__
object
p59
NtRp60
(dp61
S'attributes'
p62
(dp63
sS'components'
p64
(lp65
g57
(cgluon.html
TABLE
p66
g59
NtRp67
(dp68
g62
(dp69
S'level'
p70
I5
ssS'parent'
p71
Nsg64
(lp72
g57
(cgluon.html
TR
p73
g59
NtRp74
(dp75
g62
(dp76
sg71
g67
sg64
(lp77
g57
(cgluon.html
TD
p78
g59
NtRp79
(dp80
g62
(dp81
S'_style'
p82
S'font-weight:bold;vertical-align:top'
p83
ssg71
g74
sg64
(lp84
S'ajax'
p85
asbag57
(g78
g59
NtRp86
(dp87
g62
(dp88
S'_valign'
p89
S'top'
p90
ssg71
g74
sg64
(lp91
S':'
asbag57
(g78
g59
NtRp92
(dp93
g62
(dp94
sg71
g74
sg64
(lp95
g57
(g58
g59
NtRp96
(dp97
g62
(dp98
g70
I5
ssg71
g92
sg64
(lp99
S'False'
p100
asbasbasbag57
(g73
g59
NtRp101
(dp102
g62
(dp103
sg71
g67
sg64
(lp104
g57
(g78
g59
NtRp105
(dp106
g62
(dp107
g82
g83
ssg71
g101
sg64
(lp108
S'application'
p109
asbag57
(g78
g59
NtRp110
(dp111
g62
(dp112
g89
g90
ssg71
g101
sg64
(lp113
S':'
asbag57
(g78
g59
NtRp114
(dp115
g62
(dp116
sg71
g101
sg64
(lp117
g57
(g58
g59
NtRp118
(dp119
g62
(dp120
g70
I5
ssg71
g114
sg64
(lp121
S'DEV_bootstrap_ch'
p122
asbasbasbag57
(g73
g59
NtRp123
(dp124
g62
(dp125
sg71
g67
sg64
(lp126
g57
(g78
g59
NtRp127
(dp128
g62
(dp129
g82
g83
ssg71
g123
sg64
(lp130
g42
asbag57
(g78
g59
NtRp131
(dp132
g62
(dp133
g89
g90
ssg71
g123
sg64
(lp134
S':'
asbag57
(g78
g59
NtRp135
(dp136
g62
(dp137
sg71
g123
sg64
(lp138
g57
(g58
g59
NtRp139
(dp140
g62
(dp141
g70
I5
ssg71
g135
sg64
(lp142
g57
(g66
g59
NtRp143
(dp144
g62
(dp145
g70
I4
ssg71
Nsg64
(lp146
g57
(g73
g59
NtRp147
(dp148
g62
(dp149
sg71
g143
sg64
(lp150
g57
(g78
g59
NtRp151
(dp152
g62
(dp153
sg71
g147
sg64
(lp154
g57
(g58
g59
NtRp155
(dp156
g62
(dp157
g70
I4
ssg71
g151
sg64
(lp158
S'project'
p159
asbasbasbag57
(g73
g59
NtRp160
(dp161
g62
(dp162
sg71
g143
sg64
(lp163
g57
(g78
g59
NtRp164
(dp165
g62
(dp166
sg71
g160
sg64
(lp167
g57
(g58
g59
NtRp168
(dp169
g62
(dp170
g70
I4
ssg71
g164
sg64
(lp171
S'experiment.project'
p172
asbasbasbag57
(g73
g59
NtRp173
(dp174
g62
(dp175
sg71
g143
sg64
(lp176
g57
(g78
g59
NtRp177
(dp178
g62
(dp179
sg71
g173
sg64
(lp180
g57
(g58
g59
NtRp181
(dp182
g62
(dp183
g70
I4
ssg71
g177
sg64
(lp184
S'5'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp185
(dp186
g62
(dp187
sg71
g67
sg64
(lp188
g57
(g78
g59
NtRp189
(dp190
g62
(dp191
g82
g83
ssg71
g185
sg64
(lp192
S'body'
p193
asbag57
(g78
g59
NtRp194
(dp195
g62
(dp196
g89
g90
ssg71
g185
sg64
(lp197
S':'
asbag57
(g78
g59
NtRp198
(dp199
g62
(dp200
sg71
g185
sg64
(lp201
g57
(g58
g59
NtRp202
(dp203
g62
(dp204
g70
I5
ssg71
g198
sg64
(lp205
S'<cStringIO.StringO object at 0xadb7a620>'
p206
asbasbasbag57
(g73
g59
NtRp207
(dp208
g62
(dp209
sg71
g67
sg64
(lp210
g57
(g78
g59
NtRp211
(dp212
g62
(dp213
g82
g83
ssg71
g207
sg64
(lp214
S'cid'
p215
asbag57
(g78
g59
NtRp216
(dp217
g62
(dp218
g89
g90
ssg71
g207
sg64
(lp219
S':'
asbag57
(g78
g59
NtRp220
(dp221
g62
(dp222
sg71
g207
sg64
(lp223
g57
(g58
g59
NtRp224
(dp225
g62
(dp226
g70
I5
ssg71
g220
sg64
(lp227
S'None'
p228
asbasbasbag57
(g73
g59
NtRp229
(dp230
g62
(dp231
sg71
g67
sg64
(lp232
g57
(g78
g59
NtRp233
(dp234
g62
(dp235
g82
g83
ssg71
g229
sg64
(lp236
S'client'
p237
asbag57
(g78
g59
NtRp238
(dp239
g62
(dp240
g89
g90
ssg71
g229
sg64
(lp241
S':'
asbag57
(g78
g59
NtRp242
(dp243
g62
(dp244
sg71
g229
sg64
(lp245
g57
(g58
g59
NtRp246
(dp247
g62
(dp248
g70
I5
ssg71
g242
sg64
(lp249
S'127.0.0.1'
p250
asbasbasbag57
(g73
g59
NtRp251
(dp252
g62
(dp253
sg71
g67
sg64
(lp254
g57
(g78
g59
NtRp255
(dp256
g62
(dp257
g82
g83
ssg71
g251
sg64
(lp258
S'controller'
p259
asbag57
(g78
g59
NtRp260
(dp261
g62
(dp262
g89
g90
ssg71
g251
sg64
(lp263
S':'
asbag57
(g78
g59
NtRp264
(dp265
g62
(dp266
sg71
g251
sg64
(lp267
g57
(g58
g59
NtRp268
(dp269
g62
(dp270
g70
I5
ssg71
g264
sg64
(lp271
S'default'
p272
asbasbasbag57
(g73
g59
NtRp273
(dp274
g62
(dp275
sg71
g67
sg64
(lp276
g57
(g78
g59
NtRp277
(dp278
g62
(dp279
g82
g83
ssg71
g273
sg64
(lp280
S'cookies'
p281
asbag57
(g78
g59
NtRp282
(dp283
g62
(dp284
g89
g90
ssg71
g273
sg64
(lp285
S':'
asbag57
(g78
g59
NtRp286
(dp287
g62
(dp288
sg71
g273
sg64
(lp289
g57
(g58
g59
NtRp290
(dp291
g62
(dp292
g70
I5
ssg71
g286
sg64
(lp293
g57
(g66
g59
NtRp294
(dp295
g62
(dp296
g70
I4
ssg71
Nsg64
(lp297
g57
(g73
g59
NtRp298
(dp299
g62
(dp300
sg71
g294
sg64
(lp301
g57
(g78
g59
NtRp302
(dp303
g62
(dp304
g82
g83
ssg71
g298
sg64
(lp305
S'session_id_admin'
p306
asbag57
(g78
g59
NtRp307
(dp308
g62
(dp309
g89
g90
ssg71
g298
sg64
(lp310
S':'
asbag57
(g78
g59
NtRp311
(dp312
g62
(dp313
sg71
g298
sg64
(lp314
g57
(g58
g59
NtRp315
(dp316
g62
(dp317
g70
I4
ssg71
g311
sg64
(lp318
S'127.0.0.1-139d73ee-0525-46bf-aeb6-deeffe5cb9b3'
p319
ag57
(g66
g59
NtRp320
(dp321
g62
(dp322
g70
I3
ssg71
Nsg64
(lp323
g57
(g73
g59
NtRp324
(dp325
g62
(dp326
sg71
g320
sg64
(lp327
g57
(g78
g59
NtRp328
(dp329
g62
(dp330
g82
g83
ssg71
g324
sg64
(lp331
S'comment'
p332
asbag57
(g78
g59
NtRp333
(dp334
g62
(dp335
g89
g90
ssg71
g324
sg64
(lp336
S':'
asbag57
(g78
g59
NtRp337
(dp338
g62
(dp339
sg71
g324
sg64
(lp340
g57
(g58
g59
NtRp341
(dp342
g62
(dp343
g70
I3
ssg71
g337
sg64
(lp344
S''
asbasbasbag57
(g73
g59
NtRp345
(dp346
g62
(dp347
sg71
g320
sg64
(lp348
g57
(g78
g59
NtRp349
(dp350
g62
(dp351
g82
g83
ssg71
g345
sg64
(lp352
S'domain'
p353
asbag57
(g78
g59
NtRp354
(dp355
g62
(dp356
g89
g90
ssg71
g345
sg64
(lp357
S':'
asbag57
(g78
g59
NtRp358
(dp359
g62
(dp360
sg71
g345
sg64
(lp361
g57
(g58
g59
NtRp362
(dp363
g62
(dp364
g70
I3
ssg71
g358
sg64
(lp365
S''
asbasbasbag57
(g73
g59
NtRp366
(dp367
g62
(dp368
sg71
g320
sg64
(lp369
g57
(g78
g59
NtRp370
(dp371
g62
(dp372
g82
g83
ssg71
g366
sg64
(lp373
S'expires'
p374
asbag57
(g78
g59
NtRp375
(dp376
g62
(dp377
g89
g90
ssg71
g366
sg64
(lp378
S':'
asbag57
(g78
g59
NtRp379
(dp380
g62
(dp381
sg71
g366
sg64
(lp382
g57
(g58
g59
NtRp383
(dp384
g62
(dp385
g70
I3
ssg71
g379
sg64
(lp386
S''
asbasbasbag57
(g73
g59
NtRp387
(dp388
g62
(dp389
sg71
g320
sg64
(lp390
g57
(g78
g59
NtRp391
(dp392
g62
(dp393
g82
g83
ssg71
g387
sg64
(lp394
S'httponly'
p395
asbag57
(g78
g59
NtRp396
(dp397
g62
(dp398
g89
g90
ssg71
g387
sg64
(lp399
S':'
asbag57
(g78
g59
NtRp400
(dp401
g62
(dp402
sg71
g387
sg64
(lp403
g57
(g58
g59
NtRp404
(dp405
g62
(dp406
g70
I3
ssg71
g400
sg64
(lp407
S''
asbasbasbag57
(g73
g59
NtRp408
(dp409
g62
(dp410
sg71
g320
sg64
(lp411
g57
(g78
g59
NtRp412
(dp413
g62
(dp414
g82
g83
ssg71
g408
sg64
(lp415
S'max-age'
p416
asbag57
(g78
g59
NtRp417
(dp418
g62
(dp419
g89
g90
ssg71
g408
sg64
(lp420
S':'
asbag57
(g78
g59
NtRp421
(dp422
g62
(dp423
sg71
g408
sg64
(lp424
g57
(g58
g59
NtRp425
(dp426
g62
(dp427
g70
I3
ssg71
g421
sg64
(lp428
S''
asbasbasbag57
(g73
g59
NtRp429
(dp430
g62
(dp431
sg71
g320
sg64
(lp432
g57
(g78
g59
NtRp433
(dp434
g62
(dp435
g82
g83
ssg71
g429
sg64
(lp436
S'path'
p437
asbag57
(g78
g59
NtRp438
(dp439
g62
(dp440
g89
g90
ssg71
g429
sg64
(lp441
S':'
asbag57
(g78
g59
NtRp442
(dp443
g62
(dp444
sg71
g429
sg64
(lp445
g57
(g58
g59
NtRp446
(dp447
g62
(dp448
g70
I3
ssg71
g442
sg64
(lp449
S''
asbasbasbag57
(g73
g59
NtRp450
(dp451
g62
(dp452
sg71
g320
sg64
(lp453
g57
(g78
g59
NtRp454
(dp455
g62
(dp456
g82
g83
ssg71
g450
sg64
(lp457
S'secure'
p458
asbag57
(g78
g59
NtRp459
(dp460
g62
(dp461
g89
g90
ssg71
g450
sg64
(lp462
S':'
asbag57
(g78
g59
NtRp463
(dp464
g62
(dp465
sg71
g450
sg64
(lp466
g57
(g58
g59
NtRp467
(dp468
g62
(dp469
g70
I3
ssg71
g463
sg64
(lp470
S''
asbasbasbag57
(g73
g59
NtRp471
(dp472
g62
(dp473
sg71
g320
sg64
(lp474
g57
(g78
g59
NtRp475
(dp476
g62
(dp477
g82
g83
ssg71
g471
sg64
(lp478
S'version'
p479
asbag57
(g78
g59
NtRp480
(dp481
g62
(dp482
g89
g90
ssg71
g471
sg64
(lp483
S':'
asbag57
(g78
g59
NtRp484
(dp485
g62
(dp486
sg71
g471
sg64
(lp487
g57
(g58
g59
NtRp488
(dp489
g62
(dp490
g70
I3
ssg71
g484
sg64
(lp491
S''
asbasbasbasbasbasbasbag57
(g73
g59
NtRp492
(dp493
g62
(dp494
sg71
g294
sg64
(lp495
g57
(g78
g59
NtRp496
(dp497
g62
(dp498
g82
g83
ssg71
g492
sg64
(lp499
S'session_id_dev_bootstrap_ch'
p500
asbag57
(g78
g59
NtRp501
(dp502
g62
(dp503
g89
g90
ssg71
g492
sg64
(lp504
S':'
asbag57
(g78
g59
NtRp505
(dp506
g62
(dp507
sg71
g492
sg64
(lp508
g57
(g58
g59
NtRp509
(dp510
g62
(dp511
g70
I4
ssg71
g505
sg64
(lp512
S'127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a'
p513
ag57
(g66
g59
NtRp514
(dp515
g62
(dp516
g70
I3
ssg71
Nsg64
(lp517
g57
(g73
g59
NtRp518
(dp519
g62
(dp520
sg71
g514
sg64
(lp521
g57
(g78
g59
NtRp522
(dp523
g62
(dp524
g82
g83
ssg71
g518
sg64
(lp525
g332
asbag57
(g78
g59
NtRp526
(dp527
g62
(dp528
g89
g90
ssg71
g518
sg64
(lp529
S':'
asbag57
(g78
g59
NtRp530
(dp531
g62
(dp532
sg71
g518
sg64
(lp533
g57
(g58
g59
NtRp534
(dp535
g62
(dp536
g70
I3
ssg71
g530
sg64
(lp537
S''
asbasbasbag57
(g73
g59
NtRp538
(dp539
g62
(dp540
sg71
g514
sg64
(lp541
g57
(g78
g59
NtRp542
(dp543
g62
(dp544
g82
g83
ssg71
g538
sg64
(lp545
g353
asbag57
(g78
g59
NtRp546
(dp547
g62
(dp548
g89
g90
ssg71
g538
sg64
(lp549
S':'
asbag57
(g78
g59
NtRp550
(dp551
g62
(dp552
sg71
g538
sg64
(lp553
g57
(g58
g59
NtRp554
(dp555
g62
(dp556
g70
I3
ssg71
g550
sg64
(lp557
S''
asbasbasbag57
(g73
g59
NtRp558
(dp559
g62
(dp560
sg71
g514
sg64
(lp561
g57
(g78
g59
NtRp562
(dp563
g62
(dp564
g82
g83
ssg71
g558
sg64
(lp565
g374
asbag57
(g78
g59
NtRp566
(dp567
g62
(dp568
g89
g90
ssg71
g558
sg64
(lp569
S':'
asbag57
(g78
g59
NtRp570
(dp571
g62
(dp572
sg71
g558
sg64
(lp573
g57
(g58
g59
NtRp574
(dp575
g62
(dp576
g70
I3
ssg71
g570
sg64
(lp577
S''
asbasbasbag57
(g73
g59
NtRp578
(dp579
g62
(dp580
sg71
g514
sg64
(lp581
g57
(g78
g59
NtRp582
(dp583
g62
(dp584
g82
g83
ssg71
g578
sg64
(lp585
g395
asbag57
(g78
g59
NtRp586
(dp587
g62
(dp588
g89
g90
ssg71
g578
sg64
(lp589
S':'
asbag57
(g78
g59
NtRp590
(dp591
g62
(dp592
sg71
g578
sg64
(lp593
g57
(g58
g59
NtRp594
(dp595
g62
(dp596
g70
I3
ssg71
g590
sg64
(lp597
S''
asbasbasbag57
(g73
g59
NtRp598
(dp599
g62
(dp600
sg71
g514
sg64
(lp601
g57
(g78
g59
NtRp602
(dp603
g62
(dp604
g82
g83
ssg71
g598
sg64
(lp605
g416
asbag57
(g78
g59
NtRp606
(dp607
g62
(dp608
g89
g90
ssg71
g598
sg64
(lp609
S':'
asbag57
(g78
g59
NtRp610
(dp611
g62
(dp612
sg71
g598
sg64
(lp613
g57
(g58
g59
NtRp614
(dp615
g62
(dp616
g70
I3
ssg71
g610
sg64
(lp617
S''
asbasbasbag57
(g73
g59
NtRp618
(dp619
g62
(dp620
sg71
g514
sg64
(lp621
g57
(g78
g59
NtRp622
(dp623
g62
(dp624
g82
g83
ssg71
g618
sg64
(lp625
g437
asbag57
(g78
g59
NtRp626
(dp627
g62
(dp628
g89
g90
ssg71
g618
sg64
(lp629
S':'
asbag57
(g78
g59
NtRp630
(dp631
g62
(dp632
sg71
g618
sg64
(lp633
g57
(g58
g59
NtRp634
(dp635
g62
(dp636
g70
I3
ssg71
g630
sg64
(lp637
S''
asbasbasbag57
(g73
g59
NtRp638
(dp639
g62
(dp640
sg71
g514
sg64
(lp641
g57
(g78
g59
NtRp642
(dp643
g62
(dp644
g82
g83
ssg71
g638
sg64
(lp645
g458
asbag57
(g78
g59
NtRp646
(dp647
g62
(dp648
g89
g90
ssg71
g638
sg64
(lp649
S':'
asbag57
(g78
g59
NtRp650
(dp651
g62
(dp652
sg71
g638
sg64
(lp653
g57
(g58
g59
NtRp654
(dp655
g62
(dp656
g70
I3
ssg71
g650
sg64
(lp657
S''
asbasbasbag57
(g73
g59
NtRp658
(dp659
g62
(dp660
sg71
g514
sg64
(lp661
g57
(g78
g59
NtRp662
(dp663
g62
(dp664
g82
g83
ssg71
g658
sg64
(lp665
g479
asbag57
(g78
g59
NtRp666
(dp667
g62
(dp668
g89
g90
ssg71
g658
sg64
(lp669
S':'
asbag57
(g78
g59
NtRp670
(dp671
g62
(dp672
sg71
g658
sg64
(lp673
g57
(g58
g59
NtRp674
(dp675
g62
(dp676
g70
I3
ssg71
g670
sg64
(lp677
S''
asbasbasbasbasbasbasbag57
(g73
g59
NtRp678
(dp679
g62
(dp680
sg71
g294
sg64
(lp681
g57
(g78
g59
NtRp682
(dp683
g62
(dp684
g82
g83
ssg71
g678
sg64
(lp685
S'session_id_welcome'
p686
asbag57
(g78
g59
NtRp687
(dp688
g62
(dp689
g89
g90
ssg71
g678
sg64
(lp690
S':'
asbag57
(g78
g59
NtRp691
(dp692
g62
(dp693
sg71
g678
sg64
(lp694
g57
(g58
g59
NtRp695
(dp696
g62
(dp697
g70
I4
ssg71
g691
sg64
(lp698
S'127.0.0.1-73acd783-e52e-42fb-8ab7-4f6570d093df'
p699
ag57
(g66
g59
NtRp700
(dp701
g62
(dp702
g70
I3
ssg71
Nsg64
(lp703
g57
(g73
g59
NtRp704
(dp705
g62
(dp706
sg71
g700
sg64
(lp707
g57
(g78
g59
NtRp708
(dp709
g62
(dp710
g82
g83
ssg71
g704
sg64
(lp711
g332
asbag57
(g78
g59
NtRp712
(dp713
g62
(dp714
g89
g90
ssg71
g704
sg64
(lp715
S':'
asbag57
(g78
g59
NtRp716
(dp717
g62
(dp718
sg71
g704
sg64
(lp719
g57
(g58
g59
NtRp720
(dp721
g62
(dp722
g70
I3
ssg71
g716
sg64
(lp723
S''
asbasbasbag57
(g73
g59
NtRp724
(dp725
g62
(dp726
sg71
g700
sg64
(lp727
g57
(g78
g59
NtRp728
(dp729
g62
(dp730
g82
g83
ssg71
g724
sg64
(lp731
g353
asbag57
(g78
g59
NtRp732
(dp733
g62
(dp734
g89
g90
ssg71
g724
sg64
(lp735
S':'
asbag57
(g78
g59
NtRp736
(dp737
g62
(dp738
sg71
g724
sg64
(lp739
g57
(g58
g59
NtRp740
(dp741
g62
(dp742
g70
I3
ssg71
g736
sg64
(lp743
S''
asbasbasbag57
(g73
g59
NtRp744
(dp745
g62
(dp746
sg71
g700
sg64
(lp747
g57
(g78
g59
NtRp748
(dp749
g62
(dp750
g82
g83
ssg71
g744
sg64
(lp751
g374
asbag57
(g78
g59
NtRp752
(dp753
g62
(dp754
g89
g90
ssg71
g744
sg64
(lp755
S':'
asbag57
(g78
g59
NtRp756
(dp757
g62
(dp758
sg71
g744
sg64
(lp759
g57
(g58
g59
NtRp760
(dp761
g62
(dp762
g70
I3
ssg71
g756
sg64
(lp763
S''
asbasbasbag57
(g73
g59
NtRp764
(dp765
g62
(dp766
sg71
g700
sg64
(lp767
g57
(g78
g59
NtRp768
(dp769
g62
(dp770
g82
g83
ssg71
g764
sg64
(lp771
g395
asbag57
(g78
g59
NtRp772
(dp773
g62
(dp774
g89
g90
ssg71
g764
sg64
(lp775
S':'
asbag57
(g78
g59
NtRp776
(dp777
g62
(dp778
sg71
g764
sg64
(lp779
g57
(g58
g59
NtRp780
(dp781
g62
(dp782
g70
I3
ssg71
g776
sg64
(lp783
S''
asbasbasbag57
(g73
g59
NtRp784
(dp785
g62
(dp786
sg71
g700
sg64
(lp787
g57
(g78
g59
NtRp788
(dp789
g62
(dp790
g82
g83
ssg71
g784
sg64
(lp791
g416
asbag57
(g78
g59
NtRp792
(dp793
g62
(dp794
g89
g90
ssg71
g784
sg64
(lp795
S':'
asbag57
(g78
g59
NtRp796
(dp797
g62
(dp798
sg71
g784
sg64
(lp799
g57
(g58
g59
NtRp800
(dp801
g62
(dp802
g70
I3
ssg71
g796
sg64
(lp803
S''
asbasbasbag57
(g73
g59
NtRp804
(dp805
g62
(dp806
sg71
g700
sg64
(lp807
g57
(g78
g59
NtRp808
(dp809
g62
(dp810
g82
g83
ssg71
g804
sg64
(lp811
g437
asbag57
(g78
g59
NtRp812
(dp813
g62
(dp814
g89
g90
ssg71
g804
sg64
(lp815
S':'
asbag57
(g78
g59
NtRp816
(dp817
g62
(dp818
sg71
g804
sg64
(lp819
g57
(g58
g59
NtRp820
(dp821
g62
(dp822
g70
I3
ssg71
g816
sg64
(lp823
S''
asbasbasbag57
(g73
g59
NtRp824
(dp825
g62
(dp826
sg71
g700
sg64
(lp827
g57
(g78
g59
NtRp828
(dp829
g62
(dp830
g82
g83
ssg71
g824
sg64
(lp831
g458
asbag57
(g78
g59
NtRp832
(dp833
g62
(dp834
g89
g90
ssg71
g824
sg64
(lp835
S':'
asbag57
(g78
g59
NtRp836
(dp837
g62
(dp838
sg71
g824
sg64
(lp839
g57
(g58
g59
NtRp840
(dp841
g62
(dp842
g70
I3
ssg71
g836
sg64
(lp843
S''
asbasbasbag57
(g73
g59
NtRp844
(dp845
g62
(dp846
sg71
g700
sg64
(lp847
g57
(g78
g59
NtRp848
(dp849
g62
(dp850
g82
g83
ssg71
g844
sg64
(lp851
g479
asbag57
(g78
g59
NtRp852
(dp853
g62
(dp854
g89
g90
ssg71
g844
sg64
(lp855
S':'
asbag57
(g78
g59
NtRp856
(dp857
g62
(dp858
sg71
g844
sg64
(lp859
g57
(g58
g59
NtRp860
(dp861
g62
(dp862
g70
I3
ssg71
g856
sg64
(lp863
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp864
(dp865
g62
(dp866
sg71
g67
sg64
(lp867
g57
(g78
g59
NtRp868
(dp869
g62
(dp870
g82
g83
ssg71
g864
sg64
(lp871
S'env'
p872
asbag57
(g78
g59
NtRp873
(dp874
g62
(dp875
g89
g90
ssg71
g864
sg64
(lp876
S':'
asbag57
(g78
g59
NtRp877
(dp878
g62
(dp879
sg71
g864
sg64
(lp880
g57
(g58
g59
NtRp881
(dp882
g62
(dp883
g70
I5
ssg71
g877
sg64
(lp884
g57
(g66
g59
NtRp885
(dp886
g62
(dp887
g70
I4
ssg71
Nsg64
(lp888
g57
(g73
g59
NtRp889
(dp890
g62
(dp891
sg71
g885
sg64
(lp892
g57
(g78
g59
NtRp893
(dp894
g62
(dp895
g82
g83
ssg71
g889
sg64
(lp896
S'app_folders'
p897
asbag57
(g78
g59
NtRp898
(dp899
g62
(dp900
g89
g90
ssg71
g889
sg64
(lp901
S':'
asbag57
(g78
g59
NtRp902
(dp903
g62
(dp904
sg71
g889
sg64
(lp905
g57
(g58
g59
NtRp906
(dp907
g62
(dp908
g70
I4
ssg71
g902
sg64
(lp909
S"set(['/home/anil/Downloads/web2py/applications/welcome/', '/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/', '/home/anil/Downloads/web2py/applications/admin/'])"
p910
asbasbasbag57
(g73
g59
NtRp911
(dp912
g62
(dp913
sg71
g885
sg64
(lp914
g57
(g78
g59
NtRp915
(dp916
g62
(dp917
g82
g83
ssg71
g911
sg64
(lp918
S'applications_parent'
p919
asbag57
(g78
g59
NtRp920
(dp921
g62
(dp922
g89
g90
ssg71
g911
sg64
(lp923
S':'
asbag57
(g78
g59
NtRp924
(dp925
g62
(dp926
sg71
g911
sg64
(lp927
g57
(g58
g59
NtRp928
(dp929
g62
(dp930
g70
I4
ssg71
g924
sg64
(lp931
S'/home/anil/Downloads/web2py'
p932
asbasbasbag57
(g73
g59
NtRp933
(dp934
g62
(dp935
sg71
g885
sg64
(lp936
g57
(g78
g59
NtRp937
(dp938
g62
(dp939
g82
g83
ssg71
g933
sg64
(lp940
S'cmd_args'
p941
asbag57
(g78
g59
NtRp942
(dp943
g62
(dp944
g89
g90
ssg71
g933
sg64
(lp945
S':'
asbag57
(g78
g59
NtRp946
(dp947
g62
(dp948
sg71
g933
sg64
(lp949
g57
(g58
g59
NtRp950
(dp951
g62
(dp952
g70
I4
ssg71
g946
sg64
(lp953
g57
(g66
g59
NtRp954
(dp955
g62
(dp956
g70
I3
ssg71
Nsg64
(lp957
sbasbasbasbag57
(g73
g59
NtRp958
(dp959
g62
(dp960
sg71
g885
sg64
(lp961
g57
(g78
g59
NtRp962
(dp963
g62
(dp964
g82
g83
ssg71
g958
sg64
(lp965
S'cmd_options'
p966
asbag57
(g78
g59
NtRp967
(dp968
g62
(dp969
g89
g90
ssg71
g958
sg64
(lp970
S':'
asbag57
(g78
g59
NtRp971
(dp972
g62
(dp973
sg71
g958
sg64
(lp974
g57
(g58
g59
NtRp975
(dp976
g62
(dp977
g70
I4
ssg71
g971
sg64
(lp978
S"<Values at 0x8936a4c: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/Downloads/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p979
asbasbasbag57
(g73
g59
NtRp980
(dp981
g62
(dp982
sg71
g885
sg64
(lp983
g57
(g78
g59
NtRp984
(dp985
g62
(dp986
g82
g83
ssg71
g980
sg64
(lp987
S'db_sessions'
p988
asbag57
(g78
g59
NtRp989
(dp990
g62
(dp991
g89
g90
ssg71
g980
sg64
(lp992
S':'
asbag57
(g78
g59
NtRp993
(dp994
g62
(dp995
sg71
g980
sg64
(lp996
g57
(g58
g59
NtRp997
(dp998
g62
(dp999
g70
I4
ssg71
g993
sg64
(lp1000
S'set([])'
p1001
asbasbasbag57
(g73
g59
NtRp1002
(dp1003
g62
(dp1004
sg71
g885
sg64
(lp1005
g57
(g78
g59
NtRp1006
(dp1007
g62
(dp1008
g82
g83
ssg71
g1002
sg64
(lp1009
S'debugging'
p1010
asbag57
(g78
g59
NtRp1011
(dp1012
g62
(dp1013
g89
g90
ssg71
g1002
sg64
(lp1014
S':'
asbag57
(g78
g59
NtRp1015
(dp1016
g62
(dp1017
sg71
g1002
sg64
(lp1018
g57
(g58
g59
NtRp1019
(dp1020
g62
(dp1021
g70
I4
ssg71
g1015
sg64
(lp1022
g100
asbasbasbag57
(g73
g59
NtRp1023
(dp1024
g62
(dp1025
sg71
g885
sg64
(lp1026
g57
(g78
g59
NtRp1027
(dp1028
g62
(dp1029
g82
g83
ssg71
g1023
sg64
(lp1030
S'gluon_parent'
p1031
asbag57
(g78
g59
NtRp1032
(dp1033
g62
(dp1034
g89
g90
ssg71
g1023
sg64
(lp1035
S':'
asbag57
(g78
g59
NtRp1036
(dp1037
g62
(dp1038
sg71
g1023
sg64
(lp1039
g57
(g58
g59
NtRp1040
(dp1041
g62
(dp1042
g70
I4
ssg71
g1036
sg64
(lp1043
S'/home/anil/Downloads/web2py'
p1044
asbasbasbag57
(g73
g59
NtRp1045
(dp1046
g62
(dp1047
sg71
g885
sg64
(lp1048
g57
(g78
g59
NtRp1049
(dp1050
g62
(dp1051
g82
g83
ssg71
g1045
sg64
(lp1052
S'http_accept'
p1053
asbag57
(g78
g59
NtRp1054
(dp1055
g62
(dp1056
g89
g90
ssg71
g1045
sg64
(lp1057
S':'
asbag57
(g78
g59
NtRp1058
(dp1059
g62
(dp1060
sg71
g1045
sg64
(lp1061
g57
(g58
g59
NtRp1062
(dp1063
g62
(dp1064
g70
I4
ssg71
g1058
sg64
(lp1065
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p1066
asbasbasbag57
(g73
g59
NtRp1067
(dp1068
g62
(dp1069
sg71
g885
sg64
(lp1070
g57
(g78
g59
NtRp1071
(dp1072
g62
(dp1073
g82
g83
ssg71
g1067
sg64
(lp1074
S'http_accept_charset'
p1075
asbag57
(g78
g59
NtRp1076
(dp1077
g62
(dp1078
g89
g90
ssg71
g1067
sg64
(lp1079
S':'
asbag57
(g78
g59
NtRp1080
(dp1081
g62
(dp1082
sg71
g1067
sg64
(lp1083
g57
(g58
g59
NtRp1084
(dp1085
g62
(dp1086
g70
I4
ssg71
g1080
sg64
(lp1087
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p1088
asbasbasbag57
(g73
g59
NtRp1089
(dp1090
g62
(dp1091
sg71
g885
sg64
(lp1092
g57
(g78
g59
NtRp1093
(dp1094
g62
(dp1095
g82
g83
ssg71
g1089
sg64
(lp1096
S'http_accept_encoding'
p1097
asbag57
(g78
g59
NtRp1098
(dp1099
g62
(dp1100
g89
g90
ssg71
g1089
sg64
(lp1101
S':'
asbag57
(g78
g59
NtRp1102
(dp1103
g62
(dp1104
sg71
g1089
sg64
(lp1105
g57
(g58
g59
NtRp1106
(dp1107
g62
(dp1108
g70
I4
ssg71
g1102
sg64
(lp1109
S'gzip,deflate,sdch'
p1110
asbasbasbag57
(g73
g59
NtRp1111
(dp1112
g62
(dp1113
sg71
g885
sg64
(lp1114
g57
(g78
g59
NtRp1115
(dp1116
g62
(dp1117
g82
g83
ssg71
g1111
sg64
(lp1118
S'http_accept_language'
p1119
asbag57
(g78
g59
NtRp1120
(dp1121
g62
(dp1122
g89
g90
ssg71
g1111
sg64
(lp1123
S':'
asbag57
(g78
g59
NtRp1124
(dp1125
g62
(dp1126
sg71
g1111
sg64
(lp1127
g57
(g58
g59
NtRp1128
(dp1129
g62
(dp1130
g70
I4
ssg71
g1124
sg64
(lp1131
S'en-US,en;q=0.8'
p1132
asbasbasbag57
(g73
g59
NtRp1133
(dp1134
g62
(dp1135
sg71
g885
sg64
(lp1136
g57
(g78
g59
NtRp1137
(dp1138
g62
(dp1139
g82
g83
ssg71
g1133
sg64
(lp1140
S'http_connection'
p1141
asbag57
(g78
g59
NtRp1142
(dp1143
g62
(dp1144
g89
g90
ssg71
g1133
sg64
(lp1145
S':'
asbag57
(g78
g59
NtRp1146
(dp1147
g62
(dp1148
sg71
g1133
sg64
(lp1149
g57
(g58
g59
NtRp1150
(dp1151
g62
(dp1152
g70
I4
ssg71
g1146
sg64
(lp1153
S'keep-alive'
p1154
asbasbasbag57
(g73
g59
NtRp1155
(dp1156
g62
(dp1157
sg71
g885
sg64
(lp1158
g57
(g78
g59
NtRp1159
(dp1160
g62
(dp1161
g82
g83
ssg71
g1155
sg64
(lp1162
S'http_cookie'
p1163
asbag57
(g78
g59
NtRp1164
(dp1165
g62
(dp1166
g89
g90
ssg71
g1155
sg64
(lp1167
S':'
asbag57
(g78
g59
NtRp1168
(dp1169
g62
(dp1170
sg71
g1155
sg64
(lp1171
g57
(g58
g59
NtRp1172
(dp1173
g62
(dp1174
g70
I4
ssg71
g1168
sg64
(lp1175
S'session_id_welcome=127.0.0.1-73acd783-e52e-42fb-8ab7-4f6570d093df; session_id_dev_bootstrap_ch=127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a; session_id_admin=127.0.0.1-139d73ee-0525-46bf-aeb6-deeffe5cb9b3'
p1176
asbasbasbag57
(g73
g59
NtRp1177
(dp1178
g62
(dp1179
sg71
g885
sg64
(lp1180
g57
(g78
g59
NtRp1181
(dp1182
g62
(dp1183
g82
g83
ssg71
g1177
sg64
(lp1184
S'http_host'
p1185
asbag57
(g78
g59
NtRp1186
(dp1187
g62
(dp1188
g89
g90
ssg71
g1177
sg64
(lp1189
S':'
asbag57
(g78
g59
NtRp1190
(dp1191
g62
(dp1192
sg71
g1177
sg64
(lp1193
g57
(g58
g59
NtRp1194
(dp1195
g62
(dp1196
g70
I4
ssg71
g1190
sg64
(lp1197
S'127.0.0.1:8000'
p1198
asbasbasbag57
(g73
g59
NtRp1199
(dp1200
g62
(dp1201
sg71
g885
sg64
(lp1202
g57
(g78
g59
NtRp1203
(dp1204
g62
(dp1205
g82
g83
ssg71
g1199
sg64
(lp1206
S'http_referer'
p1207
asbag57
(g78
g59
NtRp1208
(dp1209
g62
(dp1210
g89
g90
ssg71
g1199
sg64
(lp1211
S':'
asbag57
(g78
g59
NtRp1212
(dp1213
g62
(dp1214
sg71
g1199
sg64
(lp1215
g57
(g58
g59
NtRp1216
(dp1217
g62
(dp1218
g70
I4
ssg71
g1212
sg64
(lp1219
S'http://127.0.0.1:8000/DEV_bootstrap_ch/default/project_viewer/5'
p1220
asbasbasbag57
(g73
g59
NtRp1221
(dp1222
g62
(dp1223
sg71
g885
sg64
(lp1224
g57
(g78
g59
NtRp1225
(dp1226
g62
(dp1227
g82
g83
ssg71
g1221
sg64
(lp1228
S'http_user_agent'
p1229
asbag57
(g78
g59
NtRp1230
(dp1231
g62
(dp1232
g89
g90
ssg71
g1221
sg64
(lp1233
S':'
asbag57
(g78
g59
NtRp1234
(dp1235
g62
(dp1236
sg71
g1221
sg64
(lp1237
g57
(g58
g59
NtRp1238
(dp1239
g62
(dp1240
g70
I4
ssg71
g1234
sg64
(lp1241
S'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.10 Safari/537.31'
p1242
asbasbasbag57
(g73
g59
NtRp1243
(dp1244
g62
(dp1245
sg71
g885
sg64
(lp1246
g57
(g78
g59
NtRp1247
(dp1248
g62
(dp1249
g82
g83
ssg71
g1243
sg64
(lp1250
S'is_jython'
p1251
asbag57
(g78
g59
NtRp1252
(dp1253
g62
(dp1254
g89
g90
ssg71
g1243
sg64
(lp1255
S':'
asbag57
(g78
g59
NtRp1256
(dp1257
g62
(dp1258
sg71
g1243
sg64
(lp1259
g57
(g58
g59
NtRp1260
(dp1261
g62
(dp1262
g70
I4
ssg71
g1256
sg64
(lp1263
g100
asbasbasbag57
(g73
g59
NtRp1264
(dp1265
g62
(dp1266
sg71
g885
sg64
(lp1267
g57
(g78
g59
NtRp1268
(dp1269
g62
(dp1270
g82
g83
ssg71
g1264
sg64
(lp1271
S'is_pypy'
p1272
asbag57
(g78
g59
NtRp1273
(dp1274
g62
(dp1275
g89
g90
ssg71
g1264
sg64
(lp1276
S':'
asbag57
(g78
g59
NtRp1277
(dp1278
g62
(dp1279
sg71
g1264
sg64
(lp1280
g57
(g58
g59
NtRp1281
(dp1282
g62
(dp1283
g70
I4
ssg71
g1277
sg64
(lp1284
g100
asbasbasbag57
(g73
g59
NtRp1285
(dp1286
g62
(dp1287
sg71
g885
sg64
(lp1288
g57
(g78
g59
NtRp1289
(dp1290
g62
(dp1291
g82
g83
ssg71
g1285
sg64
(lp1292
S'local_hosts'
p1293
asbag57
(g78
g59
NtRp1294
(dp1295
g62
(dp1296
g89
g90
ssg71
g1285
sg64
(lp1297
S':'
asbag57
(g78
g59
NtRp1298
(dp1299
g62
(dp1300
sg71
g1285
sg64
(lp1301
g57
(g58
g59
NtRp1302
(dp1303
g62
(dp1304
g70
I4
ssg71
g1298
sg64
(lp1305
g57
(g66
g59
NtRp1306
(dp1307
g62
(dp1308
g70
I3
ssg71
Nsg64
(lp1309
g57
(g73
g59
NtRp1310
(dp1311
g62
(dp1312
sg71
g1306
sg64
(lp1313
g57
(g78
g59
NtRp1314
(dp1315
g62
(dp1316
sg71
g1310
sg64
(lp1317
g57
(g58
g59
NtRp1318
(dp1319
g62
(dp1320
g70
I3
ssg71
g1314
sg64
(lp1321
S'::1'
p1322
asbasbasbag57
(g73
g59
NtRp1323
(dp1324
g62
(dp1325
sg71
g1306
sg64
(lp1326
g57
(g78
g59
NtRp1327
(dp1328
g62
(dp1329
sg71
g1323
sg64
(lp1330
g57
(g58
g59
NtRp1331
(dp1332
g62
(dp1333
g70
I3
ssg71
g1327
sg64
(lp1334
S'127.0.1.1'
p1335
asbasbasbag57
(g73
g59
NtRp1336
(dp1337
g62
(dp1338
sg71
g1306
sg64
(lp1339
g57
(g78
g59
NtRp1340
(dp1341
g62
(dp1342
sg71
g1336
sg64
(lp1343
g57
(g58
g59
NtRp1344
(dp1345
g62
(dp1346
g70
I3
ssg71
g1340
sg64
(lp1347
S'::ffff:127.0.0.1'
p1348
asbasbasbag57
(g73
g59
NtRp1349
(dp1350
g62
(dp1351
sg71
g1306
sg64
(lp1352
g57
(g78
g59
NtRp1353
(dp1354
g62
(dp1355
sg71
g1349
sg64
(lp1356
g57
(g58
g59
NtRp1357
(dp1358
g62
(dp1359
g70
I3
ssg71
g1353
sg64
(lp1360
S'127.0.0.1'
p1361
asbasbasbag57
(g73
g59
NtRp1362
(dp1363
g62
(dp1364
sg71
g1306
sg64
(lp1365
g57
(g78
g59
NtRp1366
(dp1367
g62
(dp1368
sg71
g1362
sg64
(lp1369
g57
(g58
g59
NtRp1370
(dp1371
g62
(dp1372
g70
I3
ssg71
g1366
sg64
(lp1373
S'anil-Inspiron-1525'
p1374
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1375
(dp1376
g62
(dp1377
sg71
g885
sg64
(lp1378
g57
(g78
g59
NtRp1379
(dp1380
g62
(dp1381
g82
g83
ssg71
g1375
sg64
(lp1382
S'path_info'
p1383
asbag57
(g78
g59
NtRp1384
(dp1385
g62
(dp1386
g89
g90
ssg71
g1375
sg64
(lp1387
S':'
asbag57
(g78
g59
NtRp1388
(dp1389
g62
(dp1390
sg71
g1375
sg64
(lp1391
g57
(g58
g59
NtRp1392
(dp1393
g62
(dp1394
g70
I4
ssg71
g1388
sg64
(lp1395
S'/DEV_bootstrap_ch/default/list_all_dev_projects/project/experiment.project/5'
p1396
asbasbasbag57
(g73
g59
NtRp1397
(dp1398
g62
(dp1399
sg71
g885
sg64
(lp1400
g57
(g78
g59
NtRp1401
(dp1402
g62
(dp1403
g82
g83
ssg71
g1397
sg64
(lp1404
S'query_string'
p1405
asbag57
(g78
g59
NtRp1406
(dp1407
g62
(dp1408
g89
g90
ssg71
g1397
sg64
(lp1409
S':'
asbag57
(g78
g59
NtRp1410
(dp1411
g62
(dp1412
sg71
g1397
sg64
(lp1413
g57
(g58
g59
NtRp1414
(dp1415
g62
(dp1416
g70
I4
ssg71
g1410
sg64
(lp1417
S''
asbasbasbag57
(g73
g59
NtRp1418
(dp1419
g62
(dp1420
sg71
g885
sg64
(lp1421
g57
(g78
g59
NtRp1422
(dp1423
g62
(dp1424
g82
g83
ssg71
g1418
sg64
(lp1425
S'remote_addr'
p1426
asbag57
(g78
g59
NtRp1427
(dp1428
g62
(dp1429
g89
g90
ssg71
g1418
sg64
(lp1430
S':'
asbag57
(g78
g59
NtRp1431
(dp1432
g62
(dp1433
sg71
g1418
sg64
(lp1434
g57
(g58
g59
NtRp1435
(dp1436
g62
(dp1437
g70
I4
ssg71
g1431
sg64
(lp1438
g250
asbasbasbag57
(g73
g59
NtRp1439
(dp1440
g62
(dp1441
sg71
g885
sg64
(lp1442
g57
(g78
g59
NtRp1443
(dp1444
g62
(dp1445
g82
g83
ssg71
g1439
sg64
(lp1446
S'remote_port'
p1447
asbag57
(g78
g59
NtRp1448
(dp1449
g62
(dp1450
g89
g90
ssg71
g1439
sg64
(lp1451
S':'
asbag57
(g78
g59
NtRp1452
(dp1453
g62
(dp1454
sg71
g1439
sg64
(lp1455
g57
(g58
g59
NtRp1456
(dp1457
g62
(dp1458
g70
I4
ssg71
g1452
sg64
(lp1459
S'43084'
p1460
asbasbasbag57
(g73
g59
NtRp1461
(dp1462
g62
(dp1463
sg71
g885
sg64
(lp1464
g57
(g78
g59
NtRp1465
(dp1466
g62
(dp1467
g82
g83
ssg71
g1461
sg64
(lp1468
S'request_method'
p1469
asbag57
(g78
g59
NtRp1470
(dp1471
g62
(dp1472
g89
g90
ssg71
g1461
sg64
(lp1473
S':'
asbag57
(g78
g59
NtRp1474
(dp1475
g62
(dp1476
sg71
g1461
sg64
(lp1477
g57
(g58
g59
NtRp1478
(dp1479
g62
(dp1480
g70
I4
ssg71
g1474
sg64
(lp1481
S'GET'
p1482
asbasbasbag57
(g73
g59
NtRp1483
(dp1484
g62
(dp1485
sg71
g885
sg64
(lp1486
g57
(g78
g59
NtRp1487
(dp1488
g62
(dp1489
g82
g83
ssg71
g1483
sg64
(lp1490
S'request_uri'
p1491
asbag57
(g78
g59
NtRp1492
(dp1493
g62
(dp1494
g89
g90
ssg71
g1483
sg64
(lp1495
S':'
asbag57
(g78
g59
NtRp1496
(dp1497
g62
(dp1498
sg71
g1483
sg64
(lp1499
g57
(g58
g59
NtRp1500
(dp1501
g62
(dp1502
g70
I4
ssg71
g1496
sg64
(lp1503
g1396
asbasbasbag57
(g73
g59
NtRp1504
(dp1505
g62
(dp1506
sg71
g885
sg64
(lp1507
g57
(g78
g59
NtRp1508
(dp1509
g62
(dp1510
g82
g83
ssg71
g1504
sg64
(lp1511
S'script_name'
p1512
asbag57
(g78
g59
NtRp1513
(dp1514
g62
(dp1515
g89
g90
ssg71
g1504
sg64
(lp1516
S':'
asbag57
(g78
g59
NtRp1517
(dp1518
g62
(dp1519
sg71
g1504
sg64
(lp1520
g57
(g58
g59
NtRp1521
(dp1522
g62
(dp1523
g70
I4
ssg71
g1517
sg64
(lp1524
S''
asbasbasbag57
(g73
g59
NtRp1525
(dp1526
g62
(dp1527
sg71
g885
sg64
(lp1528
g57
(g78
g59
NtRp1529
(dp1530
g62
(dp1531
g82
g83
ssg71
g1525
sg64
(lp1532
S'server_name'
p1533
asbag57
(g78
g59
NtRp1534
(dp1535
g62
(dp1536
g89
g90
ssg71
g1525
sg64
(lp1537
S':'
asbag57
(g78
g59
NtRp1538
(dp1539
g62
(dp1540
sg71
g1525
sg64
(lp1541
g57
(g58
g59
NtRp1542
(dp1543
g62
(dp1544
g70
I4
ssg71
g1538
sg64
(lp1545
S'anil-Inspiron-1525'
p1546
asbasbasbag57
(g73
g59
NtRp1547
(dp1548
g62
(dp1549
sg71
g885
sg64
(lp1550
g57
(g78
g59
NtRp1551
(dp1552
g62
(dp1553
g82
g83
ssg71
g1547
sg64
(lp1554
S'server_port'
p1555
asbag57
(g78
g59
NtRp1556
(dp1557
g62
(dp1558
g89
g90
ssg71
g1547
sg64
(lp1559
S':'
asbag57
(g78
g59
NtRp1560
(dp1561
g62
(dp1562
sg71
g1547
sg64
(lp1563
g57
(g58
g59
NtRp1564
(dp1565
g62
(dp1566
g70
I4
ssg71
g1560
sg64
(lp1567
S'8000'
p1568
asbasbasbag57
(g73
g59
NtRp1569
(dp1570
g62
(dp1571
sg71
g885
sg64
(lp1572
g57
(g78
g59
NtRp1573
(dp1574
g62
(dp1575
g82
g83
ssg71
g1569
sg64
(lp1576
S'server_protocol'
p1577
asbag57
(g78
g59
NtRp1578
(dp1579
g62
(dp1580
g89
g90
ssg71
g1569
sg64
(lp1581
S':'
asbag57
(g78
g59
NtRp1582
(dp1583
g62
(dp1584
sg71
g1569
sg64
(lp1585
g57
(g58
g59
NtRp1586
(dp1587
g62
(dp1588
g70
I4
ssg71
g1582
sg64
(lp1589
S'HTTP/1.1'
p1590
asbasbasbag57
(g73
g59
NtRp1591
(dp1592
g62
(dp1593
sg71
g885
sg64
(lp1594
g57
(g78
g59
NtRp1595
(dp1596
g62
(dp1597
g82
g83
ssg71
g1591
sg64
(lp1598
S'server_software'
p1599
asbag57
(g78
g59
NtRp1600
(dp1601
g62
(dp1602
g89
g90
ssg71
g1591
sg64
(lp1603
S':'
asbag57
(g78
g59
NtRp1604
(dp1605
g62
(dp1606
sg71
g1591
sg64
(lp1607
g57
(g58
g59
NtRp1608
(dp1609
g62
(dp1610
g70
I4
ssg71
g1604
sg64
(lp1611
S'Rocket 1.2.6'
p1612
asbasbasbag57
(g73
g59
NtRp1613
(dp1614
g62
(dp1615
sg71
g885
sg64
(lp1616
g57
(g78
g59
NtRp1617
(dp1618
g62
(dp1619
g82
g83
ssg71
g1613
sg64
(lp1620
S'web2py_path'
p1621
asbag57
(g78
g59
NtRp1622
(dp1623
g62
(dp1624
g89
g90
ssg71
g1613
sg64
(lp1625
S':'
asbag57
(g78
g59
NtRp1626
(dp1627
g62
(dp1628
sg71
g1613
sg64
(lp1629
g57
(g58
g59
NtRp1630
(dp1631
g62
(dp1632
g70
I4
ssg71
g1626
sg64
(lp1633
g932
asbasbasbag57
(g73
g59
NtRp1634
(dp1635
g62
(dp1636
sg71
g885
sg64
(lp1637
g57
(g78
g59
NtRp1638
(dp1639
g62
(dp1640
g82
g83
ssg71
g1634
sg64
(lp1641
S'web2py_version'
p1642
asbag57
(g78
g59
NtRp1643
(dp1644
g62
(dp1645
g89
g90
ssg71
g1634
sg64
(lp1646
S':'
asbag57
(g78
g59
NtRp1647
(dp1648
g62
(dp1649
sg71
g1634
sg64
(lp1650
g57
(g58
g59
NtRp1651
(dp1652
g62
(dp1653
g70
I4
ssg71
g1647
sg64
(lp1654
g57
(g66
g59
NtRp1655
(dp1656
g62
(dp1657
g70
I3
ssg71
Nsg64
(lp1658
g57
(g73
g59
NtRp1659
(dp1660
g62
(dp1661
sg71
g1655
sg64
(lp1662
g57
(g78
g59
NtRp1663
(dp1664
g62
(dp1665
sg71
g1659
sg64
(lp1666
g57
(g58
g59
NtRp1667
(dp1668
g62
(dp1669
g70
I3
ssg71
g1663
sg64
(lp1670
S'2'
asbasbasbag57
(g73
g59
NtRp1671
(dp1672
g62
(dp1673
sg71
g1655
sg64
(lp1674
g57
(g78
g59
NtRp1675
(dp1676
g62
(dp1677
sg71
g1671
sg64
(lp1678
g57
(g58
g59
NtRp1679
(dp1680
g62
(dp1681
g70
I3
ssg71
g1675
sg64
(lp1682
S'3'
asbasbasbag57
(g73
g59
NtRp1683
(dp1684
g62
(dp1685
sg71
g1655
sg64
(lp1686
g57
(g78
g59
NtRp1687
(dp1688
g62
(dp1689
sg71
g1683
sg64
(lp1690
g57
(g58
g59
NtRp1691
(dp1692
g62
(dp1693
g70
I3
ssg71
g1687
sg64
(lp1694
S'2'
asbasbasbag57
(g73
g59
NtRp1695
(dp1696
g62
(dp1697
sg71
g1655
sg64
(lp1698
g57
(g78
g59
NtRp1699
(dp1700
g62
(dp1701
sg71
g1695
sg64
(lp1702
g57
(g58
g59
NtRp1703
(dp1704
g62
(dp1705
g70
I3
ssg71
g1699
sg64
(lp1706
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p1707
asbasbasbag57
(g73
g59
NtRp1708
(dp1709
g62
(dp1710
sg71
g1655
sg64
(lp1711
g57
(g78
g59
NtRp1712
(dp1713
g62
(dp1714
sg71
g1708
sg64
(lp1715
g57
(g58
g59
NtRp1716
(dp1717
g62
(dp1718
g70
I3
ssg71
g1712
sg64
(lp1719
S'stable'
p1720
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1721
(dp1722
g62
(dp1723
sg71
g885
sg64
(lp1724
g57
(g78
g59
NtRp1725
(dp1726
g62
(dp1727
g82
g83
ssg71
g1721
sg64
(lp1728
S'wsgi_errors'
p1729
asbag57
(g78
g59
NtRp1730
(dp1731
g62
(dp1732
g89
g90
ssg71
g1721
sg64
(lp1733
S':'
asbag57
(g78
g59
NtRp1734
(dp1735
g62
(dp1736
sg71
g1721
sg64
(lp1737
g57
(g58
g59
NtRp1738
(dp1739
g62
(dp1740
g70
I4
ssg71
g1734
sg64
(lp1741
S"<open file '<stderr>', mode 'w' at 0xb729e0d0>"
p1742
asbasbasbag57
(g73
g59
NtRp1743
(dp1744
g62
(dp1745
sg71
g885
sg64
(lp1746
g57
(g78
g59
NtRp1747
(dp1748
g62
(dp1749
g82
g83
ssg71
g1743
sg64
(lp1750
S'wsgi_file_wrapper'
p1751
asbag57
(g78
g59
NtRp1752
(dp1753
g62
(dp1754
g89
g90
ssg71
g1743
sg64
(lp1755
S':'
asbag57
(g78
g59
NtRp1756
(dp1757
g62
(dp1758
sg71
g1743
sg64
(lp1759
g57
(g58
g59
NtRp1760
(dp1761
g62
(dp1762
g70
I4
ssg71
g1756
sg64
(lp1763
S'<class wsgiref.util.FileWrapper at 0x88bfb6c>'
p1764
asbasbasbag57
(g73
g59
NtRp1765
(dp1766
g62
(dp1767
sg71
g885
sg64
(lp1768
g57
(g78
g59
NtRp1769
(dp1770
g62
(dp1771
g82
g83
ssg71
g1765
sg64
(lp1772
S'wsgi_input'
p1773
asbag57
(g78
g59
NtRp1774
(dp1775
g62
(dp1776
g89
g90
ssg71
g1765
sg64
(lp1777
S':'
asbag57
(g78
g59
NtRp1778
(dp1779
g62
(dp1780
sg71
g1765
sg64
(lp1781
g57
(g58
g59
NtRp1782
(dp1783
g62
(dp1784
g70
I4
ssg71
g1778
sg64
(lp1785
S'<socket._fileobject object at 0xadb98aec>'
p1786
asbasbasbag57
(g73
g59
NtRp1787
(dp1788
g62
(dp1789
sg71
g885
sg64
(lp1790
g57
(g78
g59
NtRp1791
(dp1792
g62
(dp1793
g82
g83
ssg71
g1787
sg64
(lp1794
S'wsgi_multiprocess'
p1795
asbag57
(g78
g59
NtRp1796
(dp1797
g62
(dp1798
g89
g90
ssg71
g1787
sg64
(lp1799
S':'
asbag57
(g78
g59
NtRp1800
(dp1801
g62
(dp1802
sg71
g1787
sg64
(lp1803
g57
(g58
g59
NtRp1804
(dp1805
g62
(dp1806
g70
I4
ssg71
g1800
sg64
(lp1807
g100
asbasbasbag57
(g73
g59
NtRp1808
(dp1809
g62
(dp1810
sg71
g885
sg64
(lp1811
g57
(g78
g59
NtRp1812
(dp1813
g62
(dp1814
g82
g83
ssg71
g1808
sg64
(lp1815
S'wsgi_multithread'
p1816
asbag57
(g78
g59
NtRp1817
(dp1818
g62
(dp1819
g89
g90
ssg71
g1808
sg64
(lp1820
S':'
asbag57
(g78
g59
NtRp1821
(dp1822
g62
(dp1823
sg71
g1808
sg64
(lp1824
g57
(g58
g59
NtRp1825
(dp1826
g62
(dp1827
g70
I4
ssg71
g1821
sg64
(lp1828
S'True'
p1829
asbasbasbag57
(g73
g59
NtRp1830
(dp1831
g62
(dp1832
sg71
g885
sg64
(lp1833
g57
(g78
g59
NtRp1834
(dp1835
g62
(dp1836
g82
g83
ssg71
g1830
sg64
(lp1837
S'wsgi_run_once'
p1838
asbag57
(g78
g59
NtRp1839
(dp1840
g62
(dp1841
g89
g90
ssg71
g1830
sg64
(lp1842
S':'
asbag57
(g78
g59
NtRp1843
(dp1844
g62
(dp1845
sg71
g1830
sg64
(lp1846
g57
(g58
g59
NtRp1847
(dp1848
g62
(dp1849
g70
I4
ssg71
g1843
sg64
(lp1850
g100
asbasbasbag57
(g73
g59
NtRp1851
(dp1852
g62
(dp1853
sg71
g885
sg64
(lp1854
g57
(g78
g59
NtRp1855
(dp1856
g62
(dp1857
g82
g83
ssg71
g1851
sg64
(lp1858
S'wsgi_url_scheme'
p1859
asbag57
(g78
g59
NtRp1860
(dp1861
g62
(dp1862
g89
g90
ssg71
g1851
sg64
(lp1863
S':'
asbag57
(g78
g59
NtRp1864
(dp1865
g62
(dp1866
sg71
g1851
sg64
(lp1867
g57
(g58
g59
NtRp1868
(dp1869
g62
(dp1870
g70
I4
ssg71
g1864
sg64
(lp1871
S'http'
p1872
asbasbasbag57
(g73
g59
NtRp1873
(dp1874
g62
(dp1875
sg71
g885
sg64
(lp1876
g57
(g78
g59
NtRp1877
(dp1878
g62
(dp1879
g82
g83
ssg71
g1873
sg64
(lp1880
S'wsgi_version'
p1881
asbag57
(g78
g59
NtRp1882
(dp1883
g62
(dp1884
g89
g90
ssg71
g1873
sg64
(lp1885
S':'
asbag57
(g78
g59
NtRp1886
(dp1887
g62
(dp1888
sg71
g1873
sg64
(lp1889
g57
(g58
g59
NtRp1890
(dp1891
g62
(dp1892
g70
I4
ssg71
g1886
sg64
(lp1893
g57
(g66
g59
NtRp1894
(dp1895
g62
(dp1896
g70
I3
ssg71
Nsg64
(lp1897
g57
(g73
g59
NtRp1898
(dp1899
g62
(dp1900
sg71
g1894
sg64
(lp1901
g57
(g78
g59
NtRp1902
(dp1903
g62
(dp1904
sg71
g1898
sg64
(lp1905
g57
(g58
g59
NtRp1906
(dp1907
g62
(dp1908
g70
I3
ssg71
g1902
sg64
(lp1909
S'1'
asbasbasbag57
(g73
g59
NtRp1910
(dp1911
g62
(dp1912
sg71
g1894
sg64
(lp1913
g57
(g78
g59
NtRp1914
(dp1915
g62
(dp1916
sg71
g1910
sg64
(lp1917
g57
(g58
g59
NtRp1918
(dp1919
g62
(dp1920
g70
I3
ssg71
g1914
sg64
(lp1921
S'0'
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp1922
(dp1923
g62
(dp1924
sg71
g67
sg64
(lp1925
g57
(g78
g59
NtRp1926
(dp1927
g62
(dp1928
g82
g83
ssg71
g1922
sg64
(lp1929
S'extension'
p1930
asbag57
(g78
g59
NtRp1931
(dp1932
g62
(dp1933
g89
g90
ssg71
g1922
sg64
(lp1934
S':'
asbag57
(g78
g59
NtRp1935
(dp1936
g62
(dp1937
sg71
g1922
sg64
(lp1938
g57
(g58
g59
NtRp1939
(dp1940
g62
(dp1941
g70
I5
ssg71
g1935
sg64
(lp1942
S'html'
p1943
asbasbasbag57
(g73
g59
NtRp1944
(dp1945
g62
(dp1946
sg71
g67
sg64
(lp1947
g57
(g78
g59
NtRp1948
(dp1949
g62
(dp1950
g82
g83
ssg71
g1944
sg64
(lp1951
S'folder'
p1952
asbag57
(g78
g59
NtRp1953
(dp1954
g62
(dp1955
g89
g90
ssg71
g1944
sg64
(lp1956
S':'
asbag57
(g78
g59
NtRp1957
(dp1958
g62
(dp1959
sg71
g1944
sg64
(lp1960
g57
(g58
g59
NtRp1961
(dp1962
g62
(dp1963
g70
I5
ssg71
g1957
sg64
(lp1964
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/'
p1965
asbasbasbag57
(g73
g59
NtRp1966
(dp1967
g62
(dp1968
sg71
g67
sg64
(lp1969
g57
(g78
g59
NtRp1970
(dp1971
g62
(dp1972
g82
g83
ssg71
g1966
sg64
(lp1973
S'function'
p1974
asbag57
(g78
g59
NtRp1975
(dp1976
g62
(dp1977
g89
g90
ssg71
g1966
sg64
(lp1978
S':'
asbag57
(g78
g59
NtRp1979
(dp1980
g62
(dp1981
sg71
g1966
sg64
(lp1982
g57
(g58
g59
NtRp1983
(dp1984
g62
(dp1985
g70
I5
ssg71
g1979
sg64
(lp1986
S'list_all_dev_projects'
p1987
asbasbasbag57
(g73
g59
NtRp1988
(dp1989
g62
(dp1990
sg71
g67
sg64
(lp1991
g57
(g78
g59
NtRp1992
(dp1993
g62
(dp1994
g82
g83
ssg71
g1988
sg64
(lp1995
S'get_vars'
p1996
asbag57
(g78
g59
NtRp1997
(dp1998
g62
(dp1999
g89
g90
ssg71
g1988
sg64
(lp2000
S':'
asbag57
(g78
g59
NtRp2001
(dp2002
g62
(dp2003
sg71
g1988
sg64
(lp2004
g57
(g58
g59
NtRp2005
(dp2006
g62
(dp2007
g70
I5
ssg71
g2001
sg64
(lp2008
g57
(g66
g59
NtRp2009
(dp2010
g62
(dp2011
g70
I4
ssg71
Nsg64
(lp2012
sbasbasbasbag57
(g73
g59
NtRp2013
(dp2014
g62
(dp2015
sg71
g67
sg64
(lp2016
g57
(g78
g59
NtRp2017
(dp2018
g62
(dp2019
g82
g83
ssg71
g2013
sg64
(lp2020
S'global_settings'
p2021
asbag57
(g78
g59
NtRp2022
(dp2023
g62
(dp2024
g89
g90
ssg71
g2013
sg64
(lp2025
S':'
asbag57
(g78
g59
NtRp2026
(dp2027
g62
(dp2028
sg71
g2013
sg64
(lp2029
g57
(g58
g59
NtRp2030
(dp2031
g62
(dp2032
g70
I5
ssg71
g2026
sg64
(lp2033
g57
(g66
g59
NtRp2034
(dp2035
g62
(dp2036
g70
I4
ssg71
Nsg64
(lp2037
g57
(g73
g59
NtRp2038
(dp2039
g62
(dp2040
sg71
g2034
sg64
(lp2041
g57
(g78
g59
NtRp2042
(dp2043
g62
(dp2044
g82
g83
ssg71
g2038
sg64
(lp2045
g897
asbag57
(g78
g59
NtRp2046
(dp2047
g62
(dp2048
g89
g90
ssg71
g2038
sg64
(lp2049
S':'
asbag57
(g78
g59
NtRp2050
(dp2051
g62
(dp2052
sg71
g2038
sg64
(lp2053
g57
(g58
g59
NtRp2054
(dp2055
g62
(dp2056
g70
I4
ssg71
g2050
sg64
(lp2057
S"set(['/home/anil/Downloads/web2py/applications/welcome/', '/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/', '/home/anil/Downloads/web2py/applications/admin/'])"
p2058
asbasbasbag57
(g73
g59
NtRp2059
(dp2060
g62
(dp2061
sg71
g2034
sg64
(lp2062
g57
(g78
g59
NtRp2063
(dp2064
g62
(dp2065
g82
g83
ssg71
g2059
sg64
(lp2066
g919
asbag57
(g78
g59
NtRp2067
(dp2068
g62
(dp2069
g89
g90
ssg71
g2059
sg64
(lp2070
S':'
asbag57
(g78
g59
NtRp2071
(dp2072
g62
(dp2073
sg71
g2059
sg64
(lp2074
g57
(g58
g59
NtRp2075
(dp2076
g62
(dp2077
g70
I4
ssg71
g2071
sg64
(lp2078
g932
asbasbasbag57
(g73
g59
NtRp2079
(dp2080
g62
(dp2081
sg71
g2034
sg64
(lp2082
g57
(g78
g59
NtRp2083
(dp2084
g62
(dp2085
g82
g83
ssg71
g2079
sg64
(lp2086
g941
asbag57
(g78
g59
NtRp2087
(dp2088
g62
(dp2089
g89
g90
ssg71
g2079
sg64
(lp2090
S':'
asbag57
(g78
g59
NtRp2091
(dp2092
g62
(dp2093
sg71
g2079
sg64
(lp2094
g57
(g58
g59
NtRp2095
(dp2096
g62
(dp2097
g70
I4
ssg71
g2091
sg64
(lp2098
g57
(g66
g59
NtRp2099
(dp2100
g62
(dp2101
g70
I3
ssg71
Nsg64
(lp2102
sbasbasbasbag57
(g73
g59
NtRp2103
(dp2104
g62
(dp2105
sg71
g2034
sg64
(lp2106
g57
(g78
g59
NtRp2107
(dp2108
g62
(dp2109
g82
g83
ssg71
g2103
sg64
(lp2110
g966
asbag57
(g78
g59
NtRp2111
(dp2112
g62
(dp2113
g89
g90
ssg71
g2103
sg64
(lp2114
S':'
asbag57
(g78
g59
NtRp2115
(dp2116
g62
(dp2117
sg71
g2103
sg64
(lp2118
g57
(g58
g59
NtRp2119
(dp2120
g62
(dp2121
g70
I4
ssg71
g2115
sg64
(lp2122
S"<Values at 0x8936a4c: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/Downloads/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p2123
asbasbasbag57
(g73
g59
NtRp2124
(dp2125
g62
(dp2126
sg71
g2034
sg64
(lp2127
g57
(g78
g59
NtRp2128
(dp2129
g62
(dp2130
g82
g83
ssg71
g2124
sg64
(lp2131
g988
asbag57
(g78
g59
NtRp2132
(dp2133
g62
(dp2134
g89
g90
ssg71
g2124
sg64
(lp2135
S':'
asbag57
(g78
g59
NtRp2136
(dp2137
g62
(dp2138
sg71
g2124
sg64
(lp2139
g57
(g58
g59
NtRp2140
(dp2141
g62
(dp2142
g70
I4
ssg71
g2136
sg64
(lp2143
S'set([])'
p2144
asbasbasbag57
(g73
g59
NtRp2145
(dp2146
g62
(dp2147
sg71
g2034
sg64
(lp2148
g57
(g78
g59
NtRp2149
(dp2150
g62
(dp2151
g82
g83
ssg71
g2145
sg64
(lp2152
g1010
asbag57
(g78
g59
NtRp2153
(dp2154
g62
(dp2155
g89
g90
ssg71
g2145
sg64
(lp2156
S':'
asbag57
(g78
g59
NtRp2157
(dp2158
g62
(dp2159
sg71
g2145
sg64
(lp2160
g57
(g58
g59
NtRp2161
(dp2162
g62
(dp2163
g70
I4
ssg71
g2157
sg64
(lp2164
g100
asbasbasbag57
(g73
g59
NtRp2165
(dp2166
g62
(dp2167
sg71
g2034
sg64
(lp2168
g57
(g78
g59
NtRp2169
(dp2170
g62
(dp2171
g82
g83
ssg71
g2165
sg64
(lp2172
g1031
asbag57
(g78
g59
NtRp2173
(dp2174
g62
(dp2175
g89
g90
ssg71
g2165
sg64
(lp2176
S':'
asbag57
(g78
g59
NtRp2177
(dp2178
g62
(dp2179
sg71
g2165
sg64
(lp2180
g57
(g58
g59
NtRp2181
(dp2182
g62
(dp2183
g70
I4
ssg71
g2177
sg64
(lp2184
g1044
asbasbasbag57
(g73
g59
NtRp2185
(dp2186
g62
(dp2187
sg71
g2034
sg64
(lp2188
g57
(g78
g59
NtRp2189
(dp2190
g62
(dp2191
g82
g83
ssg71
g2185
sg64
(lp2192
g1251
asbag57
(g78
g59
NtRp2193
(dp2194
g62
(dp2195
g89
g90
ssg71
g2185
sg64
(lp2196
S':'
asbag57
(g78
g59
NtRp2197
(dp2198
g62
(dp2199
sg71
g2185
sg64
(lp2200
g57
(g58
g59
NtRp2201
(dp2202
g62
(dp2203
g70
I4
ssg71
g2197
sg64
(lp2204
g100
asbasbasbag57
(g73
g59
NtRp2205
(dp2206
g62
(dp2207
sg71
g2034
sg64
(lp2208
g57
(g78
g59
NtRp2209
(dp2210
g62
(dp2211
g82
g83
ssg71
g2205
sg64
(lp2212
g1272
asbag57
(g78
g59
NtRp2213
(dp2214
g62
(dp2215
g89
g90
ssg71
g2205
sg64
(lp2216
S':'
asbag57
(g78
g59
NtRp2217
(dp2218
g62
(dp2219
sg71
g2205
sg64
(lp2220
g57
(g58
g59
NtRp2221
(dp2222
g62
(dp2223
g70
I4
ssg71
g2217
sg64
(lp2224
g100
asbasbasbag57
(g73
g59
NtRp2225
(dp2226
g62
(dp2227
sg71
g2034
sg64
(lp2228
g57
(g78
g59
NtRp2229
(dp2230
g62
(dp2231
g82
g83
ssg71
g2225
sg64
(lp2232
g1293
asbag57
(g78
g59
NtRp2233
(dp2234
g62
(dp2235
g89
g90
ssg71
g2225
sg64
(lp2236
S':'
asbag57
(g78
g59
NtRp2237
(dp2238
g62
(dp2239
sg71
g2225
sg64
(lp2240
g57
(g58
g59
NtRp2241
(dp2242
g62
(dp2243
g70
I4
ssg71
g2237
sg64
(lp2244
g57
(g66
g59
NtRp2245
(dp2246
g62
(dp2247
g70
I3
ssg71
Nsg64
(lp2248
g57
(g73
g59
NtRp2249
(dp2250
g62
(dp2251
sg71
g2245
sg64
(lp2252
g57
(g78
g59
NtRp2253
(dp2254
g62
(dp2255
sg71
g2249
sg64
(lp2256
g57
(g58
g59
NtRp2257
(dp2258
g62
(dp2259
g70
I3
ssg71
g2253
sg64
(lp2260
g1322
asbasbasbag57
(g73
g59
NtRp2261
(dp2262
g62
(dp2263
sg71
g2245
sg64
(lp2264
g57
(g78
g59
NtRp2265
(dp2266
g62
(dp2267
sg71
g2261
sg64
(lp2268
g57
(g58
g59
NtRp2269
(dp2270
g62
(dp2271
g70
I3
ssg71
g2265
sg64
(lp2272
g1335
asbasbasbag57
(g73
g59
NtRp2273
(dp2274
g62
(dp2275
sg71
g2245
sg64
(lp2276
g57
(g78
g59
NtRp2277
(dp2278
g62
(dp2279
sg71
g2273
sg64
(lp2280
g57
(g58
g59
NtRp2281
(dp2282
g62
(dp2283
g70
I3
ssg71
g2277
sg64
(lp2284
g1348
asbasbasbag57
(g73
g59
NtRp2285
(dp2286
g62
(dp2287
sg71
g2245
sg64
(lp2288
g57
(g78
g59
NtRp2289
(dp2290
g62
(dp2291
sg71
g2285
sg64
(lp2292
g57
(g58
g59
NtRp2293
(dp2294
g62
(dp2295
g70
I3
ssg71
g2289
sg64
(lp2296
g1361
asbasbasbag57
(g73
g59
NtRp2297
(dp2298
g62
(dp2299
sg71
g2245
sg64
(lp2300
g57
(g78
g59
NtRp2301
(dp2302
g62
(dp2303
sg71
g2297
sg64
(lp2304
g57
(g58
g59
NtRp2305
(dp2306
g62
(dp2307
g70
I3
ssg71
g2301
sg64
(lp2308
g1374
asbasbasbasbasbasbasbag57
(g73
g59
NtRp2309
(dp2310
g62
(dp2311
sg71
g2034
sg64
(lp2312
g57
(g78
g59
NtRp2313
(dp2314
g62
(dp2315
g82
g83
ssg71
g2309
sg64
(lp2316
g1642
asbag57
(g78
g59
NtRp2317
(dp2318
g62
(dp2319
g89
g90
ssg71
g2309
sg64
(lp2320
S':'
asbag57
(g78
g59
NtRp2321
(dp2322
g62
(dp2323
sg71
g2309
sg64
(lp2324
g57
(g58
g59
NtRp2325
(dp2326
g62
(dp2327
g70
I4
ssg71
g2321
sg64
(lp2328
g57
(g66
g59
NtRp2329
(dp2330
g62
(dp2331
g70
I3
ssg71
Nsg64
(lp2332
g57
(g73
g59
NtRp2333
(dp2334
g62
(dp2335
sg71
g2329
sg64
(lp2336
g57
(g78
g59
NtRp2337
(dp2338
g62
(dp2339
sg71
g2333
sg64
(lp2340
g57
(g58
g59
NtRp2341
(dp2342
g62
(dp2343
g70
I3
ssg71
g2337
sg64
(lp2344
S'2'
asbasbasbag57
(g73
g59
NtRp2345
(dp2346
g62
(dp2347
sg71
g2329
sg64
(lp2348
g57
(g78
g59
NtRp2349
(dp2350
g62
(dp2351
sg71
g2345
sg64
(lp2352
g57
(g58
g59
NtRp2353
(dp2354
g62
(dp2355
g70
I3
ssg71
g2349
sg64
(lp2356
S'3'
asbasbasbag57
(g73
g59
NtRp2357
(dp2358
g62
(dp2359
sg71
g2329
sg64
(lp2360
g57
(g78
g59
NtRp2361
(dp2362
g62
(dp2363
sg71
g2357
sg64
(lp2364
g57
(g58
g59
NtRp2365
(dp2366
g62
(dp2367
g70
I3
ssg71
g2361
sg64
(lp2368
S'2'
asbasbasbag57
(g73
g59
NtRp2369
(dp2370
g62
(dp2371
sg71
g2329
sg64
(lp2372
g57
(g78
g59
NtRp2373
(dp2374
g62
(dp2375
sg71
g2369
sg64
(lp2376
g57
(g58
g59
NtRp2377
(dp2378
g62
(dp2379
g70
I3
ssg71
g2373
sg64
(lp2380
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p2381
asbasbasbag57
(g73
g59
NtRp2382
(dp2383
g62
(dp2384
sg71
g2329
sg64
(lp2385
g57
(g78
g59
NtRp2386
(dp2387
g62
(dp2388
sg71
g2382
sg64
(lp2389
g57
(g58
g59
NtRp2390
(dp2391
g62
(dp2392
g70
I3
ssg71
g2386
sg64
(lp2393
g1720
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp2394
(dp2395
g62
(dp2396
sg71
g67
sg64
(lp2397
g57
(g78
g59
NtRp2398
(dp2399
g62
(dp2400
g82
g83
ssg71
g2394
sg64
(lp2401
S'is_https'
p2402
asbag57
(g78
g59
NtRp2403
(dp2404
g62
(dp2405
g89
g90
ssg71
g2394
sg64
(lp2406
S':'
asbag57
(g78
g59
NtRp2407
(dp2408
g62
(dp2409
sg71
g2394
sg64
(lp2410
g57
(g58
g59
NtRp2411
(dp2412
g62
(dp2413
g70
I5
ssg71
g2407
sg64
(lp2414
g100
asbasbasbag57
(g73
g59
NtRp2415
(dp2416
g62
(dp2417
sg71
g67
sg64
(lp2418
g57
(g78
g59
NtRp2419
(dp2420
g62
(dp2421
g82
g83
ssg71
g2415
sg64
(lp2422
S'is_local'
p2423
asbag57
(g78
g59
NtRp2424
(dp2425
g62
(dp2426
g89
g90
ssg71
g2415
sg64
(lp2427
S':'
asbag57
(g78
g59
NtRp2428
(dp2429
g62
(dp2430
sg71
g2415
sg64
(lp2431
g57
(g58
g59
NtRp2432
(dp2433
g62
(dp2434
g70
I5
ssg71
g2428
sg64
(lp2435
g1829
asbasbasbag57
(g73
g59
NtRp2436
(dp2437
g62
(dp2438
sg71
g67
sg64
(lp2439
g57
(g78
g59
NtRp2440
(dp2441
g62
(dp2442
g82
g83
ssg71
g2436
sg64
(lp2443
S'is_restful'
p2444
asbag57
(g78
g59
NtRp2445
(dp2446
g62
(dp2447
g89
g90
ssg71
g2436
sg64
(lp2448
S':'
asbag57
(g78
g59
NtRp2449
(dp2450
g62
(dp2451
sg71
g2436
sg64
(lp2452
g57
(g58
g59
NtRp2453
(dp2454
g62
(dp2455
g70
I5
ssg71
g2449
sg64
(lp2456
g100
asbasbasbag57
(g73
g59
NtRp2457
(dp2458
g62
(dp2459
sg71
g67
sg64
(lp2460
g57
(g78
g59
NtRp2461
(dp2462
g62
(dp2463
g82
g83
ssg71
g2457
sg64
(lp2464
S'now'
p2465
asbag57
(g78
g59
NtRp2466
(dp2467
g62
(dp2468
g89
g90
ssg71
g2457
sg64
(lp2469
S':'
asbag57
(g78
g59
NtRp2470
(dp2471
g62
(dp2472
sg71
g2457
sg64
(lp2473
g57
(g58
g59
NtRp2474
(dp2475
g62
(dp2476
g70
I5
ssg71
g2470
sg64
(lp2477
S'datetime.datetime(2013, 3, 4, 15, 55, 50, 726429)'
p2478
asbasbasbag57
(g73
g59
NtRp2479
(dp2480
g62
(dp2481
sg71
g67
sg64
(lp2482
g57
(g78
g59
NtRp2483
(dp2484
g62
(dp2485
g82
g83
ssg71
g2479
sg64
(lp2486
S'post_vars'
p2487
asbag57
(g78
g59
NtRp2488
(dp2489
g62
(dp2490
g89
g90
ssg71
g2479
sg64
(lp2491
S':'
asbag57
(g78
g59
NtRp2492
(dp2493
g62
(dp2494
sg71
g2479
sg64
(lp2495
g57
(g58
g59
NtRp2496
(dp2497
g62
(dp2498
g70
I5
ssg71
g2492
sg64
(lp2499
g57
(g66
g59
NtRp2500
(dp2501
g62
(dp2502
g70
I4
ssg71
Nsg64
(lp2503
sbasbasbasbag57
(g73
g59
NtRp2504
(dp2505
g62
(dp2506
sg71
g67
sg64
(lp2507
g57
(g78
g59
NtRp2508
(dp2509
g62
(dp2510
g82
g83
ssg71
g2504
sg64
(lp2511
S'raw_args'
p2512
asbag57
(g78
g59
NtRp2513
(dp2514
g62
(dp2515
g89
g90
ssg71
g2504
sg64
(lp2516
S':'
asbag57
(g78
g59
NtRp2517
(dp2518
g62
(dp2519
sg71
g2504
sg64
(lp2520
g57
(g58
g59
NtRp2521
(dp2522
g62
(dp2523
g70
I5
ssg71
g2517
sg64
(lp2524
S'project/experiment.project/5'
p2525
asbasbasbag57
(g73
g59
NtRp2526
(dp2527
g62
(dp2528
sg71
g67
sg64
(lp2529
g57
(g78
g59
NtRp2530
(dp2531
g62
(dp2532
g82
g83
ssg71
g2526
sg64
(lp2533
S'raw_extension'
p2534
asbag57
(g78
g59
NtRp2535
(dp2536
g62
(dp2537
g89
g90
ssg71
g2526
sg64
(lp2538
S':'
asbag57
(g78
g59
NtRp2539
(dp2540
g62
(dp2541
sg71
g2526
sg64
(lp2542
g57
(g58
g59
NtRp2543
(dp2544
g62
(dp2545
g70
I5
ssg71
g2539
sg64
(lp2546
S'None'
p2547
asbasbasbag57
(g73
g59
NtRp2548
(dp2549
g62
(dp2550
sg71
g67
sg64
(lp2551
g57
(g78
g59
NtRp2552
(dp2553
g62
(dp2554
g82
g83
ssg71
g2548
sg64
(lp2555
S'url'
p2556
asbag57
(g78
g59
NtRp2557
(dp2558
g62
(dp2559
g89
g90
ssg71
g2548
sg64
(lp2560
S':'
asbag57
(g78
g59
NtRp2561
(dp2562
g62
(dp2563
sg71
g2548
sg64
(lp2564
g57
(g58
g59
NtRp2565
(dp2566
g62
(dp2567
g70
I5
ssg71
g2561
sg64
(lp2568
g1396
asbasbasbag57
(g73
g59
NtRp2569
(dp2570
g62
(dp2571
sg71
g67
sg64
(lp2572
g57
(g78
g59
NtRp2573
(dp2574
g62
(dp2575
g82
g83
ssg71
g2569
sg64
(lp2576
S'utcnow'
p2577
asbag57
(g78
g59
NtRp2578
(dp2579
g62
(dp2580
g89
g90
ssg71
g2569
sg64
(lp2581
S':'
asbag57
(g78
g59
NtRp2582
(dp2583
g62
(dp2584
sg71
g2569
sg64
(lp2585
g57
(g58
g59
NtRp2586
(dp2587
g62
(dp2588
g70
I5
ssg71
g2582
sg64
(lp2589
S'datetime.datetime(2013, 3, 4, 10, 25, 50, 726493)'
p2590
asbasbasbag57
(g73
g59
NtRp2591
(dp2592
g62
(dp2593
sg71
g67
sg64
(lp2594
g57
(g78
g59
NtRp2595
(dp2596
g62
(dp2597
g82
g83
ssg71
g2591
sg64
(lp2598
S'uuid'
p2599
asbag57
(g78
g59
NtRp2600
(dp2601
g62
(dp2602
g89
g90
ssg71
g2591
sg64
(lp2603
S':'
asbag57
(g78
g59
NtRp2604
(dp2605
g62
(dp2606
sg71
g2591
sg64
(lp2607
g57
(g58
g59
NtRp2608
(dp2609
g62
(dp2610
g70
I5
ssg71
g2604
sg64
(lp2611
S'DEV_bootstrap_ch/127.0.0.1.2013-03-04.15-55-50.e20334f7-a063-454f-b5d8-ad45d8736fdc'
p2612
asbasbasbag57
(g73
g59
NtRp2613
(dp2614
g62
(dp2615
sg71
g67
sg64
(lp2616
g57
(g78
g59
NtRp2617
(dp2618
g62
(dp2619
g82
g83
ssg71
g2613
sg64
(lp2620
S'vars'
p2621
asbag57
(g78
g59
NtRp2622
(dp2623
g62
(dp2624
g89
g90
ssg71
g2613
sg64
(lp2625
S':'
asbag57
(g78
g59
NtRp2626
(dp2627
g62
(dp2628
sg71
g2613
sg64
(lp2629
g57
(g58
g59
NtRp2630
(dp2631
g62
(dp2632
g70
I5
ssg71
g2626
sg64
(lp2633
g57
(g66
g59
NtRp2634
(dp2635
g62
(dp2636
g70
I4
ssg71
Nsg64
(lp2637
sbasbasbasbag57
(g73
g59
NtRp2638
(dp2639
g62
(dp2640
sg71
g67
sg64
(lp2641
g57
(g78
g59
NtRp2642
(dp2643
g62
(dp2644
g82
g83
ssg71
g2638
sg64
(lp2645
S'wsgi'
p2646
asbag57
(g78
g59
NtRp2647
(dp2648
g62
(dp2649
g89
g90
ssg71
g2638
sg64
(lp2650
S':'
asbag57
(g78
g59
NtRp2651
(dp2652
g62
(dp2653
sg71
g2638
sg64
(lp2654
g57
(g58
g59
NtRp2655
(dp2656
g62
(dp2657
g70
I5
ssg71
g2651
sg64
(lp2658
g57
(g66
g59
NtRp2659
(dp2660
g62
(dp2661
g70
I4
ssg71
Nsg64
(lp2662
g57
(g73
g59
NtRp2663
(dp2664
g62
(dp2665
sg71
g2659
sg64
(lp2666
g57
(g78
g59
NtRp2667
(dp2668
g62
(dp2669
g82
g83
ssg71
g2663
sg64
(lp2670
S'environ'
p2671
asbag57
(g78
g59
NtRp2672
(dp2673
g62
(dp2674
g89
g90
ssg71
g2663
sg64
(lp2675
S':'
asbag57
(g78
g59
NtRp2676
(dp2677
g62
(dp2678
sg71
g2663
sg64
(lp2679
g57
(g58
g59
NtRp2680
(dp2681
g62
(dp2682
g70
I4
ssg71
g2676
sg64
(lp2683
g57
(g66
g59
NtRp2684
(dp2685
g62
(dp2686
g70
I3
ssg71
Nsg64
(lp2687
g57
(g73
g59
NtRp2688
(dp2689
g62
(dp2690
sg71
g2684
sg64
(lp2691
g57
(g78
g59
NtRp2692
(dp2693
g62
(dp2694
g82
g83
ssg71
g2688
sg64
(lp2695
S'HTTP_ACCEPT'
p2696
asbag57
(g78
g59
NtRp2697
(dp2698
g62
(dp2699
g89
g90
ssg71
g2688
sg64
(lp2700
S':'
asbag57
(g78
g59
NtRp2701
(dp2702
g62
(dp2703
sg71
g2688
sg64
(lp2704
g57
(g58
g59
NtRp2705
(dp2706
g62
(dp2707
g70
I3
ssg71
g2701
sg64
(lp2708
g1066
asbasbasbag57
(g73
g59
NtRp2709
(dp2710
g62
(dp2711
sg71
g2684
sg64
(lp2712
g57
(g78
g59
NtRp2713
(dp2714
g62
(dp2715
g82
g83
ssg71
g2709
sg64
(lp2716
S'HTTP_ACCEPT_CHARSET'
p2717
asbag57
(g78
g59
NtRp2718
(dp2719
g62
(dp2720
g89
g90
ssg71
g2709
sg64
(lp2721
S':'
asbag57
(g78
g59
NtRp2722
(dp2723
g62
(dp2724
sg71
g2709
sg64
(lp2725
g57
(g58
g59
NtRp2726
(dp2727
g62
(dp2728
g70
I3
ssg71
g2722
sg64
(lp2729
g1088
asbasbasbag57
(g73
g59
NtRp2730
(dp2731
g62
(dp2732
sg71
g2684
sg64
(lp2733
g57
(g78
g59
NtRp2734
(dp2735
g62
(dp2736
g82
g83
ssg71
g2730
sg64
(lp2737
S'HTTP_ACCEPT_ENCODING'
p2738
asbag57
(g78
g59
NtRp2739
(dp2740
g62
(dp2741
g89
g90
ssg71
g2730
sg64
(lp2742
S':'
asbag57
(g78
g59
NtRp2743
(dp2744
g62
(dp2745
sg71
g2730
sg64
(lp2746
g57
(g58
g59
NtRp2747
(dp2748
g62
(dp2749
g70
I3
ssg71
g2743
sg64
(lp2750
g1110
asbasbasbag57
(g73
g59
NtRp2751
(dp2752
g62
(dp2753
sg71
g2684
sg64
(lp2754
g57
(g78
g59
NtRp2755
(dp2756
g62
(dp2757
g82
g83
ssg71
g2751
sg64
(lp2758
S'HTTP_ACCEPT_LANGUAGE'
p2759
asbag57
(g78
g59
NtRp2760
(dp2761
g62
(dp2762
g89
g90
ssg71
g2751
sg64
(lp2763
S':'
asbag57
(g78
g59
NtRp2764
(dp2765
g62
(dp2766
sg71
g2751
sg64
(lp2767
g57
(g58
g59
NtRp2768
(dp2769
g62
(dp2770
g70
I3
ssg71
g2764
sg64
(lp2771
g1132
asbasbasbag57
(g73
g59
NtRp2772
(dp2773
g62
(dp2774
sg71
g2684
sg64
(lp2775
g57
(g78
g59
NtRp2776
(dp2777
g62
(dp2778
g82
g83
ssg71
g2772
sg64
(lp2779
S'HTTP_CONNECTION'
p2780
asbag57
(g78
g59
NtRp2781
(dp2782
g62
(dp2783
g89
g90
ssg71
g2772
sg64
(lp2784
S':'
asbag57
(g78
g59
NtRp2785
(dp2786
g62
(dp2787
sg71
g2772
sg64
(lp2788
g57
(g58
g59
NtRp2789
(dp2790
g62
(dp2791
g70
I3
ssg71
g2785
sg64
(lp2792
g1154
asbasbasbag57
(g73
g59
NtRp2793
(dp2794
g62
(dp2795
sg71
g2684
sg64
(lp2796
g57
(g78
g59
NtRp2797
(dp2798
g62
(dp2799
g82
g83
ssg71
g2793
sg64
(lp2800
S'HTTP_COOKIE'
p2801
asbag57
(g78
g59
NtRp2802
(dp2803
g62
(dp2804
g89
g90
ssg71
g2793
sg64
(lp2805
S':'
asbag57
(g78
g59
NtRp2806
(dp2807
g62
(dp2808
sg71
g2793
sg64
(lp2809
g57
(g58
g59
NtRp2810
(dp2811
g62
(dp2812
g70
I3
ssg71
g2806
sg64
(lp2813
g1176
asbasbasbag57
(g73
g59
NtRp2814
(dp2815
g62
(dp2816
sg71
g2684
sg64
(lp2817
g57
(g78
g59
NtRp2818
(dp2819
g62
(dp2820
g82
g83
ssg71
g2814
sg64
(lp2821
S'HTTP_HOST'
p2822
asbag57
(g78
g59
NtRp2823
(dp2824
g62
(dp2825
g89
g90
ssg71
g2814
sg64
(lp2826
S':'
asbag57
(g78
g59
NtRp2827
(dp2828
g62
(dp2829
sg71
g2814
sg64
(lp2830
g57
(g58
g59
NtRp2831
(dp2832
g62
(dp2833
g70
I3
ssg71
g2827
sg64
(lp2834
g1198
asbasbasbag57
(g73
g59
NtRp2835
(dp2836
g62
(dp2837
sg71
g2684
sg64
(lp2838
g57
(g78
g59
NtRp2839
(dp2840
g62
(dp2841
g82
g83
ssg71
g2835
sg64
(lp2842
S'HTTP_REFERER'
p2843
asbag57
(g78
g59
NtRp2844
(dp2845
g62
(dp2846
g89
g90
ssg71
g2835
sg64
(lp2847
S':'
asbag57
(g78
g59
NtRp2848
(dp2849
g62
(dp2850
sg71
g2835
sg64
(lp2851
g57
(g58
g59
NtRp2852
(dp2853
g62
(dp2854
g70
I3
ssg71
g2848
sg64
(lp2855
g1220
asbasbasbag57
(g73
g59
NtRp2856
(dp2857
g62
(dp2858
sg71
g2684
sg64
(lp2859
g57
(g78
g59
NtRp2860
(dp2861
g62
(dp2862
g82
g83
ssg71
g2856
sg64
(lp2863
S'HTTP_USER_AGENT'
p2864
asbag57
(g78
g59
NtRp2865
(dp2866
g62
(dp2867
g89
g90
ssg71
g2856
sg64
(lp2868
S':'
asbag57
(g78
g59
NtRp2869
(dp2870
g62
(dp2871
sg71
g2856
sg64
(lp2872
g57
(g58
g59
NtRp2873
(dp2874
g62
(dp2875
g70
I3
ssg71
g2869
sg64
(lp2876
g1242
asbasbasbag57
(g73
g59
NtRp2877
(dp2878
g62
(dp2879
sg71
g2684
sg64
(lp2880
g57
(g78
g59
NtRp2881
(dp2882
g62
(dp2883
g82
g83
ssg71
g2877
sg64
(lp2884
S'PATH_INFO'
p2885
asbag57
(g78
g59
NtRp2886
(dp2887
g62
(dp2888
g89
g90
ssg71
g2877
sg64
(lp2889
S':'
asbag57
(g78
g59
NtRp2890
(dp2891
g62
(dp2892
sg71
g2877
sg64
(lp2893
g57
(g58
g59
NtRp2894
(dp2895
g62
(dp2896
g70
I3
ssg71
g2890
sg64
(lp2897
g1396
asbasbasbag57
(g73
g59
NtRp2898
(dp2899
g62
(dp2900
sg71
g2684
sg64
(lp2901
g57
(g78
g59
NtRp2902
(dp2903
g62
(dp2904
g82
g83
ssg71
g2898
sg64
(lp2905
S'QUERY_STRING'
p2906
asbag57
(g78
g59
NtRp2907
(dp2908
g62
(dp2909
g89
g90
ssg71
g2898
sg64
(lp2910
S':'
asbag57
(g78
g59
NtRp2911
(dp2912
g62
(dp2913
sg71
g2898
sg64
(lp2914
g57
(g58
g59
NtRp2915
(dp2916
g62
(dp2917
g70
I3
ssg71
g2911
sg64
(lp2918
S''
asbasbasbag57
(g73
g59
NtRp2919
(dp2920
g62
(dp2921
sg71
g2684
sg64
(lp2922
g57
(g78
g59
NtRp2923
(dp2924
g62
(dp2925
g82
g83
ssg71
g2919
sg64
(lp2926
S'REMOTE_ADDR'
p2927
asbag57
(g78
g59
NtRp2928
(dp2929
g62
(dp2930
g89
g90
ssg71
g2919
sg64
(lp2931
S':'
asbag57
(g78
g59
NtRp2932
(dp2933
g62
(dp2934
sg71
g2919
sg64
(lp2935
g57
(g58
g59
NtRp2936
(dp2937
g62
(dp2938
g70
I3
ssg71
g2932
sg64
(lp2939
g250
asbasbasbag57
(g73
g59
NtRp2940
(dp2941
g62
(dp2942
sg71
g2684
sg64
(lp2943
g57
(g78
g59
NtRp2944
(dp2945
g62
(dp2946
g82
g83
ssg71
g2940
sg64
(lp2947
S'REMOTE_PORT'
p2948
asbag57
(g78
g59
NtRp2949
(dp2950
g62
(dp2951
g89
g90
ssg71
g2940
sg64
(lp2952
S':'
asbag57
(g78
g59
NtRp2953
(dp2954
g62
(dp2955
sg71
g2940
sg64
(lp2956
g57
(g58
g59
NtRp2957
(dp2958
g62
(dp2959
g70
I3
ssg71
g2953
sg64
(lp2960
g1460
asbasbasbag57
(g73
g59
NtRp2961
(dp2962
g62
(dp2963
sg71
g2684
sg64
(lp2964
g57
(g78
g59
NtRp2965
(dp2966
g62
(dp2967
g82
g83
ssg71
g2961
sg64
(lp2968
S'REQUEST_METHOD'
p2969
asbag57
(g78
g59
NtRp2970
(dp2971
g62
(dp2972
g89
g90
ssg71
g2961
sg64
(lp2973
S':'
asbag57
(g78
g59
NtRp2974
(dp2975
g62
(dp2976
sg71
g2961
sg64
(lp2977
g57
(g58
g59
NtRp2978
(dp2979
g62
(dp2980
g70
I3
ssg71
g2974
sg64
(lp2981
g1482
asbasbasbag57
(g73
g59
NtRp2982
(dp2983
g62
(dp2984
sg71
g2684
sg64
(lp2985
g57
(g78
g59
NtRp2986
(dp2987
g62
(dp2988
g82
g83
ssg71
g2982
sg64
(lp2989
S'REQUEST_URI'
p2990
asbag57
(g78
g59
NtRp2991
(dp2992
g62
(dp2993
g89
g90
ssg71
g2982
sg64
(lp2994
S':'
asbag57
(g78
g59
NtRp2995
(dp2996
g62
(dp2997
sg71
g2982
sg64
(lp2998
g57
(g58
g59
NtRp2999
(dp3000
g62
(dp3001
g70
I3
ssg71
g2995
sg64
(lp3002
g1396
asbasbasbag57
(g73
g59
NtRp3003
(dp3004
g62
(dp3005
sg71
g2684
sg64
(lp3006
g57
(g78
g59
NtRp3007
(dp3008
g62
(dp3009
g82
g83
ssg71
g3003
sg64
(lp3010
S'SCRIPT_NAME'
p3011
asbag57
(g78
g59
NtRp3012
(dp3013
g62
(dp3014
g89
g90
ssg71
g3003
sg64
(lp3015
S':'
asbag57
(g78
g59
NtRp3016
(dp3017
g62
(dp3018
sg71
g3003
sg64
(lp3019
g57
(g58
g59
NtRp3020
(dp3021
g62
(dp3022
g70
I3
ssg71
g3016
sg64
(lp3023
S''
asbasbasbag57
(g73
g59
NtRp3024
(dp3025
g62
(dp3026
sg71
g2684
sg64
(lp3027
g57
(g78
g59
NtRp3028
(dp3029
g62
(dp3030
g82
g83
ssg71
g3024
sg64
(lp3031
S'SERVER_NAME'
p3032
asbag57
(g78
g59
NtRp3033
(dp3034
g62
(dp3035
g89
g90
ssg71
g3024
sg64
(lp3036
S':'
asbag57
(g78
g59
NtRp3037
(dp3038
g62
(dp3039
sg71
g3024
sg64
(lp3040
g57
(g58
g59
NtRp3041
(dp3042
g62
(dp3043
g70
I3
ssg71
g3037
sg64
(lp3044
g1546
asbasbasbag57
(g73
g59
NtRp3045
(dp3046
g62
(dp3047
sg71
g2684
sg64
(lp3048
g57
(g78
g59
NtRp3049
(dp3050
g62
(dp3051
g82
g83
ssg71
g3045
sg64
(lp3052
S'SERVER_PORT'
p3053
asbag57
(g78
g59
NtRp3054
(dp3055
g62
(dp3056
g89
g90
ssg71
g3045
sg64
(lp3057
S':'
asbag57
(g78
g59
NtRp3058
(dp3059
g62
(dp3060
sg71
g3045
sg64
(lp3061
g57
(g58
g59
NtRp3062
(dp3063
g62
(dp3064
g70
I3
ssg71
g3058
sg64
(lp3065
g1568
asbasbasbag57
(g73
g59
NtRp3066
(dp3067
g62
(dp3068
sg71
g2684
sg64
(lp3069
g57
(g78
g59
NtRp3070
(dp3071
g62
(dp3072
g82
g83
ssg71
g3066
sg64
(lp3073
S'SERVER_PROTOCOL'
p3074
asbag57
(g78
g59
NtRp3075
(dp3076
g62
(dp3077
g89
g90
ssg71
g3066
sg64
(lp3078
S':'
asbag57
(g78
g59
NtRp3079
(dp3080
g62
(dp3081
sg71
g3066
sg64
(lp3082
g57
(g58
g59
NtRp3083
(dp3084
g62
(dp3085
g70
I3
ssg71
g3079
sg64
(lp3086
g1590
asbasbasbag57
(g73
g59
NtRp3087
(dp3088
g62
(dp3089
sg71
g2684
sg64
(lp3090
g57
(g78
g59
NtRp3091
(dp3092
g62
(dp3093
g82
g83
ssg71
g3087
sg64
(lp3094
S'SERVER_SOFTWARE'
p3095
asbag57
(g78
g59
NtRp3096
(dp3097
g62
(dp3098
g89
g90
ssg71
g3087
sg64
(lp3099
S':'
asbag57
(g78
g59
NtRp3100
(dp3101
g62
(dp3102
sg71
g3087
sg64
(lp3103
g57
(g58
g59
NtRp3104
(dp3105
g62
(dp3106
g70
I3
ssg71
g3100
sg64
(lp3107
g1612
asbasbasbag57
(g73
g59
NtRp3108
(dp3109
g62
(dp3110
sg71
g2684
sg64
(lp3111
g57
(g78
g59
NtRp3112
(dp3113
g62
(dp3114
g82
g83
ssg71
g3108
sg64
(lp3115
S'wsgi.errors'
p3116
asbag57
(g78
g59
NtRp3117
(dp3118
g62
(dp3119
g89
g90
ssg71
g3108
sg64
(lp3120
S':'
asbag57
(g78
g59
NtRp3121
(dp3122
g62
(dp3123
sg71
g3108
sg64
(lp3124
g57
(g58
g59
NtRp3125
(dp3126
g62
(dp3127
g70
I3
ssg71
g3121
sg64
(lp3128
S"<open file '<stderr>', mode 'w' at 0xb729e0d0>"
p3129
asbasbasbag57
(g73
g59
NtRp3130
(dp3131
g62
(dp3132
sg71
g2684
sg64
(lp3133
g57
(g78
g59
NtRp3134
(dp3135
g62
(dp3136
g82
g83
ssg71
g3130
sg64
(lp3137
S'wsgi.file_wrapper'
p3138
asbag57
(g78
g59
NtRp3139
(dp3140
g62
(dp3141
g89
g90
ssg71
g3130
sg64
(lp3142
S':'
asbag57
(g78
g59
NtRp3143
(dp3144
g62
(dp3145
sg71
g3130
sg64
(lp3146
g57
(g58
g59
NtRp3147
(dp3148
g62
(dp3149
g70
I3
ssg71
g3143
sg64
(lp3150
S'<class wsgiref.util.FileWrapper at 0x88bfb6c>'
p3151
asbasbasbag57
(g73
g59
NtRp3152
(dp3153
g62
(dp3154
sg71
g2684
sg64
(lp3155
g57
(g78
g59
NtRp3156
(dp3157
g62
(dp3158
g82
g83
ssg71
g3152
sg64
(lp3159
S'wsgi.input'
p3160
asbag57
(g78
g59
NtRp3161
(dp3162
g62
(dp3163
g89
g90
ssg71
g3152
sg64
(lp3164
S':'
asbag57
(g78
g59
NtRp3165
(dp3166
g62
(dp3167
sg71
g3152
sg64
(lp3168
g57
(g58
g59
NtRp3169
(dp3170
g62
(dp3171
g70
I3
ssg71
g3165
sg64
(lp3172
S'<cStringIO.StringO object at 0xadb7a620>'
p3173
asbasbasbag57
(g73
g59
NtRp3174
(dp3175
g62
(dp3176
sg71
g2684
sg64
(lp3177
g57
(g78
g59
NtRp3178
(dp3179
g62
(dp3180
g82
g83
ssg71
g3174
sg64
(lp3181
S'wsgi.multiprocess'
p3182
asbag57
(g78
g59
NtRp3183
(dp3184
g62
(dp3185
g89
g90
ssg71
g3174
sg64
(lp3186
S':'
asbag57
(g78
g59
NtRp3187
(dp3188
g62
(dp3189
sg71
g3174
sg64
(lp3190
g57
(g58
g59
NtRp3191
(dp3192
g62
(dp3193
g70
I3
ssg71
g3187
sg64
(lp3194
g100
asbasbasbag57
(g73
g59
NtRp3195
(dp3196
g62
(dp3197
sg71
g2684
sg64
(lp3198
g57
(g78
g59
NtRp3199
(dp3200
g62
(dp3201
g82
g83
ssg71
g3195
sg64
(lp3202
S'wsgi.multithread'
p3203
asbag57
(g78
g59
NtRp3204
(dp3205
g62
(dp3206
g89
g90
ssg71
g3195
sg64
(lp3207
S':'
asbag57
(g78
g59
NtRp3208
(dp3209
g62
(dp3210
sg71
g3195
sg64
(lp3211
g57
(g58
g59
NtRp3212
(dp3213
g62
(dp3214
g70
I3
ssg71
g3208
sg64
(lp3215
g1829
asbasbasbag57
(g73
g59
NtRp3216
(dp3217
g62
(dp3218
sg71
g2684
sg64
(lp3219
g57
(g78
g59
NtRp3220
(dp3221
g62
(dp3222
g82
g83
ssg71
g3216
sg64
(lp3223
S'wsgi.run_once'
p3224
asbag57
(g78
g59
NtRp3225
(dp3226
g62
(dp3227
g89
g90
ssg71
g3216
sg64
(lp3228
S':'
asbag57
(g78
g59
NtRp3229
(dp3230
g62
(dp3231
sg71
g3216
sg64
(lp3232
g57
(g58
g59
NtRp3233
(dp3234
g62
(dp3235
g70
I3
ssg71
g3229
sg64
(lp3236
g100
asbasbasbag57
(g73
g59
NtRp3237
(dp3238
g62
(dp3239
sg71
g2684
sg64
(lp3240
g57
(g78
g59
NtRp3241
(dp3242
g62
(dp3243
g82
g83
ssg71
g3237
sg64
(lp3244
S'wsgi.url_scheme'
p3245
asbag57
(g78
g59
NtRp3246
(dp3247
g62
(dp3248
g89
g90
ssg71
g3237
sg64
(lp3249
S':'
asbag57
(g78
g59
NtRp3250
(dp3251
g62
(dp3252
sg71
g3237
sg64
(lp3253
g57
(g58
g59
NtRp3254
(dp3255
g62
(dp3256
g70
I3
ssg71
g3250
sg64
(lp3257
g1872
asbasbasbag57
(g73
g59
NtRp3258
(dp3259
g62
(dp3260
sg71
g2684
sg64
(lp3261
g57
(g78
g59
NtRp3262
(dp3263
g62
(dp3264
g82
g83
ssg71
g3258
sg64
(lp3265
S'wsgi.version'
p3266
asbag57
(g78
g59
NtRp3267
(dp3268
g62
(dp3269
g89
g90
ssg71
g3258
sg64
(lp3270
S':'
asbag57
(g78
g59
NtRp3271
(dp3272
g62
(dp3273
sg71
g3258
sg64
(lp3274
g57
(g58
g59
NtRp3275
(dp3276
g62
(dp3277
g70
I3
ssg71
g3271
sg64
(lp3278
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p3279
(lp3280
(dp3281
S'file'
p3282
S'/home/anil/Downloads/web2py/gluon/restricted.py'
p3283
sS'dump'
p3284
(dp3285
S'environment'
p3286
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p3287
sS'ccode'
p3288
S'<code object <module> at 0xacd92d10, file "/home...EV_bootstrap_ch/controllers/default.py", line 16>'
p3289
ssS'lnum'
p3290
I212
sS'lines'
p3291
(dp3292
I207
S'    try:'
p3293
sI208
S'        if isinstance(code, types.CodeType):'
p3294
sI209
S'            ccode = code'
p3295
sI210
S'        else:'
p3296
sI211
S'            ccode = compile2(code, layer)'
p3297
sI212
S'        exec ccode in environment'
p3298
sI213
S'    except HTTP:'
p3299
sI214
S'        raise'
p3300
sI215
S'    except RestrictedError:'
p3301
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p3302
ssS'call'
p3303
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...se._vars=response._caller(list_all_dev_projects)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}, layer='/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py')"
p3304
sS'func'
p3305
S'restricted'
p3306
sa(dp3307
g3282
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p3308
sg3284
(dp3309
sg3290
I1148
sg3291
(dp3310
I1137
S'   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """'
p3311
sI1138
S'   """ per sample . takes id of the sample as the input """'
p3312
sI1139
S'   sid = request.args(0)'
p3313
sI1140
S'   sample = db(db.sample.id == sid).select().first()'
p3314
sI1141
S'   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)'
p3315
sI1142
S'   form = SQLFORM(db.sample_files)'
p3316
sI1143
S'   form.vars.sample = sid'
p3317
sI1144
S'   return locals()'
p3318
sI1145
S''
sI1146
S''
ssg3303
S'()'
p3319
sg3305
S'<module>'
p3320
sa(dp3321
g3282
S'/home/anil/Downloads/web2py/gluon/globals.py'
p3322
sg3284
(dp3323
S'self'
p3324
S'undefined'
p3325
sS'f'
S'<function list_all_dev_projects>'
p3326
ssg3290
I193
sg3291
(dp3327
I192
S'        self._vars = None'
p3328
sI193
S'        self._caller = lambda f: f()'
p3329
sI194
S'        self._view_environment = None'
p3330
sI195
S'        self._custom_commit = None'
p3331
sI196
S'        self._custom_rollback = None'
p3332
sI197
S''
sI188
S'        self.menu = []             # used by the default view layout'
p3333
sI189
S'        self.files = []            # used by web2py_ajax.html'
p3334
sI190
S'        self.generic_patterns = []  # patterns to allow generic views'
p3335
sI191
S"        self.delimiters = ('{{', '}}')"
p3336
ssg3303
S'(f=<function list_all_dev_projects>)'
p3337
sg3305
S'<lambda>'
p3338
sa(dp3339
g3282
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p3340
sg3284
(dp3341
S'auth.user.id'
p3342
g3325
sS'auth.user'
p3343
S'None'
p3344
sS'global auth'
p3345
S'<gluon.tools.Auth object>'
p3346
sS'db.sample.experimentalist.default'
p3347
S'None'
p3348
sS'global db'
p3349
S'<DAL uri="sqlite://storage.sqlite">'
p3350
sS'db.sample'
p3351
S'<Table sample (id,parent,experimentalist,name,co...iment,working_status,replica,publication_status)>'
p3352
sS'db.sample.experimentalist'
p3353
S'<gluon.dal.Field object>'
p3354
ssg3290
I292
sg3291
(dp3355
I288
S'def list_all_dev_projects():'
p3356
sI289
S'    response.menu = ['
p3357
sI290
S"    (T('Home'), False, URL('default','list_all_projects'), [])"
p3358
sI291
S'    ]'
p3359
sI292
S'    db.sample.experimentalist.default=auth.user.id'
p3360
sI293
S'    db.sample.experiment.writable = False'
p3361
sI294
S'    q1 = (db.project.project_status ==  0)'
p3362
sI295
S'    q2 = (db.sample.experimentalist == auth.user.id)'
p3363
sI296
S"    ck = {'project':q1,'sample':q2}"
p3364
sI287
S''
ssg3303
S'()'
p3365
sg3305
S'list_all_dev_projects'
p3366
sasS'pyver'
p3367
S'Python 2.7.3: /usr/bin/python'
p3368
sS'session'
p3369
g57
(g58
g59
NtRp3370
(dp3371
g62
(dp3372
sg64
(lp3373
g57
(g66
g59
NtRp3374
(dp3375
g62
(dp3376
g70
I5
ssg71
Nsg64
(lp3377
g57
(g73
g59
NtRp3378
(dp3379
g62
(dp3380
sg71
g3374
sg64
(lp3381
g57
(g78
g59
NtRp3382
(dp3383
g62
(dp3384
g82
g83
ssg71
g3378
sg64
(lp3385
S'flash'
p3386
asbag57
(g78
g59
NtRp3387
(dp3388
g62
(dp3389
g89
g90
ssg71
g3378
sg64
(lp3390
S':'
asbag57
(g78
g59
NtRp3391
(dp3392
g62
(dp3393
sg71
g3378
sg64
(lp3394
g57
(g58
g59
NtRp3395
(dp3396
g62
(dp3397
g70
I5
ssg71
g3391
sg64
(lp3398
S'None'
p3399
asbasbasbasbasbsS'etype'
p3400
S"<type 'exceptions.AttributeError'>"
p3401
sS'date'
p3402
S'Mon Mar  4 15:55:50 2013'
p3403
sS'response'
p3404
g57
(g58
g59
NtRp3405
(dp3406
g62
(dp3407
sg64
(lp3408
g57
(g66
g59
NtRp3409
(dp3410
g62
(dp3411
g70
I5
ssg71
Nsg64
(lp3412
g57
(g73
g59
NtRp3413
(dp3414
g62
(dp3415
sg71
g3409
sg64
(lp3416
g57
(g78
g59
NtRp3417
(dp3418
g62
(dp3419
g82
g83
ssg71
g3413
sg64
(lp3420
g193
asbag57
(g78
g59
NtRp3421
(dp3422
g62
(dp3423
g89
g90
ssg71
g3413
sg64
(lp3424
S':'
asbag57
(g78
g59
NtRp3425
(dp3426
g62
(dp3427
sg71
g3413
sg64
(lp3428
g57
(g58
g59
NtRp3429
(dp3430
g62
(dp3431
g70
I5
ssg71
g3425
sg64
(lp3432
S'<cStringIO.StringO object at 0x8cf2520>'
p3433
asbasbasbag57
(g73
g59
NtRp3434
(dp3435
g62
(dp3436
sg71
g3409
sg64
(lp3437
g57
(g78
g59
NtRp3438
(dp3439
g62
(dp3440
g82
g83
ssg71
g3434
sg64
(lp3441
g281
asbag57
(g78
g59
NtRp3442
(dp3443
g62
(dp3444
g89
g90
ssg71
g3434
sg64
(lp3445
S':'
asbag57
(g78
g59
NtRp3446
(dp3447
g62
(dp3448
sg71
g3434
sg64
(lp3449
g57
(g58
g59
NtRp3450
(dp3451
g62
(dp3452
g70
I5
ssg71
g3446
sg64
(lp3453
g57
(g66
g59
NtRp3454
(dp3455
g62
(dp3456
g70
I4
ssg71
Nsg64
(lp3457
g57
(g73
g59
NtRp3458
(dp3459
g62
(dp3460
sg71
g3454
sg64
(lp3461
g57
(g78
g59
NtRp3462
(dp3463
g62
(dp3464
g82
g83
ssg71
g3458
sg64
(lp3465
S'session_id_dev_bootstrap_ch'
p3466
asbag57
(g78
g59
NtRp3467
(dp3468
g62
(dp3469
g89
g90
ssg71
g3458
sg64
(lp3470
S':'
asbag57
(g78
g59
NtRp3471
(dp3472
g62
(dp3473
sg71
g3458
sg64
(lp3474
g57
(g58
g59
NtRp3475
(dp3476
g62
(dp3477
g70
I4
ssg71
g3471
sg64
(lp3478
g513
ag57
(g66
g59
NtRp3479
(dp3480
g62
(dp3481
g70
I3
ssg71
Nsg64
(lp3482
g57
(g73
g59
NtRp3483
(dp3484
g62
(dp3485
sg71
g3479
sg64
(lp3486
g57
(g78
g59
NtRp3487
(dp3488
g62
(dp3489
g82
g83
ssg71
g3483
sg64
(lp3490
g332
asbag57
(g78
g59
NtRp3491
(dp3492
g62
(dp3493
g89
g90
ssg71
g3483
sg64
(lp3494
S':'
asbag57
(g78
g59
NtRp3495
(dp3496
g62
(dp3497
sg71
g3483
sg64
(lp3498
g57
(g58
g59
NtRp3499
(dp3500
g62
(dp3501
g70
I3
ssg71
g3495
sg64
(lp3502
S''
asbasbasbag57
(g73
g59
NtRp3503
(dp3504
g62
(dp3505
sg71
g3479
sg64
(lp3506
g57
(g78
g59
NtRp3507
(dp3508
g62
(dp3509
g82
g83
ssg71
g3503
sg64
(lp3510
g353
asbag57
(g78
g59
NtRp3511
(dp3512
g62
(dp3513
g89
g90
ssg71
g3503
sg64
(lp3514
S':'
asbag57
(g78
g59
NtRp3515
(dp3516
g62
(dp3517
sg71
g3503
sg64
(lp3518
g57
(g58
g59
NtRp3519
(dp3520
g62
(dp3521
g70
I3
ssg71
g3515
sg64
(lp3522
S''
asbasbasbag57
(g73
g59
NtRp3523
(dp3524
g62
(dp3525
sg71
g3479
sg64
(lp3526
g57
(g78
g59
NtRp3527
(dp3528
g62
(dp3529
g82
g83
ssg71
g3523
sg64
(lp3530
g374
asbag57
(g78
g59
NtRp3531
(dp3532
g62
(dp3533
g89
g90
ssg71
g3523
sg64
(lp3534
S':'
asbag57
(g78
g59
NtRp3535
(dp3536
g62
(dp3537
sg71
g3523
sg64
(lp3538
g57
(g58
g59
NtRp3539
(dp3540
g62
(dp3541
g70
I3
ssg71
g3535
sg64
(lp3542
S''
asbasbasbag57
(g73
g59
NtRp3543
(dp3544
g62
(dp3545
sg71
g3479
sg64
(lp3546
g57
(g78
g59
NtRp3547
(dp3548
g62
(dp3549
g82
g83
ssg71
g3543
sg64
(lp3550
g395
asbag57
(g78
g59
NtRp3551
(dp3552
g62
(dp3553
g89
g90
ssg71
g3543
sg64
(lp3554
S':'
asbag57
(g78
g59
NtRp3555
(dp3556
g62
(dp3557
sg71
g3543
sg64
(lp3558
g57
(g58
g59
NtRp3559
(dp3560
g62
(dp3561
g70
I3
ssg71
g3555
sg64
(lp3562
S''
asbasbasbag57
(g73
g59
NtRp3563
(dp3564
g62
(dp3565
sg71
g3479
sg64
(lp3566
g57
(g78
g59
NtRp3567
(dp3568
g62
(dp3569
g82
g83
ssg71
g3563
sg64
(lp3570
g416
asbag57
(g78
g59
NtRp3571
(dp3572
g62
(dp3573
g89
g90
ssg71
g3563
sg64
(lp3574
S':'
asbag57
(g78
g59
NtRp3575
(dp3576
g62
(dp3577
sg71
g3563
sg64
(lp3578
g57
(g58
g59
NtRp3579
(dp3580
g62
(dp3581
g70
I3
ssg71
g3575
sg64
(lp3582
S''
asbasbasbag57
(g73
g59
NtRp3583
(dp3584
g62
(dp3585
sg71
g3479
sg64
(lp3586
g57
(g78
g59
NtRp3587
(dp3588
g62
(dp3589
g82
g83
ssg71
g3583
sg64
(lp3590
g437
asbag57
(g78
g59
NtRp3591
(dp3592
g62
(dp3593
g89
g90
ssg71
g3583
sg64
(lp3594
S':'
asbag57
(g78
g59
NtRp3595
(dp3596
g62
(dp3597
sg71
g3583
sg64
(lp3598
g57
(g58
g59
NtRp3599
(dp3600
g62
(dp3601
g70
I3
ssg71
g3595
sg64
(lp3602
S'/'
asbasbasbag57
(g73
g59
NtRp3603
(dp3604
g62
(dp3605
sg71
g3479
sg64
(lp3606
g57
(g78
g59
NtRp3607
(dp3608
g62
(dp3609
g82
g83
ssg71
g3603
sg64
(lp3610
g458
asbag57
(g78
g59
NtRp3611
(dp3612
g62
(dp3613
g89
g90
ssg71
g3603
sg64
(lp3614
S':'
asbag57
(g78
g59
NtRp3615
(dp3616
g62
(dp3617
sg71
g3603
sg64
(lp3618
g57
(g58
g59
NtRp3619
(dp3620
g62
(dp3621
g70
I3
ssg71
g3615
sg64
(lp3622
S''
asbasbasbag57
(g73
g59
NtRp3623
(dp3624
g62
(dp3625
sg71
g3479
sg64
(lp3626
g57
(g78
g59
NtRp3627
(dp3628
g62
(dp3629
g82
g83
ssg71
g3623
sg64
(lp3630
g479
asbag57
(g78
g59
NtRp3631
(dp3632
g62
(dp3633
g89
g90
ssg71
g3623
sg64
(lp3634
S':'
asbag57
(g78
g59
NtRp3635
(dp3636
g62
(dp3637
sg71
g3623
sg64
(lp3638
g57
(g58
g59
NtRp3639
(dp3640
g62
(dp3641
g70
I3
ssg71
g3635
sg64
(lp3642
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3643
(dp3644
g62
(dp3645
sg71
g3409
sg64
(lp3646
g57
(g78
g59
NtRp3647
(dp3648
g62
(dp3649
g82
g83
ssg71
g3643
sg64
(lp3650
S'delimiters'
p3651
asbag57
(g78
g59
NtRp3652
(dp3653
g62
(dp3654
g89
g90
ssg71
g3643
sg64
(lp3655
S':'
asbag57
(g78
g59
NtRp3656
(dp3657
g62
(dp3658
sg71
g3643
sg64
(lp3659
g57
(g58
g59
NtRp3660
(dp3661
g62
(dp3662
g70
I5
ssg71
g3656
sg64
(lp3663
g57
(g66
g59
NtRp3664
(dp3665
g62
(dp3666
g70
I4
ssg71
Nsg64
(lp3667
g57
(g73
g59
NtRp3668
(dp3669
g62
(dp3670
sg71
g3664
sg64
(lp3671
g57
(g78
g59
NtRp3672
(dp3673
g62
(dp3674
sg71
g3668
sg64
(lp3675
g57
(g58
g59
NtRp3676
(dp3677
g62
(dp3678
g70
I4
ssg71
g3672
sg64
(lp3679
S'{{'
p3680
asbasbasbag57
(g73
g59
NtRp3681
(dp3682
g62
(dp3683
sg71
g3664
sg64
(lp3684
g57
(g78
g59
NtRp3685
(dp3686
g62
(dp3687
sg71
g3681
sg64
(lp3688
g57
(g58
g59
NtRp3689
(dp3690
g62
(dp3691
g70
I4
ssg71
g3685
sg64
(lp3692
S'}}'
p3693
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3694
(dp3695
g62
(dp3696
sg71
g3409
sg64
(lp3697
g57
(g78
g59
NtRp3698
(dp3699
g62
(dp3700
g82
g83
ssg71
g3694
sg64
(lp3701
S'files'
p3702
asbag57
(g78
g59
NtRp3703
(dp3704
g62
(dp3705
g89
g90
ssg71
g3694
sg64
(lp3706
S':'
asbag57
(g78
g59
NtRp3707
(dp3708
g62
(dp3709
sg71
g3694
sg64
(lp3710
g57
(g58
g59
NtRp3711
(dp3712
g62
(dp3713
g70
I5
ssg71
g3707
sg64
(lp3714
g57
(g66
g59
NtRp3715
(dp3716
g62
(dp3717
g70
I4
ssg71
Nsg64
(lp3718
g57
(g73
g59
NtRp3719
(dp3720
g62
(dp3721
sg71
g3715
sg64
(lp3722
g57
(g78
g59
NtRp3723
(dp3724
g62
(dp3725
sg71
g3719
sg64
(lp3726
g57
(g58
g59
NtRp3727
(dp3728
g62
(dp3729
g70
I4
ssg71
g3723
sg64
(lp3730
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/css/redmond/jquery-ui-1.8.5.custom.css'
p3731
asbasbasbag57
(g73
g59
NtRp3732
(dp3733
g62
(dp3734
sg71
g3715
sg64
(lp3735
g57
(g78
g59
NtRp3736
(dp3737
g62
(dp3738
sg71
g3732
sg64
(lp3739
g57
(g58
g59
NtRp3740
(dp3741
g62
(dp3742
g70
I4
ssg71
g3736
sg64
(lp3743
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/js/jquery-ui-1.8.5.custom.min.js'
p3744
asbasbasbag57
(g73
g59
NtRp3745
(dp3746
g62
(dp3747
sg71
g3715
sg64
(lp3748
g57
(g78
g59
NtRp3749
(dp3750
g62
(dp3751
sg71
g3745
sg64
(lp3752
g57
(g58
g59
NtRp3753
(dp3754
g62
(dp3755
g70
I4
ssg71
g3749
sg64
(lp3756
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/ui.jqgrid.css'
p3757
asbasbasbag57
(g73
g59
NtRp3758
(dp3759
g62
(dp3760
sg71
g3715
sg64
(lp3761
g57
(g78
g59
NtRp3762
(dp3763
g62
(dp3764
sg71
g3758
sg64
(lp3765
g57
(g58
g59
NtRp3766
(dp3767
g62
(dp3768
g70
I4
ssg71
g3762
sg64
(lp3769
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/i18n/grid.locale-en.js'
p3770
asbasbasbag57
(g73
g59
NtRp3771
(dp3772
g62
(dp3773
sg71
g3715
sg64
(lp3774
g57
(g78
g59
NtRp3775
(dp3776
g62
(dp3777
sg71
g3771
sg64
(lp3778
g57
(g58
g59
NtRp3779
(dp3780
g62
(dp3781
g70
I4
ssg71
g3775
sg64
(lp3782
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/jquery.jqGrid.min.js'
p3783
asbasbasbag57
(g73
g59
NtRp3784
(dp3785
g62
(dp3786
sg71
g3715
sg64
(lp3787
g57
(g78
g59
NtRp3788
(dp3789
g62
(dp3790
sg71
g3784
sg64
(lp3791
g57
(g58
g59
NtRp3792
(dp3793
g62
(dp3794
g70
I4
ssg71
g3788
sg64
(lp3795
S'/DEV_bootstrap_ch/static/plugin_wiki/slideshow/jquery.cycle.min.js'
p3796
asbasbasbag57
(g73
g59
NtRp3797
(dp3798
g62
(dp3799
sg71
g3715
sg64
(lp3800
g57
(g78
g59
NtRp3801
(dp3802
g62
(dp3803
sg71
g3797
sg64
(lp3804
g57
(g58
g59
NtRp3805
(dp3806
g62
(dp3807
g70
I4
ssg71
g3801
sg64
(lp3808
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.css'
p3809
asbasbasbag57
(g73
g59
NtRp3810
(dp3811
g62
(dp3812
sg71
g3715
sg64
(lp3813
g57
(g78
g59
NtRp3814
(dp3815
g62
(dp3816
sg71
g3810
sg64
(lp3817
g57
(g58
g59
NtRp3818
(dp3819
g62
(dp3820
g70
I4
ssg71
g3814
sg64
(lp3821
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.js'
p3822
asbasbasbag57
(g73
g59
NtRp3823
(dp3824
g62
(dp3825
sg71
g3715
sg64
(lp3826
g57
(g78
g59
NtRp3827
(dp3828
g62
(dp3829
sg71
g3823
sg64
(lp3830
g57
(g58
g59
NtRp3831
(dp3832
g62
(dp3833
g70
I4
ssg71
g3827
sg64
(lp3834
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.css'
p3835
asbasbasbag57
(g73
g59
NtRp3836
(dp3837
g62
(dp3838
sg71
g3715
sg64
(lp3839
g57
(g78
g59
NtRp3840
(dp3841
g62
(dp3842
sg71
g3836
sg64
(lp3843
g57
(g58
g59
NtRp3844
(dp3845
g62
(dp3846
g70
I4
ssg71
g3840
sg64
(lp3847
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.js'
p3848
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3849
(dp3850
g62
(dp3851
sg71
g3409
sg64
(lp3852
g57
(g78
g59
NtRp3853
(dp3854
g62
(dp3855
g82
g83
ssg71
g3849
sg64
(lp3856
S'flash'
p3857
asbag57
(g78
g59
NtRp3858
(dp3859
g62
(dp3860
g89
g90
ssg71
g3849
sg64
(lp3861
S':'
asbag57
(g78
g59
NtRp3862
(dp3863
g62
(dp3864
sg71
g3849
sg64
(lp3865
g57
(g58
g59
NtRp3866
(dp3867
g62
(dp3868
g70
I5
ssg71
g3862
sg64
(lp3869
S''
asbasbasbag57
(g73
g59
NtRp3870
(dp3871
g62
(dp3872
sg71
g3409
sg64
(lp3873
g57
(g78
g59
NtRp3874
(dp3875
g62
(dp3876
g82
g83
ssg71
g3870
sg64
(lp3877
S'generic_patterns'
p3878
asbag57
(g78
g59
NtRp3879
(dp3880
g62
(dp3881
g89
g90
ssg71
g3870
sg64
(lp3882
S':'
asbag57
(g78
g59
NtRp3883
(dp3884
g62
(dp3885
sg71
g3870
sg64
(lp3886
g57
(g58
g59
NtRp3887
(dp3888
g62
(dp3889
g70
I5
ssg71
g3883
sg64
(lp3890
g57
(g66
g59
NtRp3891
(dp3892
g62
(dp3893
g70
I4
ssg71
Nsg64
(lp3894
g57
(g73
g59
NtRp3895
(dp3896
g62
(dp3897
sg71
g3891
sg64
(lp3898
g57
(g78
g59
NtRp3899
(dp3900
g62
(dp3901
sg71
g3895
sg64
(lp3902
g57
(g58
g59
NtRp3903
(dp3904
g62
(dp3905
g70
I4
ssg71
g3899
sg64
(lp3906
S'*'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3907
(dp3908
g62
(dp3909
sg71
g3409
sg64
(lp3910
g57
(g78
g59
NtRp3911
(dp3912
g62
(dp3913
g82
g83
ssg71
g3907
sg64
(lp3914
S'google_analytics_id'
p3915
asbag57
(g78
g59
NtRp3916
(dp3917
g62
(dp3918
g89
g90
ssg71
g3907
sg64
(lp3919
S':'
asbag57
(g78
g59
NtRp3920
(dp3921
g62
(dp3922
sg71
g3907
sg64
(lp3923
g57
(g58
g59
NtRp3924
(dp3925
g62
(dp3926
g70
I5
ssg71
g3920
sg64
(lp3927
S'None'
p3928
asbasbasbag57
(g73
g59
NtRp3929
(dp3930
g62
(dp3931
sg71
g3409
sg64
(lp3932
g57
(g78
g59
NtRp3933
(dp3934
g62
(dp3935
g82
g83
ssg71
g3929
sg64
(lp3936
S'headers'
p3937
asbag57
(g78
g59
NtRp3938
(dp3939
g62
(dp3940
g89
g90
ssg71
g3929
sg64
(lp3941
S':'
asbag57
(g78
g59
NtRp3942
(dp3943
g62
(dp3944
sg71
g3929
sg64
(lp3945
g57
(g58
g59
NtRp3946
(dp3947
g62
(dp3948
g70
I5
ssg71
g3942
sg64
(lp3949
g57
(g66
g59
NtRp3950
(dp3951
g62
(dp3952
g70
I4
ssg71
Nsg64
(lp3953
g57
(g73
g59
NtRp3954
(dp3955
g62
(dp3956
sg71
g3950
sg64
(lp3957
g57
(g78
g59
NtRp3958
(dp3959
g62
(dp3960
g82
g83
ssg71
g3954
sg64
(lp3961
S'X-Powered-By'
p3962
asbag57
(g78
g59
NtRp3963
(dp3964
g62
(dp3965
g89
g90
ssg71
g3954
sg64
(lp3966
S':'
asbag57
(g78
g59
NtRp3967
(dp3968
g62
(dp3969
sg71
g3954
sg64
(lp3970
g57
(g58
g59
NtRp3971
(dp3972
g62
(dp3973
g70
I4
ssg71
g3967
sg64
(lp3974
S'web2py'
p3975
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3976
(dp3977
g62
(dp3978
sg71
g3409
sg64
(lp3979
g57
(g78
g59
NtRp3980
(dp3981
g62
(dp3982
g82
g83
ssg71
g3976
sg64
(lp3983
S'menu'
p3984
asbag57
(g78
g59
NtRp3985
(dp3986
g62
(dp3987
g89
g90
ssg71
g3976
sg64
(lp3988
S':'
asbag57
(g78
g59
NtRp3989
(dp3990
g62
(dp3991
sg71
g3976
sg64
(lp3992
g57
(g58
g59
NtRp3993
(dp3994
g62
(dp3995
g70
I5
ssg71
g3989
sg64
(lp3996
g57
(g66
g59
NtRp3997
(dp3998
g62
(dp3999
g70
I4
ssg71
Nsg64
(lp4000
g57
(g73
g59
NtRp4001
(dp4002
g62
(dp4003
sg71
g3997
sg64
(lp4004
g57
(g78
g59
NtRp4005
(dp4006
g62
(dp4007
sg71
g4001
sg64
(lp4008
g57
(g58
g59
NtRp4009
(dp4010
g62
(dp4011
g70
I4
ssg71
g4005
sg64
(lp4012
g57
(g66
g59
NtRp4013
(dp4014
g62
(dp4015
g70
I3
ssg71
Nsg64
(lp4016
g57
(g73
g59
NtRp4017
(dp4018
g62
(dp4019
sg71
g4013
sg64
(lp4020
g57
(g78
g59
NtRp4021
(dp4022
g62
(dp4023
sg71
g4017
sg64
(lp4024
g57
(g58
g59
NtRp4025
(dp4026
g62
(dp4027
g70
I3
ssg71
g4021
sg64
(lp4028
cgluon.languages
lazyT_unpickle
p4029
(S't\x04\x00\x00\x00Home'
tRp4030
asbasbasbag57
(g73
g59
NtRp4031
(dp4032
g62
(dp4033
sg71
g4013
sg64
(lp4034
g57
(g78
g59
NtRp4035
(dp4036
g62
(dp4037
sg71
g4031
sg64
(lp4038
g57
(g58
g59
NtRp4039
(dp4040
g62
(dp4041
g70
I3
ssg71
g4035
sg64
(lp4042
g100
asbasbasbag57
(g73
g59
NtRp4043
(dp4044
g62
(dp4045
sg71
g4013
sg64
(lp4046
g57
(g78
g59
NtRp4047
(dp4048
g62
(dp4049
sg71
g4043
sg64
(lp4050
g57
(g58
g59
NtRp4051
(dp4052
g62
(dp4053
g70
I3
ssg71
g4047
sg64
(lp4054
S'/DEV_bootstrap_ch/default/list_all_projects'
p4055
asbasbasbag57
(g73
g59
NtRp4056
(dp4057
g62
(dp4058
sg71
g4013
sg64
(lp4059
g57
(g78
g59
NtRp4060
(dp4061
g62
(dp4062
sg71
g4056
sg64
(lp4063
g57
(g58
g59
NtRp4064
(dp4065
g62
(dp4066
g70
I3
ssg71
g4060
sg64
(lp4067
g57
(g66
g59
NtRp4068
(dp4069
g62
(dp4070
g70
I2
ssg71
Nsg64
(lp4071
sbasbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp4072
(dp4073
g62
(dp4074
sg71
g3409
sg64
(lp4075
g57
(g78
g59
NtRp4076
(dp4077
g62
(dp4078
g82
g83
ssg71
g4072
sg64
(lp4079
S'meta'
p4080
asbag57
(g78
g59
NtRp4081
(dp4082
g62
(dp4083
g89
g90
ssg71
g4072
sg64
(lp4084
S':'
asbag57
(g78
g59
NtRp4085
(dp4086
g62
(dp4087
sg71
g4072
sg64
(lp4088
g57
(g58
g59
NtRp4089
(dp4090
g62
(dp4091
g70
I5
ssg71
g4085
sg64
(lp4092
g57
(g66
g59
NtRp4093
(dp4094
g62
(dp4095
g70
I4
ssg71
Nsg64
(lp4096
g57
(g73
g59
NtRp4097
(dp4098
g62
(dp4099
sg71
g4093
sg64
(lp4100
g57
(g78
g59
NtRp4101
(dp4102
g62
(dp4103
g82
g83
ssg71
g4097
sg64
(lp4104
S'author'
p4105
asbag57
(g78
g59
NtRp4106
(dp4107
g62
(dp4108
g89
g90
ssg71
g4097
sg64
(lp4109
S':'
asbag57
(g78
g59
NtRp4110
(dp4111
g62
(dp4112
sg71
g4097
sg64
(lp4113
g57
(g58
g59
NtRp4114
(dp4115
g62
(dp4116
g70
I4
ssg71
g4110
sg64
(lp4117
S'Vikram Pudi <vikram@iiit.ac.in>'
p4118
asbasbasbag57
(g73
g59
NtRp4119
(dp4120
g62
(dp4121
sg71
g4093
sg64
(lp4122
g57
(g78
g59
NtRp4123
(dp4124
g62
(dp4125
g82
g83
ssg71
g4119
sg64
(lp4126
S'copyright'
p4127
asbag57
(g78
g59
NtRp4128
(dp4129
g62
(dp4130
g89
g90
ssg71
g4119
sg64
(lp4131
S':'
asbag57
(g78
g59
NtRp4132
(dp4133
g62
(dp4134
sg71
g4119
sg64
(lp4135
g57
(g58
g59
NtRp4136
(dp4137
g62
(dp4138
g70
I4
ssg71
g4132
sg64
(lp4139
S'Copyright 2011'
p4140
asbasbasbag57
(g73
g59
NtRp4141
(dp4142
g62
(dp4143
sg71
g4093
sg64
(lp4144
g57
(g78
g59
NtRp4145
(dp4146
g62
(dp4147
g82
g83
ssg71
g4141
sg64
(lp4148
S'description'
p4149
asbag57
(g78
g59
NtRp4150
(dp4151
g62
(dp4152
g89
g90
ssg71
g4141
sg64
(lp4153
S':'
asbag57
(g78
g59
NtRp4154
(dp4155
g62
(dp4156
sg71
g4141
sg64
(lp4157
g57
(g58
g59
NtRp4158
(dp4159
g62
(dp4160
g70
I4
ssg71
g4154
sg64
(lp4161
S'Computational Core for Plant Metabolomics -- A project sanctioned by DBT, Govt. of India'
p4162
asbasbasbag57
(g73
g59
NtRp4163
(dp4164
g62
(dp4165
sg71
g4093
sg64
(lp4166
g57
(g78
g59
NtRp4167
(dp4168
g62
(dp4169
g82
g83
ssg71
g4163
sg64
(lp4170
S'generator'
p4171
asbag57
(g78
g59
NtRp4172
(dp4173
g62
(dp4174
g89
g90
ssg71
g4163
sg64
(lp4175
S':'
asbag57
(g78
g59
NtRp4176
(dp4177
g62
(dp4178
sg71
g4163
sg64
(lp4179
g57
(g58
g59
NtRp4180
(dp4181
g62
(dp4182
g70
I4
ssg71
g4176
sg64
(lp4183
S'Web2py Web Framework'
p4184
asbasbasbag57
(g73
g59
NtRp4185
(dp4186
g62
(dp4187
sg71
g4093
sg64
(lp4188
g57
(g78
g59
NtRp4189
(dp4190
g62
(dp4191
g82
g83
ssg71
g4185
sg64
(lp4192
S'keywords'
p4193
asbag57
(g78
g59
NtRp4194
(dp4195
g62
(dp4196
g89
g90
ssg71
g4185
sg64
(lp4197
S':'
asbag57
(g78
g59
NtRp4198
(dp4199
g62
(dp4200
sg71
g4185
sg64
(lp4201
g57
(g58
g59
NtRp4202
(dp4203
g62
(dp4204
g70
I4
ssg71
g4198
sg64
(lp4205
S'web2py, python, metabolome, metabolomics'
p4206
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4207
(dp4208
g62
(dp4209
sg71
g3409
sg64
(lp4210
g57
(g78
g59
NtRp4211
(dp4212
g62
(dp4213
g82
g83
ssg71
g4207
sg64
(lp4214
S'models_to_run'
p4215
asbag57
(g78
g59
NtRp4216
(dp4217
g62
(dp4218
g89
g90
ssg71
g4207
sg64
(lp4219
S':'
asbag57
(g78
g59
NtRp4220
(dp4221
g62
(dp4222
sg71
g4207
sg64
(lp4223
g57
(g58
g59
NtRp4224
(dp4225
g62
(dp4226
g70
I5
ssg71
g4220
sg64
(lp4227
g57
(g66
g59
NtRp4228
(dp4229
g62
(dp4230
g70
I4
ssg71
Nsg64
(lp4231
g57
(g73
g59
NtRp4232
(dp4233
g62
(dp4234
sg71
g4228
sg64
(lp4235
g57
(g78
g59
NtRp4236
(dp4237
g62
(dp4238
sg71
g4232
sg64
(lp4239
g57
(g58
g59
NtRp4240
(dp4241
g62
(dp4242
g70
I4
ssg71
g4236
sg64
(lp4243
S'^\\w+\\.py$'
p4244
asbasbasbag57
(g73
g59
NtRp4245
(dp4246
g62
(dp4247
sg71
g4228
sg64
(lp4248
g57
(g78
g59
NtRp4249
(dp4250
g62
(dp4251
sg71
g4245
sg64
(lp4252
g57
(g58
g59
NtRp4253
(dp4254
g62
(dp4255
g70
I4
ssg71
g4249
sg64
(lp4256
S'^default/\\w+\\.py$'
p4257
asbasbasbag57
(g73
g59
NtRp4258
(dp4259
g62
(dp4260
sg71
g4228
sg64
(lp4261
g57
(g78
g59
NtRp4262
(dp4263
g62
(dp4264
sg71
g4258
sg64
(lp4265
g57
(g58
g59
NtRp4266
(dp4267
g62
(dp4268
g70
I4
ssg71
g4262
sg64
(lp4269
S'^default/list_all_dev_projects/\\w+\\.py$'
p4270
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4271
(dp4272
g62
(dp4273
sg71
g3409
sg64
(lp4274
g57
(g78
g59
NtRp4275
(dp4276
g62
(dp4277
g82
g83
ssg71
g4271
sg64
(lp4278
S'postprocessing'
p4279
asbag57
(g78
g59
NtRp4280
(dp4281
g62
(dp4282
g89
g90
ssg71
g4271
sg64
(lp4283
S':'
asbag57
(g78
g59
NtRp4284
(dp4285
g62
(dp4286
sg71
g4271
sg64
(lp4287
g57
(g58
g59
NtRp4288
(dp4289
g62
(dp4290
g70
I5
ssg71
g4284
sg64
(lp4291
g57
(g66
g59
NtRp4292
(dp4293
g62
(dp4294
g70
I4
ssg71
Nsg64
(lp4295
sbasbasbasbag57
(g73
g59
NtRp4296
(dp4297
g62
(dp4298
sg71
g3409
sg64
(lp4299
g57
(g78
g59
NtRp4300
(dp4301
g62
(dp4302
g82
g83
ssg71
g4296
sg64
(lp4303
S'session_cookie_expires'
p4304
asbag57
(g78
g59
NtRp4305
(dp4306
g62
(dp4307
g89
g90
ssg71
g4296
sg64
(lp4308
S':'
asbag57
(g78
g59
NtRp4309
(dp4310
g62
(dp4311
sg71
g4296
sg64
(lp4312
g57
(g58
g59
NtRp4313
(dp4314
g62
(dp4315
g70
I5
ssg71
g4309
sg64
(lp4316
S'None'
p4317
asbasbasbag57
(g73
g59
NtRp4318
(dp4319
g62
(dp4320
sg71
g3409
sg64
(lp4321
g57
(g78
g59
NtRp4322
(dp4323
g62
(dp4324
g82
g83
ssg71
g4318
sg64
(lp4325
S'session_data_name'
p4326
asbag57
(g78
g59
NtRp4327
(dp4328
g62
(dp4329
g89
g90
ssg71
g4318
sg64
(lp4330
S':'
asbag57
(g78
g59
NtRp4331
(dp4332
g62
(dp4333
sg71
g4318
sg64
(lp4334
g57
(g58
g59
NtRp4335
(dp4336
g62
(dp4337
g70
I5
ssg71
g4331
sg64
(lp4338
S'session_data_dev_bootstrap_ch'
p4339
asbasbasbag57
(g73
g59
NtRp4340
(dp4341
g62
(dp4342
sg71
g3409
sg64
(lp4343
g57
(g78
g59
NtRp4344
(dp4345
g62
(dp4346
g82
g83
ssg71
g4340
sg64
(lp4347
S'session_file'
p4348
asbag57
(g78
g59
NtRp4349
(dp4350
g62
(dp4351
g89
g90
ssg71
g4340
sg64
(lp4352
S':'
asbag57
(g78
g59
NtRp4353
(dp4354
g62
(dp4355
sg71
g4340
sg64
(lp4356
g57
(g58
g59
NtRp4357
(dp4358
g62
(dp4359
g70
I5
ssg71
g4353
sg64
(lp4360
S"<open file '/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a', mode 'rb+' at 0x9073700>"
p4361
asbasbasbag57
(g73
g59
NtRp4362
(dp4363
g62
(dp4364
sg71
g3409
sg64
(lp4365
g57
(g78
g59
NtRp4366
(dp4367
g62
(dp4368
g82
g83
ssg71
g4362
sg64
(lp4369
S'session_filename'
p4370
asbag57
(g78
g59
NtRp4371
(dp4372
g62
(dp4373
g89
g90
ssg71
g4362
sg64
(lp4374
S':'
asbag57
(g78
g59
NtRp4375
(dp4376
g62
(dp4377
sg71
g4362
sg64
(lp4378
g57
(g58
g59
NtRp4379
(dp4380
g62
(dp4381
g70
I5
ssg71
g4375
sg64
(lp4382
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a'
p4383
asbasbasbag57
(g73
g59
NtRp4384
(dp4385
g62
(dp4386
sg71
g3409
sg64
(lp4387
g57
(g78
g59
NtRp4388
(dp4389
g62
(dp4390
g82
g83
ssg71
g4384
sg64
(lp4391
S'session_id'
p4392
asbag57
(g78
g59
NtRp4393
(dp4394
g62
(dp4395
g89
g90
ssg71
g4384
sg64
(lp4396
S':'
asbag57
(g78
g59
NtRp4397
(dp4398
g62
(dp4399
sg71
g4384
sg64
(lp4400
g57
(g58
g59
NtRp4401
(dp4402
g62
(dp4403
g70
I5
ssg71
g4397
sg64
(lp4404
g513
asbasbasbag57
(g73
g59
NtRp4405
(dp4406
g62
(dp4407
sg71
g3409
sg64
(lp4408
g57
(g78
g59
NtRp4409
(dp4410
g62
(dp4411
g82
g83
ssg71
g4405
sg64
(lp4412
S'session_id_name'
p4413
asbag57
(g78
g59
NtRp4414
(dp4415
g62
(dp4416
g89
g90
ssg71
g4405
sg64
(lp4417
S':'
asbag57
(g78
g59
NtRp4418
(dp4419
g62
(dp4420
sg71
g4405
sg64
(lp4421
g57
(g58
g59
NtRp4422
(dp4423
g62
(dp4424
g70
I5
ssg71
g4418
sg64
(lp4425
g3466
asbasbasbag57
(g73
g59
NtRp4426
(dp4427
g62
(dp4428
sg71
g3409
sg64
(lp4429
g57
(g78
g59
NtRp4430
(dp4431
g62
(dp4432
g82
g83
ssg71
g4426
sg64
(lp4433
S'session_locked'
p4434
asbag57
(g78
g59
NtRp4435
(dp4436
g62
(dp4437
g89
g90
ssg71
g4426
sg64
(lp4438
S':'
asbag57
(g78
g59
NtRp4439
(dp4440
g62
(dp4441
sg71
g4426
sg64
(lp4442
g57
(g58
g59
NtRp4443
(dp4444
g62
(dp4445
g70
I5
ssg71
g4439
sg64
(lp4446
g1829
asbasbasbag57
(g73
g59
NtRp4447
(dp4448
g62
(dp4449
sg71
g3409
sg64
(lp4450
g57
(g78
g59
NtRp4451
(dp4452
g62
(dp4453
g82
g83
ssg71
g4447
sg64
(lp4454
S'session_new'
p4455
asbag57
(g78
g59
NtRp4456
(dp4457
g62
(dp4458
g89
g90
ssg71
g4447
sg64
(lp4459
S':'
asbag57
(g78
g59
NtRp4460
(dp4461
g62
(dp4462
sg71
g4447
sg64
(lp4463
g57
(g58
g59
NtRp4464
(dp4465
g62
(dp4466
g70
I5
ssg71
g4460
sg64
(lp4467
g100
asbasbasbag57
(g73
g59
NtRp4468
(dp4469
g62
(dp4470
sg71
g3409
sg64
(lp4471
g57
(g78
g59
NtRp4472
(dp4473
g62
(dp4474
g82
g83
ssg71
g4468
sg64
(lp4475
S'session_storage_type'
p4476
asbag57
(g78
g59
NtRp4477
(dp4478
g62
(dp4479
g89
g90
ssg71
g4468
sg64
(lp4480
S':'
asbag57
(g78
g59
NtRp4481
(dp4482
g62
(dp4483
sg71
g4468
sg64
(lp4484
g57
(g58
g59
NtRp4485
(dp4486
g62
(dp4487
g70
I5
ssg71
g4481
sg64
(lp4488
g3282
asbasbasbag57
(g73
g59
NtRp4489
(dp4490
g62
(dp4491
sg71
g3409
sg64
(lp4492
g57
(g78
g59
NtRp4493
(dp4494
g62
(dp4495
g82
g83
ssg71
g4489
sg64
(lp4496
S'status'
p4497
asbag57
(g78
g59
NtRp4498
(dp4499
g62
(dp4500
g89
g90
ssg71
g4489
sg64
(lp4501
S':'
asbag57
(g78
g59
NtRp4502
(dp4503
g62
(dp4504
sg71
g4489
sg64
(lp4505
g57
(g58
g59
NtRp4506
(dp4507
g62
(dp4508
g70
I5
ssg71
g4502
sg64
(lp4509
S'200'
p4510
asbasbasbag57
(g73
g59
NtRp4511
(dp4512
g62
(dp4513
sg71
g3409
sg64
(lp4514
g57
(g78
g59
NtRp4515
(dp4516
g62
(dp4517
g82
g83
ssg71
g4511
sg64
(lp4518
S'subtitle'
p4519
asbag57
(g78
g59
NtRp4520
(dp4521
g62
(dp4522
g89
g90
ssg71
g4511
sg64
(lp4523
S':'
asbag57
(g78
g59
NtRp4524
(dp4525
g62
(dp4526
sg71
g4511
sg64
(lp4527
g57
(g58
g59
NtRp4528
(dp4529
g62
(dp4530
g70
I5
ssg71
g4524
sg64
(lp4531
g4029
(S's)\x00\x00\x00Computational Core for Plant Metabolomics'
tRp4532
asbasbasbag57
(g73
g59
NtRp4533
(dp4534
g62
(dp4535
sg71
g3409
sg64
(lp4536
g57
(g78
g59
NtRp4537
(dp4538
g62
(dp4539
g82
g83
ssg71
g4533
sg64
(lp4540
S'title'
p4541
asbag57
(g78
g59
NtRp4542
(dp4543
g62
(dp4544
g89
g90
ssg71
g4533
sg64
(lp4545
S':'
asbag57
(g78
g59
NtRp4546
(dp4547
g62
(dp4548
sg71
g4533
sg64
(lp4549
g57
(g58
g59
NtRp4550
(dp4551
g62
(dp4552
g70
I5
ssg71
g4546
sg64
(lp4553
g122
asbasbasbag57
(g73
g59
NtRp4554
(dp4555
g62
(dp4556
sg71
g3409
sg64
(lp4557
g57
(g78
g59
NtRp4558
(dp4559
g62
(dp4560
g82
g83
ssg71
g4554
sg64
(lp4561
S'view'
p4562
asbag57
(g78
g59
NtRp4563
(dp4564
g62
(dp4565
g89
g90
ssg71
g4554
sg64
(lp4566
S':'
asbag57
(g78
g59
NtRp4567
(dp4568
g62
(dp4569
sg71
g4554
sg64
(lp4570
g57
(g58
g59
NtRp4571
(dp4572
g62
(dp4573
g70
I5
ssg71
g4567
sg64
(lp4574
S'default/list_all_dev_projects.html'
p4575
asbasbasbasbasbsS'locals'
p4576
(dp4577
ssS'traceback'
p4578
S'Traceback (most recent call last):\n  File "/home/anil/Downloads/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 1148, in <module>\n  File "/home/anil/Downloads/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 292, in list_all_dev_projects\n    db.sample.experimentalist.default=auth.user.id\nAttributeError: \'NoneType\' object has no attribute \'id\'\n'
p4579
s.