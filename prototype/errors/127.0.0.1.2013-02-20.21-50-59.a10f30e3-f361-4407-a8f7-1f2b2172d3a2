(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> append() takes exactly 2 arguments (1 given)"
p3
sS'layer'
p4
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p5
sS'code'
p6
S'import rpy2.robjects as robjects\n# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL(\'default\',\'list_all_projects\'))\n    #redirect(URL(\'plugin_wiki\',\'page/home\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef authenticate(uid,pid,func):   \n   result = db(db.role.user == uid)(db.role.project == pid).select(db.role.ALL)\n   myroles = [role_list[int(k.role)] for k in result]\n   is_coordinator = db(db.project.project_coordinator == uid).select(db.project.ALL)\n   if func == \'roles\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'You must be a project co-ordinator to manage roles\'\n\treturn error  \n   if func == \'add_project\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'\'\n        return error\n   if func == \'add_sample\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'SignUp for  "Experimentalist Role" in this project to add a sample. Use Browser back button to navigate to Project View.\'\n        return error\n   if func == \'experimentalist\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You must be an experimentalist to add the biosource information of a sample\'\n        return error\n   if func == \'my_samples\':\n\tif  \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You are not authorized to view this page\'\n        return error\n\ndef basic_groups(pid):\n    """ creates the basic groups on general basis or id basis """\n    if not pid:\n        for i in role_list:\n\t   auth.add_group(i,i) \n    else:\n        pid_groups = [str(pid)+\'#\'+i for i in role_list]\n\tfor k in pid_groups:\n\t   auth.add_group(k,k)\n    return locals()\t   \n\n\ndef add_project():\n    error = authenticate(auth.user.id,\'\',\'add_project\')\n    form = SQLFORM(db.project,fields=[\'name\',\'code\',\'start_date\',\'project_description\',\'project_literature_reference\',\'project_journal_name\',\'project_publication_date\',\'project_pubmed_id\'],showid=False)\n    form.vars.project_coordinator = auth.user.id\n    if form.process().accepted:\n       response.flash =\'accepted\'\n       result = db(db.project.name == form.vars.name).select(db.project.ALL).first()\n       basic_groups(result.id)\n       db.role.insert(user=auth.user.id,project=result.id,role=6,approval_status=1,member_since=now)\n       redirect(URL(\'project_viewer\',args = form.vars.id))\n    elif form.errors:\n       response.flash = \'errors\'\n    return locals()\n\ndef remove_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """takes an id and removes the project """ \n    pid  = request.args(0)\n    pid_groups = [str(pid)+\'#\'+i for i in role_list]\n    for z in pid_groups:\n\tpgid = auth.id_group(z)\n\tauth.del_group(pgid)\n    del db.project[pid]\n    return locals()\n\ndef add_experiment():\n    grid = SQLFORM.grid(db.experiment)\n    return locals()\n\ndef new_affiliation():\n    form = SQLFORM(db.affiliation)\n    return locals()\n\ndef edit_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    crud.settings.update_next = URL(\'project_viewer\',args=request.args)\n    form=crud.update(db.project,request.args(0),deletable=False)\n    return locals();\n \n@auth.requires_login()\ndef project_viewer():\n    pid = request.args[-1]\n    project=db(db.project.id==pid).select(db.project.ALL).first()\n    cord = db(db.auth_user.id==project.project_coordinator).select(db.auth_user.ALL).first()\n    \n    if authenticate(auth.user.id,\'\',\'roles\') == \'\':\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'Grant Role\'),False,URL(\'roles\',args=project.id)),\n      (T(\'Edit Project\'),False,URL(\'edit_project\',args=project.id)),\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n    else :\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n      \n    if project.project_status == \'1\':\n      response.menu+= [\n      (T(\'Published Samples\'), False,URL(\'list_all_pub_samples\',args=(pid)),[])\n      ]\n    elif authenticate(auth.user.id,pid,\'add_sample\')==\'\':\n        response.menu+= [\n        (T(\'Samples\'), False,URL(\'my_samples\',args=(pid)),[\n        (T(\'My Samples\'), False,URL(\'my_samples\',args=(pid))),\n        ])\n        ]\n      \n    users=db(db.role.project==pid)(db.role.project == db.project.id)(db.role.user==db.auth_user.id).select(db.role.ALL,db.auth_user.ALL)\n    is_coordinator = \'\'\n    myroles = \'\'\n    if auth.user:\n      is_coordinator = db(db.project.id == pid)(db.project.project_coordinator == auth.user.id).select(db.project.ALL).first()\n      result = db(db.role.user == auth.user.id)(db.role.project == pid).select(db.role.ALL)\n      myroles = [role_list[int(k.role)] for k in result]\n      \n    return locals()\n\n\ndef add_sample():\n  """ creates a exp on an project basis and should continue to fill the bio source data """\n  """ available to the experimentalist """ \n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  if \'new\' in request.args:\n   pid = request.args[-3]\n  else:\n   pid = request.args(0)\n  error = authenticate(auth.user.id,pid,\'add_sample\') \n  form = SQLFORM(db.sample,fields=[\'name\',\'code\',\'description\',\'scientific_name\'],showid=False)\n#added a field project in sample table\n#added two more fields in form insert root/replica etc and scientific name\n  if form.validate():\n      i = db.sample.insert(experimentalist=auth.user.id,name=form.vars.name,code=form.vars.code ,description=form.vars.description,experiment=pid,scientific_name=form.vars.scientific_name,working_status=1,publication_status=0)\n      response.flash = \'sample has been created\'\n      redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',pid])) \n      # redirect to the sample creation \n  elif form.errors:\n      response.flash = \'Form has errors\'\n  return locals()\n\ndef sample_viewer():\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   i = request.args[-1]\n   if \'view\' in request.args: \n\tform = SQLFORM(db.sample, i,readonly =True,showid=False)\n   if \'edit\' in request.args: \n\tform = SQLFORM(db.sample, i,showid=False)\n   if form.process().accepted:\n\tresponse.flash = \'form accepted\'\n\tredirect(URL(\'list_all_dev_projects\',args = request.args[0:-3])) \n   elif form.errors:\n\tresponse.flash = \'form has errors\'\n   return dict(form=form)\n\ndef list_all_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'index\'), [])\n    #(T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    #(T(\'Project\'), False, URL(\'default\',\'list_all_projects\'), [(T(\'Add Project\'),False,URL(\'default\',\'add_project\'))])\n    ]\n    form=FORM(\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    form.elements(\'input[type=submit]\')[0]["_value"] = "Search"\n    if form.accepts(request,session):\n      redirect(URL(\'grid?keywords=tomato\')) \n    \n    #form=FORM(\'\',INPUT(_name=\'name\') ,INPUT(_type=\'submit\'))\n    #if form.process().accepted:\n      #redirect(URL(\'grid\')) \n    pub_projects = db(db.project.project_status == 1).select(db.project.ALL)\n    dev_projects = db(db.project.project_status == 0).select(db.project.ALL)\n    authenticated = \'no\'\n    if auth.user:\n     authenticated = authenticate(auth.user.id,\'\',\'add_project\')\n    pi = robjects.r[\'pi\']\n    return locals()\n\ndef grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.sample.id==db.biosource.sample_name))\n   #query=((db.project.project_status==0))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n   grid = SQLFORM.grid(query)\n   return locals() \n\ndef temp():\n   q1 = (db.project.project_status ==  0)\n   q2 = (db.sample.publication_status == True)\n   ck = {}\n   fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n   l1=[lambda row: A(\'View Post\',_href=URL("default","view",args=[row.id]))]\n   links={\'project\':l1}\n   grid = SQLFORM.smartgrid(db.project,ck,fields=fi,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n   return locals() \n\ndef list_all_pub_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    q1 = (db.project.project_status ==  1)\n    q2 = (db.sample.publication_status == True)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n    \trouter(request.args)\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=False,deletable=False,create = False,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n    \n    return locals()\n\ndef list_all_dev_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    db.sample.experimentalist.default=auth.user.id\n    db.sample.experiment.writable = False\n    q1 = (db.project.project_status ==  0)\n    q2 = (db.sample.experimentalist == auth.user.id)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.sample.publication_status,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.spectrophotometry.sample_name,db.raw_data_storage_information.sample_name]\n    edit_dict = {\'project\':False}\n    delete_dict = {\'project\':False}\n#Allow only one original sample to be added in an experiment others are replicates\n    addsample = True\n    if \'sample\' in request.args and \'new\' in request.args:\n         count = db(db.sample.experiment==request.args[-3]).count()\n         if(count>0):\n           db.sample.replica.default = \'replicate\'\n           db.sample.replica.requires=IS_IN_SET([\'replicate\',\'alicot\'])\n         else:\n           db.sample.replica.default = \'Original\'\n           db.sample.replica.writable = False\n           \n    create_dict = {\'project\':False,\'sample\':addsample}\n#Links for replicating samples  \n    args= request.args\n    l1=[lambda row: A(\'copy\'+str(row.id),_href=URL("default","replicate",args=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],row.id])),dict(header = \'name\',body = lambda row: A(\'copy\'+tes(row.id),_href=URL("default","replicate",args=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],row.id])))]\n    links={\'sample\':l1}\n#customized Views for certain forms using router   \n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n     \trouter(request.args)\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'raw_data_storage_information\']) \n    return locals()\n\n#gets table name and rowid as input and creates another row with same details as rowid recod has\ndef tes(a):\n    return str(0);\ndef replicate():\n    if db(db.template.user==auth.user.id).count() == 0:\n       db.template.insert(user=auth.user.id, sample=request.args[-1])\n    else:   \n       db(db.template.user == auth.user.id).update(sample=request.args[-1])\n    redirect(URL(\'list_all_dev_projects\',args=request.args[0:-1]))\n    #Unique fields take care\n    #product.update(sampleid=\'temp\')\n    return() \n\ndef my_samples():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """ all my samples in the project with permissions to edit delete publish/unpublish samples """\n    error = authenticate(auth.user.id,request.args(0),\'add_sample\') \n    l =  [\'project\',\'experiment.project\',request.args(0)]\n    if error == \'\':\n      redirect(URL(\'list_all_dev_projects\',args=l))\n    return locals()\n\ndef list_all_samples1():\n    proj_id = request.args(0)\n    pub_samples = db((db.sample.working_status == 1)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    dev_samples = db((db.sample.working_status == 0)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    return locals()\n\ndef view_published_samples():\n    proj_id = request.args(0)\n    return locals() \n\ndef router(l):\n\tif \'biosource\' in l:\n\t  redirect(URL(\'insert_biosource\',args = l))\n\telif \'plant_growth_condition\' in l:\n\t  redirect(URL(\'insert_pgc\',args = l))\n\telif \'treatments\' in l:\n\t  redirect(URL(\'insert_treatments\',args = l))\n\telif \'harvests\' in l:\n\t  redirect(URL(\'insert_harvests\',args = l))\n\telif \'extraction_preparation\' in l:\n\t  redirect(URL(\'insert_ep\',args = l))\n\telif \'gas_chromatography\' in l:\n\t  redirect(URL(\'insert_gc\',args = l))\n\telif \'liquid_chromatography\' in l:\n\t  redirect(URL(\'insert_lc\',args = l))\n\telif \'mass_spectroscopy\' in l:\n\t  redirect(URL(\'insert_ms\',args = l))\n        elif \'raw_data_storage_information\' in l:\n          redirect(URL(\'insert_raw_data\',args = l))\n\telif \'sample\' in l and \'view\' in l:\t\t\n\t  redirect(URL(\'sample\',args=l))\n        else:\n          return()\n\n\'\'\'\telif \'sample\' in l and \'new\' in l:\t\t\n\t  redirect(URL(\'add_sample\',args = l))\n\telif \'sample\' in l:\t\t\n\t  redirect(URL(\'sample_viewer\',args = l))\n\telif \'project\' in l:\n\t  redirect(URL(\'project_viewer\',args=l))\n\telse : \n\t  redirect(URL(\'index\'))\'\'\'\n\ndef list_all_pub_samples():\n#    proj_id = request.args(0)\n#    pub = request.args(1) # if pub == 1 show published samples otherwise non published samples\n#   pub_query = (db.sample.working_status == 1 and db.sample.project == proj_id)\n#   unpub_query = (db.sample.working_status == 0 and db.sample.project == proj_id)\n#   pquery_dict = {\'sample\':pub_query}\n#   nquery_dict = {\'sample\':unpub_query}\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#       router(request.args)\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#     \trouter(request.args)\n    \n    """an argument to display published and non-published samples"""\n    """ request.args(0) - project  , request.args(1) published"""\n\n    redirect(URL(\'list_all_pub_projects\',args=[\'project\',\'experiment.project\',request.args(0)]))\n    \ndef list_all_dev_samples():\n   \n    redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',request.args(0)]))\n    return locals()\n\ndef ajx_role():\n    """ an ajax call back which takes care of insert , update and delete in the roles table """\n    rid = request.args(1)\n    if request.args(0) == \'accept\':\n       row = db(db.role.id == rid).update(approval_status = 1)\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.add_membership(gid,result.user)\n    if request.args(0) == \'unblock\':\n       del db.role[rid] \n    if request.args(0) == \'block\':\n       row = db(db.role.id == rid).update(approval_status = 2)\n    if request.args(0) == \'delete\' or request.args(0) == \'deny\':\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.del_membership(gid,result.user)\n       del db.role[rid] \n    return locals()\n\ndef reg_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ takes an id for the project and registers """\n    import datetime\n    now = datetime.datetime.now()\n    """ already requested """\n    pid = request.args(0)\n    ptitle = db(db.project.id == pid).select(db.project.ALL).first()\n    form = SQLFORM(db.role,fields=[\'role\'],showid=False)\n    if form.validate():\n       requested = db(db.role.user == auth.user.id)(db.role.project == pid)(db.role.approval_status == 0)(db.role.role==form.vars.role).count()\n       if requested == 0: \n        db.role.insert(user=auth.user.id,approval_status=0,project=pid,member_since=now,role=form.vars.role)\n        response.flash = \'accepted\'\n       else:\n        response.flash = \'You already hold the applied role\' \n    return locals() \n\ndef ajx_publish():\n    """ an ajax call back which takes care of publication status """\n    eid = request.args(1)\n    if request.args(0) == \'publish\':\n     row = db(db.project.id == eid).update(project_status = "1")\n    elif request.args(0) == \'unpublish\':\n     row = db(db.project.id == eid).update(project_status = "0")\n    redirect(URL(\'project_viewer\',args = eid))\n    return locals() \n\ndef roles():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ complete interface for managing roles for a particular project"""\n    """ should be accessible to only project co-ordinators """\n    pid = request.args(0)\n    error = authenticate(auth.user.id,pid,\'roles\')\n    accepted = db(db.auth_user.id == db.role.user)(db.role.approval_status == 1)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    pending = db(db.auth_user.id == db.role.user)(db.role.approval_status == 0)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    blocked = db(db.auth_user.id == db.role.user)(db.role.approval_status == 2)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    return locals()\n   \ndef home_page():\n    """ home page for a user , shows list of projects he is working on and his past work """\n    uid = request.args(0)\n    #my roles \n    \n    roles = db(db.role.user == uid)(db.role.project == db.project.id).select(db.role.ALL,db.project.name) \n    myroles = [role_list[int(p.role.role)] for p in roles]\n    k = {}\n    """\n    is_coordinator = db(db.project.project_coordinator==uid).select(db.project.ALL)\n    coordinating_projects = [row.name for row in is_coordinator]\n    value=\'\'\n    for p in coordinating_projects:\n       value = value + \',\'+ p\n\t  \n    k[6] = value[1:] """\n    for row in roles:\n       if row.role.role not in k:\n          k[row.role.role] = row.project.name\n       else:\n          k[row.role.role] = k[row.role.role] + \',\' + row.project.name\n    com_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    incom_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    pub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == True)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    unpub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == False) (db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    for p in k:\n       list_projects = k[p].split(\',\')\n       proj = \'\' \n       for d in list_projects:\n          res = db(db.project.name == d).select(db.project.ALL).first()\n          cat = \'\'\n          if res:\n             cat = A(res.name,_href=URL(\'project_viewer\',args=res.id))\n          if proj == \'\':\n             proj=SPAN(cat)\n          else:\n           proj = SPAN(proj,\',\',cat)\n       k[p] = proj \n    return locals()\n\ndef download():\n    return response.download(request, db)\n\ndef insert_biosource():\n#prepopulating records  \n   if \'clear\' not in request.args:    \n    trows = db(db.template.user==auth.user.id).select()\n    count = db(db.template.user==auth.user.id).count()\n    if count > 0:\n     rows = db(db.biosource.sample_name==trows[0].sample).select()\n     count1 = db(db.biosource.sample_name==trows[0].sample).count()\n     if count1 > 0:\n      row = rows[0]\n      for fieldname in db.biosource.fields:\n       if fieldname!=\'id\': \n        db.biosource[fieldname].default=row[fieldname]\n   else : \n    request.args.pop()\n   #result = db(db.sample.id == request.args[-3]).select(db.sample.ALL).first()\n#  error = authenticate(auth.user.id,result.project,\'insert_biosource\')\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   redirect_args = request.args[0:-3]\n   form = SQLFORM(db.biosource)\n   if \'view\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],readonly = True,showid=False)\t  \n   elif \'edit\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],showid=False)\n   elif \'new\' in request.args:\n               db.biosource.sample_name.readable = False \n               hid = {}   \n\t       form=SQLFORM(db.biosource,showid=False)\n\t       form.vars.sample_name = request.args[-3]\n \t       redirect_args = request.args[0:-4]\n   i=1\n   f1=form[0][:i+2]\n   fs1=form[0][i+2:i+7]\n   f2=form[0][i+7:]\n   form[0]=TABLE(TABLE(f1),\n      FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n   if form.process().accepted:\n     redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n     response.flash="Inserted entry"\n   return locals()\n\ndef insert_pgc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.plant_growth_condition.sample_name==trows[0].sample).select()\n    count1 = db(db.plant_growth_condition.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.plant_growth_condition.fields:\n      if fieldname!=\'id\': \n       db.plant_growth_condition[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.plant_growth_condition) \n  if \'view\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.plant_growth_condition.sample_name.readable = False \n\tform=SQLFORM(db.plant_growth_condition,showid=False)\n        form.vars.sample_name = request.args[-3]\n\tredirect_args = request.args[0:-2]\t \n  i=1\n  fs1=form[0][:i+5]\n  fss1=form[0][i+5:i+9]\n  fss2=form[0][i+9:i+10]\n  fss3=form[0][i+10:i+15]\n  f2=form[0][i+15:i+18]\n  fs2=form[0][i+18:i+21]\n  fs3=form[0][i+21:i+27]\n  f3=form[0][i+27:]\n  t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n  t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n  t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n  t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n  form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n  if form.process().accepted:\n    redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n    response.flash="form accepted"\n# redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  else:\n    response.flsh="form has some errors"\n  return locals()\n\ndef insert_ep():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.extraction_preparation.sample_name==trows[0].sample).select()\n    count1 = db(db.extraction_preparation.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.extraction_preparation.fields:\n      if fieldname!=\'id\': \n       db.extraction_preparation[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.extraction_preparation.sample_name.readable=False\n       form=SQLFORM(db.extraction_preparation,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:i+8]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][i+8:i+12])))))\n  t2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][i+12:])))\n  form[0]=TABLE(FIELDSET(t1,t2))\n  if form.process().accepted:\n       response.flash="Inserted entry"\n       redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_treatments():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.treatments.sample_name==trows[0].sample).select()\n    count1 = db(db.treatments.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.treatments.fields:\n      if fieldname!=\'id\': \n       db.treatments[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.treatments.sample_name.readable=False\n       form=SQLFORM(db.treatments,showid=False)\n       form.vars.sample_name = request.args[-3] \n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n  form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_harvests():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.harvests.sample_name==trows[0].sample).select()\n    count1 = db(db.harvests.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.harvests.fields:\n      if fieldname!=\'id\': \n       db.harvests[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.harvests.sample_name.readable=False\n       form=SQLFORM(db.harvests,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\n  i=1\t \n  t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n  form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\t  \t\ndef insert_gc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.gas_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.gas_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.gas_chromatography.fields:\n      if fieldname!=\'id\': \n       db.gas_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n\tform=SQLFORM(db.gas_chromatography,request.args[-1],readonly = True,pload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n        form=SQLFORM(db.gas_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.gas_chromatography.sample_name.readable=False\n        redirect_args = request.args[0:-2]\t \n        form=SQLFORM(db.gas_chromatography,showid=False)\n        form.vars.sample_name = request.args[-3]\n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n\tresponse.flash="Inserted entry"\n\tredirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#       redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_lc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.liquid_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.liquid_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.liquid_chromatography.fields:\n      if fieldname!=\'id\': \n       db.liquid_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.liquid_chromatography)\n  if \'view\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n      db.liquid_chromatography.sample_name.readable=False\n      redirect_args = request.args[0:-2]\t \n      form=SQLFORM(db.liquid_chromatography,showid=False)\n      form.vars.sample_name = request.args[-3] \n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_ms():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.mass_spectroscopy.sample_name==trows[0].sample).select()\n    count1 = db(db.mass_spectroscopy.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.mass_spectroscopy.fields:\n      if fieldname!=\'id\': \n       db.mass_spectroscopy[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.mass_spectroscopy.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.mass_spectroscopy,showid=False)\n    form.vars.sample_name = request.args[-3]\n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n  t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n  t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n  t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n  form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_raw_data():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.raw_data_storage_information.sample_name==trows[0].sample).select()\n    count1 = db(db.raw_data_storage_information.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.raw_data_storage_information.fields:\n      if fieldname!=\'id\': \n       db.raw_data_storage_information[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.raw_data_storage_information.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.raw_data_storage_information,showid=False)\n    form.vars.sample_name = request.args[-3]\n    form.vars.email_id_of_person=auth.user.email \n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_spectrophotometry():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.spectrophotometry.sample_name==trows[0].sample).select()\n    count1 = db(db.spectrophotometry.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.spectrophotometry.fields:\n      if fieldname!=\'id\': \n       db.spectrophotometry[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.spectrophotometry.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.spectrophotometry,showid=False)\n    form.vars.sample_name = request.args[-3]\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n#def drop_tables():\n    #are you sure you want to do this?\n    #for t in [\'auth_user\',\'auth_group\', \'auth_membership\', \'auth_permission\', \'auth_event\',\'sample\',\'biosource\',\'affiliation\',\'project\',\'role\',\'template\',\'experiment\',\'project_meta\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'feedback\',\'sample_files\']:\n    #    db[t].drop()\n    # pass\n    #return \n\ndef show_feedback():\n    grid = SQLFORM.smartgrid(db.feedback)\n    return locals()\n\n \ndef post_feedback():\n    """ allows to post feedback to the table feedback """ \n    past_feeds = db(db.feedback.feedback_on == request.env.http_referer).select(db.feedback.feedback_body,db.feedback.id)\n    form = SQLFORM(db.feedback,fields=[\'feedback_body\'],labels={\'feedback_body\':\'Your feedback about this page\'})\n    feedback_by = \'\'\n    if form.validate():\n\tif auth.user:\n            feedback_by = auth.user.id\n        else:\n\t   feedback_by = \'\'\n\tdb.feedback.insert(feedback_on=request.env.http_referer,feedback_body=form.vars.feedback_body,feedback_by=feedback_by)\n\tresponse.flash = "feedback has been duly noted and will be taken care of "\n    return locals()\n\n\ndef user_viewer():\n   """shows the user details """\n   uid = request.args(0)\n   record = db.auth_user(uid)\n   form = SQLFORM(db.auth_user,record,readonly=True,showid=False,fields=[\'first_name\',\'last_name\',\'email\',\'affiliated_to\',\'phone\',\'mobile\',\'city\'])\n   return locals()\n\n\ndef dict_dump(obj,inp):\n  ans = \'<dl class="dl-horizontal">\'\n  for key in inp.keys():\n     add = \'<dt>\'+str(inp[key])+\'</dt>\'+\'<dd>\'+str(obj[key])+\'</dd>\'\n     ans = ans+add\n  return ans\t\n\n\ndef sample():\n  """gets all the information regarding a sample in a single page """\n  sid = request.args[-1]\n  sample = db(db.sample.id == sid).select(db.sample.ALL).first()\n  user = db(db.auth_user.id == sample.experimentalist).select(db.auth_user.ALL).first()\n  experiment = db(db.experiment.id == sample.experiment).select(db.experiment.ALL).first()\n  biosource = db(db.biosource.sample_name == sid).select(db.biosource.ALL)\n  plant_growth = db(db.plant_growth_condition.sample_name == sid).select(db.plant_growth_condition.ALL)\n  treatment = db(db.treatments.sample_name == sid).select(db.treatments.ALL)\n  harvest = db(db.harvests.sample_name == sid).select(db.harvests.ALL)\n  extraction_preparation = db(db.extraction_preparation.sample_name == sid).select(db.extraction_preparation.ALL)\n  gc = db(db.gas_chromatography.sample_name == sid).select(db.gas_chromatography.ALL)\n  lc = db(db.liquid_chromatography.sample_name == sid).select(db.liquid_chromatography.ALL)\n  ms = db(db.mass_spectroscopy.sample_name == sid).select(db.mass_spectroscopy.ALL)\n  raw_storage = db(db.raw_data_storage_information.sample_name == sid).select(db.raw_data_storage_information.ALL)\n  biosource_forms = [] #a list of forms\n  for each in biosource:\n\tform = SQLFORM(db.biosource,each.id,showid=False,readonly=True)\n\ti=1\n\tf1=form[0][:i+2]\n\tfs1=form[0][i+2:i+7]\n\tf2=form[0][i+7:]\n\tform[0]=TABLE(TABLE(f1),FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n\tbiosource_forms.append(form[0])\n        \n  pgc_forms = []\n  for each in plant_growth:\n     form = SQLFORM(db.plant_growth_condition,each.id,showid=False,readonly=True)\n     i=1\n     fs1=form[0][:i+5]\n     fss1=form[0][i+5:i+9]\n     fss2=form[0][i+9:i+10]\n     fss3=form[0][i+10:i+15]\n     f2=form[0][i+15:i+18]\n     fs2=form[0][i+18:i+21]\n     fs3=form[0][i+21:i+27]\n     f3=form[0][i+27:]\n     t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n     t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n     t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n     t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n     form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n     pgc_forms.append(form[0])\n  \n  treatment_forms = []\n  for each in treatment:\n     form = SQLFORM(db.treatments,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n     form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n\n\n  harvest_forms = []\n  for each in harvest:\n     form = SQLFORM(db.harvests,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n     form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n     harvest_forms.append(form[0])\n\n  gc_forms = []\n  for each in gc:\n     form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n     j=1\n     t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n     t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n     i=15\n     t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n     t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n     t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n     t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n     t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n     t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n     t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n     form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n\n     gc_forms.append(form[0])\n \n  lc_forms = []\n  \n  for each in lc:\n    form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n    j=1\n    t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n    t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n    i=15\n    t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n    t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n    t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n    t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n    t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n    t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n    form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n    lc_forms.append(form[0])\n \n  ms_forms = []\n  for each in ms:\n    form = SQLFORM(db.mass_spectroscopy,each.id,showid=False,readonly=True)\n    i=1\n    t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n    t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n    t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n    t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n    t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n    form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))  \n    ms_forms.append(form[0])\n\n  raw_forms = []\n  for each in raw_storage:\n     form = SQLFORM(db.raw_data_storage_information,each.id,showid=False,readonly=True)\n     raw_forms.append(form[0])\n\n\n  return locals() \n\n#def grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   #query=((db.sample.project==db.project.id)&(db.project.id>0))\n   #query=((db.project.id>0)&(db.sample.project==db.project.id)&((db.sample.id==db.biosource.sample_name)&(db.sample.id==db.plant_growth_condition.sample_name)))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n#   grid = SQLFORM.grid(query)\n#   return locals()\n\n\ndef search():\n    form=FORM(\'Your name:\',\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n      redirect(URL(\'sample\',args=form.vars.name)) \n    return locals()\n    \ndef multiple_files():\n   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """\n   """ per sample . takes id of the sample as the input """\n   sid = request.args(0)\n   sample = db(db.sample.id == sid).select().first() \n   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)\n   form = SQLFORM(db.sample_files)\n   form.vars.sample = sid\n   return locals()\n\n\n\nresponse._vars=response._caller(list_all_dev_projects)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.TypeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.TypeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.TypeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.TypeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.TypeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.TypeError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.TypeError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.TypeError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.TypeError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.TypeError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.TypeError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.TypeError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.TypeError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.TypeError object>"
p41
sS'args'
p42
S"('append() takes exactly 2 arguments (1 given)',)"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.TypeError object>'
p47
sS'__doc__'
p48
S"'Inappropriate argument type.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.TypeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S'append() takes exactly 2 arguments (1 given)'
p55
sS'request'
p56
ccopy_reg
_reconstructor
p57
(cgluon.html
BEAUTIFY
p58
c__builtin__
object
p59
NtRp60
(dp61
S'attributes'
p62
(dp63
sS'components'
p64
(lp65
g57
(cgluon.html
TABLE
p66
g59
NtRp67
(dp68
g62
(dp69
S'level'
p70
I5
ssS'parent'
p71
Nsg64
(lp72
g57
(cgluon.html
TR
p73
g59
NtRp74
(dp75
g62
(dp76
sg71
g67
sg64
(lp77
g57
(cgluon.html
TD
p78
g59
NtRp79
(dp80
g62
(dp81
S'_style'
p82
S'font-weight:bold;vertical-align:top'
p83
ssg71
g74
sg64
(lp84
S'ajax'
p85
asbag57
(g78
g59
NtRp86
(dp87
g62
(dp88
S'_valign'
p89
S'top'
p90
ssg71
g74
sg64
(lp91
S':'
asbag57
(g78
g59
NtRp92
(dp93
g62
(dp94
sg71
g74
sg64
(lp95
g57
(g58
g59
NtRp96
(dp97
g62
(dp98
g70
I5
ssg71
g92
sg64
(lp99
S'False'
p100
asbasbasbag57
(g73
g59
NtRp101
(dp102
g62
(dp103
sg71
g67
sg64
(lp104
g57
(g78
g59
NtRp105
(dp106
g62
(dp107
g82
g83
ssg71
g101
sg64
(lp108
S'application'
p109
asbag57
(g78
g59
NtRp110
(dp111
g62
(dp112
g89
g90
ssg71
g101
sg64
(lp113
S':'
asbag57
(g78
g59
NtRp114
(dp115
g62
(dp116
sg71
g101
sg64
(lp117
g57
(g58
g59
NtRp118
(dp119
g62
(dp120
g70
I5
ssg71
g114
sg64
(lp121
S'DEV_bootstrap_ch'
p122
asbasbasbag57
(g73
g59
NtRp123
(dp124
g62
(dp125
sg71
g67
sg64
(lp126
g57
(g78
g59
NtRp127
(dp128
g62
(dp129
g82
g83
ssg71
g123
sg64
(lp130
g42
asbag57
(g78
g59
NtRp131
(dp132
g62
(dp133
g89
g90
ssg71
g123
sg64
(lp134
S':'
asbag57
(g78
g59
NtRp135
(dp136
g62
(dp137
sg71
g123
sg64
(lp138
g57
(g58
g59
NtRp139
(dp140
g62
(dp141
g70
I5
ssg71
g135
sg64
(lp142
g57
(g66
g59
NtRp143
(dp144
g62
(dp145
g70
I4
ssg71
Nsg64
(lp146
g57
(g73
g59
NtRp147
(dp148
g62
(dp149
sg71
g143
sg64
(lp150
g57
(g78
g59
NtRp151
(dp152
g62
(dp153
sg71
g147
sg64
(lp154
g57
(g58
g59
NtRp155
(dp156
g62
(dp157
g70
I4
ssg71
g151
sg64
(lp158
S'project'
p159
asbasbasbag57
(g73
g59
NtRp160
(dp161
g62
(dp162
sg71
g143
sg64
(lp163
g57
(g78
g59
NtRp164
(dp165
g62
(dp166
sg71
g160
sg64
(lp167
g57
(g58
g59
NtRp168
(dp169
g62
(dp170
g70
I4
ssg71
g164
sg64
(lp171
S'view'
p172
asbasbasbag57
(g73
g59
NtRp173
(dp174
g62
(dp175
sg71
g143
sg64
(lp176
g57
(g78
g59
NtRp177
(dp178
g62
(dp179
sg71
g173
sg64
(lp180
g57
(g58
g59
NtRp181
(dp182
g62
(dp183
g70
I4
ssg71
g177
sg64
(lp184
S'project'
p185
asbasbasbag57
(g73
g59
NtRp186
(dp187
g62
(dp188
sg71
g143
sg64
(lp189
g57
(g78
g59
NtRp190
(dp191
g62
(dp192
sg71
g186
sg64
(lp193
g57
(g58
g59
NtRp194
(dp195
g62
(dp196
g70
I4
ssg71
g190
sg64
(lp197
S'1'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp198
(dp199
g62
(dp200
sg71
g67
sg64
(lp201
g57
(g78
g59
NtRp202
(dp203
g62
(dp204
g82
g83
ssg71
g198
sg64
(lp205
S'body'
p206
asbag57
(g78
g59
NtRp207
(dp208
g62
(dp209
g89
g90
ssg71
g198
sg64
(lp210
S':'
asbag57
(g78
g59
NtRp211
(dp212
g62
(dp213
sg71
g198
sg64
(lp214
g57
(g58
g59
NtRp215
(dp216
g62
(dp217
g70
I5
ssg71
g211
sg64
(lp218
S'<cStringIO.StringO object at 0xae68ad40>'
p219
asbasbasbag57
(g73
g59
NtRp220
(dp221
g62
(dp222
sg71
g67
sg64
(lp223
g57
(g78
g59
NtRp224
(dp225
g62
(dp226
g82
g83
ssg71
g220
sg64
(lp227
S'cid'
p228
asbag57
(g78
g59
NtRp229
(dp230
g62
(dp231
g89
g90
ssg71
g220
sg64
(lp232
S':'
asbag57
(g78
g59
NtRp233
(dp234
g62
(dp235
sg71
g220
sg64
(lp236
g57
(g58
g59
NtRp237
(dp238
g62
(dp239
g70
I5
ssg71
g233
sg64
(lp240
S'None'
p241
asbasbasbag57
(g73
g59
NtRp242
(dp243
g62
(dp244
sg71
g67
sg64
(lp245
g57
(g78
g59
NtRp246
(dp247
g62
(dp248
g82
g83
ssg71
g242
sg64
(lp249
S'client'
p250
asbag57
(g78
g59
NtRp251
(dp252
g62
(dp253
g89
g90
ssg71
g242
sg64
(lp254
S':'
asbag57
(g78
g59
NtRp255
(dp256
g62
(dp257
sg71
g242
sg64
(lp258
g57
(g58
g59
NtRp259
(dp260
g62
(dp261
g70
I5
ssg71
g255
sg64
(lp262
S'127.0.0.1'
p263
asbasbasbag57
(g73
g59
NtRp264
(dp265
g62
(dp266
sg71
g67
sg64
(lp267
g57
(g78
g59
NtRp268
(dp269
g62
(dp270
g82
g83
ssg71
g264
sg64
(lp271
S'controller'
p272
asbag57
(g78
g59
NtRp273
(dp274
g62
(dp275
g89
g90
ssg71
g264
sg64
(lp276
S':'
asbag57
(g78
g59
NtRp277
(dp278
g62
(dp279
sg71
g264
sg64
(lp280
g57
(g58
g59
NtRp281
(dp282
g62
(dp283
g70
I5
ssg71
g277
sg64
(lp284
S'default'
p285
asbasbasbag57
(g73
g59
NtRp286
(dp287
g62
(dp288
sg71
g67
sg64
(lp289
g57
(g78
g59
NtRp290
(dp291
g62
(dp292
g82
g83
ssg71
g286
sg64
(lp293
S'cookies'
p294
asbag57
(g78
g59
NtRp295
(dp296
g62
(dp297
g89
g90
ssg71
g286
sg64
(lp298
S':'
asbag57
(g78
g59
NtRp299
(dp300
g62
(dp301
sg71
g286
sg64
(lp302
g57
(g58
g59
NtRp303
(dp304
g62
(dp305
g70
I5
ssg71
g299
sg64
(lp306
g57
(g66
g59
NtRp307
(dp308
g62
(dp309
g70
I4
ssg71
Nsg64
(lp310
g57
(g73
g59
NtRp311
(dp312
g62
(dp313
sg71
g307
sg64
(lp314
g57
(g78
g59
NtRp315
(dp316
g62
(dp317
g82
g83
ssg71
g311
sg64
(lp318
S'session_id_dev_bootstrap_ch'
p319
asbag57
(g78
g59
NtRp320
(dp321
g62
(dp322
g89
g90
ssg71
g311
sg64
(lp323
S':'
asbag57
(g78
g59
NtRp324
(dp325
g62
(dp326
sg71
g311
sg64
(lp327
g57
(g58
g59
NtRp328
(dp329
g62
(dp330
g70
I4
ssg71
g324
sg64
(lp331
S'127.0.0.1-270b038b-df00-4d5c-949a-e87692880510'
p332
ag57
(g66
g59
NtRp333
(dp334
g62
(dp335
g70
I3
ssg71
Nsg64
(lp336
g57
(g73
g59
NtRp337
(dp338
g62
(dp339
sg71
g333
sg64
(lp340
g57
(g78
g59
NtRp341
(dp342
g62
(dp343
g82
g83
ssg71
g337
sg64
(lp344
S'comment'
p345
asbag57
(g78
g59
NtRp346
(dp347
g62
(dp348
g89
g90
ssg71
g337
sg64
(lp349
S':'
asbag57
(g78
g59
NtRp350
(dp351
g62
(dp352
sg71
g337
sg64
(lp353
g57
(g58
g59
NtRp354
(dp355
g62
(dp356
g70
I3
ssg71
g350
sg64
(lp357
S''
asbasbasbag57
(g73
g59
NtRp358
(dp359
g62
(dp360
sg71
g333
sg64
(lp361
g57
(g78
g59
NtRp362
(dp363
g62
(dp364
g82
g83
ssg71
g358
sg64
(lp365
S'domain'
p366
asbag57
(g78
g59
NtRp367
(dp368
g62
(dp369
g89
g90
ssg71
g358
sg64
(lp370
S':'
asbag57
(g78
g59
NtRp371
(dp372
g62
(dp373
sg71
g358
sg64
(lp374
g57
(g58
g59
NtRp375
(dp376
g62
(dp377
g70
I3
ssg71
g371
sg64
(lp378
S''
asbasbasbag57
(g73
g59
NtRp379
(dp380
g62
(dp381
sg71
g333
sg64
(lp382
g57
(g78
g59
NtRp383
(dp384
g62
(dp385
g82
g83
ssg71
g379
sg64
(lp386
S'expires'
p387
asbag57
(g78
g59
NtRp388
(dp389
g62
(dp390
g89
g90
ssg71
g379
sg64
(lp391
S':'
asbag57
(g78
g59
NtRp392
(dp393
g62
(dp394
sg71
g379
sg64
(lp395
g57
(g58
g59
NtRp396
(dp397
g62
(dp398
g70
I3
ssg71
g392
sg64
(lp399
S''
asbasbasbag57
(g73
g59
NtRp400
(dp401
g62
(dp402
sg71
g333
sg64
(lp403
g57
(g78
g59
NtRp404
(dp405
g62
(dp406
g82
g83
ssg71
g400
sg64
(lp407
S'httponly'
p408
asbag57
(g78
g59
NtRp409
(dp410
g62
(dp411
g89
g90
ssg71
g400
sg64
(lp412
S':'
asbag57
(g78
g59
NtRp413
(dp414
g62
(dp415
sg71
g400
sg64
(lp416
g57
(g58
g59
NtRp417
(dp418
g62
(dp419
g70
I3
ssg71
g413
sg64
(lp420
S''
asbasbasbag57
(g73
g59
NtRp421
(dp422
g62
(dp423
sg71
g333
sg64
(lp424
g57
(g78
g59
NtRp425
(dp426
g62
(dp427
g82
g83
ssg71
g421
sg64
(lp428
S'max-age'
p429
asbag57
(g78
g59
NtRp430
(dp431
g62
(dp432
g89
g90
ssg71
g421
sg64
(lp433
S':'
asbag57
(g78
g59
NtRp434
(dp435
g62
(dp436
sg71
g421
sg64
(lp437
g57
(g58
g59
NtRp438
(dp439
g62
(dp440
g70
I3
ssg71
g434
sg64
(lp441
S''
asbasbasbag57
(g73
g59
NtRp442
(dp443
g62
(dp444
sg71
g333
sg64
(lp445
g57
(g78
g59
NtRp446
(dp447
g62
(dp448
g82
g83
ssg71
g442
sg64
(lp449
S'path'
p450
asbag57
(g78
g59
NtRp451
(dp452
g62
(dp453
g89
g90
ssg71
g442
sg64
(lp454
S':'
asbag57
(g78
g59
NtRp455
(dp456
g62
(dp457
sg71
g442
sg64
(lp458
g57
(g58
g59
NtRp459
(dp460
g62
(dp461
g70
I3
ssg71
g455
sg64
(lp462
S''
asbasbasbag57
(g73
g59
NtRp463
(dp464
g62
(dp465
sg71
g333
sg64
(lp466
g57
(g78
g59
NtRp467
(dp468
g62
(dp469
g82
g83
ssg71
g463
sg64
(lp470
S'secure'
p471
asbag57
(g78
g59
NtRp472
(dp473
g62
(dp474
g89
g90
ssg71
g463
sg64
(lp475
S':'
asbag57
(g78
g59
NtRp476
(dp477
g62
(dp478
sg71
g463
sg64
(lp479
g57
(g58
g59
NtRp480
(dp481
g62
(dp482
g70
I3
ssg71
g476
sg64
(lp483
S''
asbasbasbag57
(g73
g59
NtRp484
(dp485
g62
(dp486
sg71
g333
sg64
(lp487
g57
(g78
g59
NtRp488
(dp489
g62
(dp490
g82
g83
ssg71
g484
sg64
(lp491
S'version'
p492
asbag57
(g78
g59
NtRp493
(dp494
g62
(dp495
g89
g90
ssg71
g484
sg64
(lp496
S':'
asbag57
(g78
g59
NtRp497
(dp498
g62
(dp499
sg71
g484
sg64
(lp500
g57
(g58
g59
NtRp501
(dp502
g62
(dp503
g70
I3
ssg71
g497
sg64
(lp504
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp505
(dp506
g62
(dp507
sg71
g67
sg64
(lp508
g57
(g78
g59
NtRp509
(dp510
g62
(dp511
g82
g83
ssg71
g505
sg64
(lp512
S'env'
p513
asbag57
(g78
g59
NtRp514
(dp515
g62
(dp516
g89
g90
ssg71
g505
sg64
(lp517
S':'
asbag57
(g78
g59
NtRp518
(dp519
g62
(dp520
sg71
g505
sg64
(lp521
g57
(g58
g59
NtRp522
(dp523
g62
(dp524
g70
I5
ssg71
g518
sg64
(lp525
g57
(g66
g59
NtRp526
(dp527
g62
(dp528
g70
I4
ssg71
Nsg64
(lp529
g57
(g73
g59
NtRp530
(dp531
g62
(dp532
sg71
g526
sg64
(lp533
g57
(g78
g59
NtRp534
(dp535
g62
(dp536
g82
g83
ssg71
g530
sg64
(lp537
S'app_folders'
p538
asbag57
(g78
g59
NtRp539
(dp540
g62
(dp541
g89
g90
ssg71
g530
sg64
(lp542
S':'
asbag57
(g78
g59
NtRp543
(dp544
g62
(dp545
sg71
g530
sg64
(lp546
g57
(g58
g59
NtRp547
(dp548
g62
(dp549
g70
I4
ssg71
g543
sg64
(lp550
S"set(['/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/'])"
p551
asbasbasbag57
(g73
g59
NtRp552
(dp553
g62
(dp554
sg71
g526
sg64
(lp555
g57
(g78
g59
NtRp556
(dp557
g62
(dp558
g82
g83
ssg71
g552
sg64
(lp559
S'applications_parent'
p560
asbag57
(g78
g59
NtRp561
(dp562
g62
(dp563
g89
g90
ssg71
g552
sg64
(lp564
S':'
asbag57
(g78
g59
NtRp565
(dp566
g62
(dp567
sg71
g552
sg64
(lp568
g57
(g58
g59
NtRp569
(dp570
g62
(dp571
g70
I4
ssg71
g565
sg64
(lp572
S'/home/anil/bootstrap/web2py'
p573
asbasbasbag57
(g73
g59
NtRp574
(dp575
g62
(dp576
sg71
g526
sg64
(lp577
g57
(g78
g59
NtRp578
(dp579
g62
(dp580
g82
g83
ssg71
g574
sg64
(lp581
S'cmd_args'
p582
asbag57
(g78
g59
NtRp583
(dp584
g62
(dp585
g89
g90
ssg71
g574
sg64
(lp586
S':'
asbag57
(g78
g59
NtRp587
(dp588
g62
(dp589
sg71
g574
sg64
(lp590
g57
(g58
g59
NtRp591
(dp592
g62
(dp593
g70
I4
ssg71
g587
sg64
(lp594
g57
(g66
g59
NtRp595
(dp596
g62
(dp597
g70
I3
ssg71
Nsg64
(lp598
sbasbasbasbag57
(g73
g59
NtRp599
(dp600
g62
(dp601
sg71
g526
sg64
(lp602
g57
(g78
g59
NtRp603
(dp604
g62
(dp605
g82
g83
ssg71
g599
sg64
(lp606
S'cmd_options'
p607
asbag57
(g78
g59
NtRp608
(dp609
g62
(dp610
g89
g90
ssg71
g599
sg64
(lp611
S':'
asbag57
(g78
g59
NtRp612
(dp613
g62
(dp614
sg71
g599
sg64
(lp615
g57
(g58
g59
NtRp616
(dp617
g62
(dp618
g70
I4
ssg71
g612
sg64
(lp619
S"<Values at 0xa3b8fcc: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/bootstrap/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p620
asbasbasbag57
(g73
g59
NtRp621
(dp622
g62
(dp623
sg71
g526
sg64
(lp624
g57
(g78
g59
NtRp625
(dp626
g62
(dp627
g82
g83
ssg71
g621
sg64
(lp628
S'db_sessions'
p629
asbag57
(g78
g59
NtRp630
(dp631
g62
(dp632
g89
g90
ssg71
g621
sg64
(lp633
S':'
asbag57
(g78
g59
NtRp634
(dp635
g62
(dp636
sg71
g621
sg64
(lp637
g57
(g58
g59
NtRp638
(dp639
g62
(dp640
g70
I4
ssg71
g634
sg64
(lp641
S'set([])'
p642
asbasbasbag57
(g73
g59
NtRp643
(dp644
g62
(dp645
sg71
g526
sg64
(lp646
g57
(g78
g59
NtRp647
(dp648
g62
(dp649
g82
g83
ssg71
g643
sg64
(lp650
S'debugging'
p651
asbag57
(g78
g59
NtRp652
(dp653
g62
(dp654
g89
g90
ssg71
g643
sg64
(lp655
S':'
asbag57
(g78
g59
NtRp656
(dp657
g62
(dp658
sg71
g643
sg64
(lp659
g57
(g58
g59
NtRp660
(dp661
g62
(dp662
g70
I4
ssg71
g656
sg64
(lp663
g100
asbasbasbag57
(g73
g59
NtRp664
(dp665
g62
(dp666
sg71
g526
sg64
(lp667
g57
(g78
g59
NtRp668
(dp669
g62
(dp670
g82
g83
ssg71
g664
sg64
(lp671
S'gluon_parent'
p672
asbag57
(g78
g59
NtRp673
(dp674
g62
(dp675
g89
g90
ssg71
g664
sg64
(lp676
S':'
asbag57
(g78
g59
NtRp677
(dp678
g62
(dp679
sg71
g664
sg64
(lp680
g57
(g58
g59
NtRp681
(dp682
g62
(dp683
g70
I4
ssg71
g677
sg64
(lp684
S'/home/anil/bootstrap/web2py'
p685
asbasbasbag57
(g73
g59
NtRp686
(dp687
g62
(dp688
sg71
g526
sg64
(lp689
g57
(g78
g59
NtRp690
(dp691
g62
(dp692
g82
g83
ssg71
g686
sg64
(lp693
S'http_accept'
p694
asbag57
(g78
g59
NtRp695
(dp696
g62
(dp697
g89
g90
ssg71
g686
sg64
(lp698
S':'
asbag57
(g78
g59
NtRp699
(dp700
g62
(dp701
sg71
g686
sg64
(lp702
g57
(g58
g59
NtRp703
(dp704
g62
(dp705
g70
I4
ssg71
g699
sg64
(lp706
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p707
asbasbasbag57
(g73
g59
NtRp708
(dp709
g62
(dp710
sg71
g526
sg64
(lp711
g57
(g78
g59
NtRp712
(dp713
g62
(dp714
g82
g83
ssg71
g708
sg64
(lp715
S'http_accept_charset'
p716
asbag57
(g78
g59
NtRp717
(dp718
g62
(dp719
g89
g90
ssg71
g708
sg64
(lp720
S':'
asbag57
(g78
g59
NtRp721
(dp722
g62
(dp723
sg71
g708
sg64
(lp724
g57
(g58
g59
NtRp725
(dp726
g62
(dp727
g70
I4
ssg71
g721
sg64
(lp728
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p729
asbasbasbag57
(g73
g59
NtRp730
(dp731
g62
(dp732
sg71
g526
sg64
(lp733
g57
(g78
g59
NtRp734
(dp735
g62
(dp736
g82
g83
ssg71
g730
sg64
(lp737
S'http_accept_encoding'
p738
asbag57
(g78
g59
NtRp739
(dp740
g62
(dp741
g89
g90
ssg71
g730
sg64
(lp742
S':'
asbag57
(g78
g59
NtRp743
(dp744
g62
(dp745
sg71
g730
sg64
(lp746
g57
(g58
g59
NtRp747
(dp748
g62
(dp749
g70
I4
ssg71
g743
sg64
(lp750
S'gzip,deflate,sdch'
p751
asbasbasbag57
(g73
g59
NtRp752
(dp753
g62
(dp754
sg71
g526
sg64
(lp755
g57
(g78
g59
NtRp756
(dp757
g62
(dp758
g82
g83
ssg71
g752
sg64
(lp759
S'http_accept_language'
p760
asbag57
(g78
g59
NtRp761
(dp762
g62
(dp763
g89
g90
ssg71
g752
sg64
(lp764
S':'
asbag57
(g78
g59
NtRp765
(dp766
g62
(dp767
sg71
g752
sg64
(lp768
g57
(g58
g59
NtRp769
(dp770
g62
(dp771
g70
I4
ssg71
g765
sg64
(lp772
S'en-US,en;q=0.8'
p773
asbasbasbag57
(g73
g59
NtRp774
(dp775
g62
(dp776
sg71
g526
sg64
(lp777
g57
(g78
g59
NtRp778
(dp779
g62
(dp780
g82
g83
ssg71
g774
sg64
(lp781
S'http_connection'
p782
asbag57
(g78
g59
NtRp783
(dp784
g62
(dp785
g89
g90
ssg71
g774
sg64
(lp786
S':'
asbag57
(g78
g59
NtRp787
(dp788
g62
(dp789
sg71
g774
sg64
(lp790
g57
(g58
g59
NtRp791
(dp792
g62
(dp793
g70
I4
ssg71
g787
sg64
(lp794
S'keep-alive'
p795
asbasbasbag57
(g73
g59
NtRp796
(dp797
g62
(dp798
sg71
g526
sg64
(lp799
g57
(g78
g59
NtRp800
(dp801
g62
(dp802
g82
g83
ssg71
g796
sg64
(lp803
S'http_cookie'
p804
asbag57
(g78
g59
NtRp805
(dp806
g62
(dp807
g89
g90
ssg71
g796
sg64
(lp808
S':'
asbag57
(g78
g59
NtRp809
(dp810
g62
(dp811
sg71
g796
sg64
(lp812
g57
(g58
g59
NtRp813
(dp814
g62
(dp815
g70
I4
ssg71
g809
sg64
(lp816
S'session_id_dev_bootstrap_ch=127.0.0.1-270b038b-df00-4d5c-949a-e87692880510'
p817
asbasbasbag57
(g73
g59
NtRp818
(dp819
g62
(dp820
sg71
g526
sg64
(lp821
g57
(g78
g59
NtRp822
(dp823
g62
(dp824
g82
g83
ssg71
g818
sg64
(lp825
S'http_host'
p826
asbag57
(g78
g59
NtRp827
(dp828
g62
(dp829
g89
g90
ssg71
g818
sg64
(lp830
S':'
asbag57
(g78
g59
NtRp831
(dp832
g62
(dp833
sg71
g818
sg64
(lp834
g57
(g58
g59
NtRp835
(dp836
g62
(dp837
g70
I4
ssg71
g831
sg64
(lp838
S'127.0.0.1:8000'
p839
asbasbasbag57
(g73
g59
NtRp840
(dp841
g62
(dp842
sg71
g526
sg64
(lp843
g57
(g78
g59
NtRp844
(dp845
g62
(dp846
g82
g83
ssg71
g840
sg64
(lp847
S'http_referer'
p848
asbag57
(g78
g59
NtRp849
(dp850
g62
(dp851
g89
g90
ssg71
g840
sg64
(lp852
S':'
asbag57
(g78
g59
NtRp853
(dp854
g62
(dp855
sg71
g840
sg64
(lp856
g57
(g58
g59
NtRp857
(dp858
g62
(dp859
g70
I4
ssg71
g853
sg64
(lp860
S'http://127.0.0.1:8000/DEV_bootstrap_ch/default/list_all_dev_projects/project/experiment.project/1/sample.experiment/1?_signature=7ef83f1a1fbc1478046ec45b38081f44f469294d'
p861
asbasbasbag57
(g73
g59
NtRp862
(dp863
g62
(dp864
sg71
g526
sg64
(lp865
g57
(g78
g59
NtRp866
(dp867
g62
(dp868
g82
g83
ssg71
g862
sg64
(lp869
S'http_user_agent'
p870
asbag57
(g78
g59
NtRp871
(dp872
g62
(dp873
g89
g90
ssg71
g862
sg64
(lp874
S':'
asbag57
(g78
g59
NtRp875
(dp876
g62
(dp877
sg71
g862
sg64
(lp878
g57
(g58
g59
NtRp879
(dp880
g62
(dp881
g70
I4
ssg71
g875
sg64
(lp882
S'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'
p883
asbasbasbag57
(g73
g59
NtRp884
(dp885
g62
(dp886
sg71
g526
sg64
(lp887
g57
(g78
g59
NtRp888
(dp889
g62
(dp890
g82
g83
ssg71
g884
sg64
(lp891
S'is_jython'
p892
asbag57
(g78
g59
NtRp893
(dp894
g62
(dp895
g89
g90
ssg71
g884
sg64
(lp896
S':'
asbag57
(g78
g59
NtRp897
(dp898
g62
(dp899
sg71
g884
sg64
(lp900
g57
(g58
g59
NtRp901
(dp902
g62
(dp903
g70
I4
ssg71
g897
sg64
(lp904
g100
asbasbasbag57
(g73
g59
NtRp905
(dp906
g62
(dp907
sg71
g526
sg64
(lp908
g57
(g78
g59
NtRp909
(dp910
g62
(dp911
g82
g83
ssg71
g905
sg64
(lp912
S'is_pypy'
p913
asbag57
(g78
g59
NtRp914
(dp915
g62
(dp916
g89
g90
ssg71
g905
sg64
(lp917
S':'
asbag57
(g78
g59
NtRp918
(dp919
g62
(dp920
sg71
g905
sg64
(lp921
g57
(g58
g59
NtRp922
(dp923
g62
(dp924
g70
I4
ssg71
g918
sg64
(lp925
g100
asbasbasbag57
(g73
g59
NtRp926
(dp927
g62
(dp928
sg71
g526
sg64
(lp929
g57
(g78
g59
NtRp930
(dp931
g62
(dp932
g82
g83
ssg71
g926
sg64
(lp933
S'local_hosts'
p934
asbag57
(g78
g59
NtRp935
(dp936
g62
(dp937
g89
g90
ssg71
g926
sg64
(lp938
S':'
asbag57
(g78
g59
NtRp939
(dp940
g62
(dp941
sg71
g926
sg64
(lp942
g57
(g58
g59
NtRp943
(dp944
g62
(dp945
g70
I4
ssg71
g939
sg64
(lp946
g57
(g66
g59
NtRp947
(dp948
g62
(dp949
g70
I3
ssg71
Nsg64
(lp950
g57
(g73
g59
NtRp951
(dp952
g62
(dp953
sg71
g947
sg64
(lp954
g57
(g78
g59
NtRp955
(dp956
g62
(dp957
sg71
g951
sg64
(lp958
g57
(g58
g59
NtRp959
(dp960
g62
(dp961
g70
I3
ssg71
g955
sg64
(lp962
S'::1'
p963
asbasbasbag57
(g73
g59
NtRp964
(dp965
g62
(dp966
sg71
g947
sg64
(lp967
g57
(g78
g59
NtRp968
(dp969
g62
(dp970
sg71
g964
sg64
(lp971
g57
(g58
g59
NtRp972
(dp973
g62
(dp974
g70
I3
ssg71
g968
sg64
(lp975
S'127.0.1.1'
p976
asbasbasbag57
(g73
g59
NtRp977
(dp978
g62
(dp979
sg71
g947
sg64
(lp980
g57
(g78
g59
NtRp981
(dp982
g62
(dp983
sg71
g977
sg64
(lp984
g57
(g58
g59
NtRp985
(dp986
g62
(dp987
g70
I3
ssg71
g981
sg64
(lp988
S'::ffff:127.0.0.1'
p989
asbasbasbag57
(g73
g59
NtRp990
(dp991
g62
(dp992
sg71
g947
sg64
(lp993
g57
(g78
g59
NtRp994
(dp995
g62
(dp996
sg71
g990
sg64
(lp997
g57
(g58
g59
NtRp998
(dp999
g62
(dp1000
g70
I3
ssg71
g994
sg64
(lp1001
S'127.0.0.1'
p1002
asbasbasbag57
(g73
g59
NtRp1003
(dp1004
g62
(dp1005
sg71
g947
sg64
(lp1006
g57
(g78
g59
NtRp1007
(dp1008
g62
(dp1009
sg71
g1003
sg64
(lp1010
g57
(g58
g59
NtRp1011
(dp1012
g62
(dp1013
g70
I3
ssg71
g1007
sg64
(lp1014
S'anil-Inspiron-1525'
p1015
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1016
(dp1017
g62
(dp1018
sg71
g526
sg64
(lp1019
g57
(g78
g59
NtRp1020
(dp1021
g62
(dp1022
g82
g83
ssg71
g1016
sg64
(lp1023
S'path_info'
p1024
asbag57
(g78
g59
NtRp1025
(dp1026
g62
(dp1027
g89
g90
ssg71
g1016
sg64
(lp1028
S':'
asbag57
(g78
g59
NtRp1029
(dp1030
g62
(dp1031
sg71
g1016
sg64
(lp1032
g57
(g58
g59
NtRp1033
(dp1034
g62
(dp1035
g70
I4
ssg71
g1029
sg64
(lp1036
S'/DEV_bootstrap_ch/default/list_all_dev_projects/project/view/project/1'
p1037
asbasbasbag57
(g73
g59
NtRp1038
(dp1039
g62
(dp1040
sg71
g526
sg64
(lp1041
g57
(g78
g59
NtRp1042
(dp1043
g62
(dp1044
g82
g83
ssg71
g1038
sg64
(lp1045
S'query_string'
p1046
asbag57
(g78
g59
NtRp1047
(dp1048
g62
(dp1049
g89
g90
ssg71
g1038
sg64
(lp1050
S':'
asbag57
(g78
g59
NtRp1051
(dp1052
g62
(dp1053
sg71
g1038
sg64
(lp1054
g57
(g58
g59
NtRp1055
(dp1056
g62
(dp1057
g70
I4
ssg71
g1051
sg64
(lp1058
S'_signature=6906d7c4775f105ef13e65dceb80c51f938348b7'
p1059
asbasbasbag57
(g73
g59
NtRp1060
(dp1061
g62
(dp1062
sg71
g526
sg64
(lp1063
g57
(g78
g59
NtRp1064
(dp1065
g62
(dp1066
g82
g83
ssg71
g1060
sg64
(lp1067
S'remote_addr'
p1068
asbag57
(g78
g59
NtRp1069
(dp1070
g62
(dp1071
g89
g90
ssg71
g1060
sg64
(lp1072
S':'
asbag57
(g78
g59
NtRp1073
(dp1074
g62
(dp1075
sg71
g1060
sg64
(lp1076
g57
(g58
g59
NtRp1077
(dp1078
g62
(dp1079
g70
I4
ssg71
g1073
sg64
(lp1080
g263
asbasbasbag57
(g73
g59
NtRp1081
(dp1082
g62
(dp1083
sg71
g526
sg64
(lp1084
g57
(g78
g59
NtRp1085
(dp1086
g62
(dp1087
g82
g83
ssg71
g1081
sg64
(lp1088
S'remote_port'
p1089
asbag57
(g78
g59
NtRp1090
(dp1091
g62
(dp1092
g89
g90
ssg71
g1081
sg64
(lp1093
S':'
asbag57
(g78
g59
NtRp1094
(dp1095
g62
(dp1096
sg71
g1081
sg64
(lp1097
g57
(g58
g59
NtRp1098
(dp1099
g62
(dp1100
g70
I4
ssg71
g1094
sg64
(lp1101
S'55058'
p1102
asbasbasbag57
(g73
g59
NtRp1103
(dp1104
g62
(dp1105
sg71
g526
sg64
(lp1106
g57
(g78
g59
NtRp1107
(dp1108
g62
(dp1109
g82
g83
ssg71
g1103
sg64
(lp1110
S'request_method'
p1111
asbag57
(g78
g59
NtRp1112
(dp1113
g62
(dp1114
g89
g90
ssg71
g1103
sg64
(lp1115
S':'
asbag57
(g78
g59
NtRp1116
(dp1117
g62
(dp1118
sg71
g1103
sg64
(lp1119
g57
(g58
g59
NtRp1120
(dp1121
g62
(dp1122
g70
I4
ssg71
g1116
sg64
(lp1123
S'GET'
p1124
asbasbasbag57
(g73
g59
NtRp1125
(dp1126
g62
(dp1127
sg71
g526
sg64
(lp1128
g57
(g78
g59
NtRp1129
(dp1130
g62
(dp1131
g82
g83
ssg71
g1125
sg64
(lp1132
S'request_uri'
p1133
asbag57
(g78
g59
NtRp1134
(dp1135
g62
(dp1136
g89
g90
ssg71
g1125
sg64
(lp1137
S':'
asbag57
(g78
g59
NtRp1138
(dp1139
g62
(dp1140
sg71
g1125
sg64
(lp1141
g57
(g58
g59
NtRp1142
(dp1143
g62
(dp1144
g70
I4
ssg71
g1138
sg64
(lp1145
S'/DEV_bootstrap_ch/default/list_all_dev_projects/project/view/project/1?_signature=6906d7c4775f105ef13e65dceb80c51f938348b7'
p1146
asbasbasbag57
(g73
g59
NtRp1147
(dp1148
g62
(dp1149
sg71
g526
sg64
(lp1150
g57
(g78
g59
NtRp1151
(dp1152
g62
(dp1153
g82
g83
ssg71
g1147
sg64
(lp1154
S'script_name'
p1155
asbag57
(g78
g59
NtRp1156
(dp1157
g62
(dp1158
g89
g90
ssg71
g1147
sg64
(lp1159
S':'
asbag57
(g78
g59
NtRp1160
(dp1161
g62
(dp1162
sg71
g1147
sg64
(lp1163
g57
(g58
g59
NtRp1164
(dp1165
g62
(dp1166
g70
I4
ssg71
g1160
sg64
(lp1167
S''
asbasbasbag57
(g73
g59
NtRp1168
(dp1169
g62
(dp1170
sg71
g526
sg64
(lp1171
g57
(g78
g59
NtRp1172
(dp1173
g62
(dp1174
g82
g83
ssg71
g1168
sg64
(lp1175
S'server_name'
p1176
asbag57
(g78
g59
NtRp1177
(dp1178
g62
(dp1179
g89
g90
ssg71
g1168
sg64
(lp1180
S':'
asbag57
(g78
g59
NtRp1181
(dp1182
g62
(dp1183
sg71
g1168
sg64
(lp1184
g57
(g58
g59
NtRp1185
(dp1186
g62
(dp1187
g70
I4
ssg71
g1181
sg64
(lp1188
S'anil-Inspiron-1525'
p1189
asbasbasbag57
(g73
g59
NtRp1190
(dp1191
g62
(dp1192
sg71
g526
sg64
(lp1193
g57
(g78
g59
NtRp1194
(dp1195
g62
(dp1196
g82
g83
ssg71
g1190
sg64
(lp1197
S'server_port'
p1198
asbag57
(g78
g59
NtRp1199
(dp1200
g62
(dp1201
g89
g90
ssg71
g1190
sg64
(lp1202
S':'
asbag57
(g78
g59
NtRp1203
(dp1204
g62
(dp1205
sg71
g1190
sg64
(lp1206
g57
(g58
g59
NtRp1207
(dp1208
g62
(dp1209
g70
I4
ssg71
g1203
sg64
(lp1210
S'8000'
p1211
asbasbasbag57
(g73
g59
NtRp1212
(dp1213
g62
(dp1214
sg71
g526
sg64
(lp1215
g57
(g78
g59
NtRp1216
(dp1217
g62
(dp1218
g82
g83
ssg71
g1212
sg64
(lp1219
S'server_protocol'
p1220
asbag57
(g78
g59
NtRp1221
(dp1222
g62
(dp1223
g89
g90
ssg71
g1212
sg64
(lp1224
S':'
asbag57
(g78
g59
NtRp1225
(dp1226
g62
(dp1227
sg71
g1212
sg64
(lp1228
g57
(g58
g59
NtRp1229
(dp1230
g62
(dp1231
g70
I4
ssg71
g1225
sg64
(lp1232
S'HTTP/1.1'
p1233
asbasbasbag57
(g73
g59
NtRp1234
(dp1235
g62
(dp1236
sg71
g526
sg64
(lp1237
g57
(g78
g59
NtRp1238
(dp1239
g62
(dp1240
g82
g83
ssg71
g1234
sg64
(lp1241
S'server_software'
p1242
asbag57
(g78
g59
NtRp1243
(dp1244
g62
(dp1245
g89
g90
ssg71
g1234
sg64
(lp1246
S':'
asbag57
(g78
g59
NtRp1247
(dp1248
g62
(dp1249
sg71
g1234
sg64
(lp1250
g57
(g58
g59
NtRp1251
(dp1252
g62
(dp1253
g70
I4
ssg71
g1247
sg64
(lp1254
S'Rocket 1.2.6'
p1255
asbasbasbag57
(g73
g59
NtRp1256
(dp1257
g62
(dp1258
sg71
g526
sg64
(lp1259
g57
(g78
g59
NtRp1260
(dp1261
g62
(dp1262
g82
g83
ssg71
g1256
sg64
(lp1263
S'web2py_path'
p1264
asbag57
(g78
g59
NtRp1265
(dp1266
g62
(dp1267
g89
g90
ssg71
g1256
sg64
(lp1268
S':'
asbag57
(g78
g59
NtRp1269
(dp1270
g62
(dp1271
sg71
g1256
sg64
(lp1272
g57
(g58
g59
NtRp1273
(dp1274
g62
(dp1275
g70
I4
ssg71
g1269
sg64
(lp1276
g573
asbasbasbag57
(g73
g59
NtRp1277
(dp1278
g62
(dp1279
sg71
g526
sg64
(lp1280
g57
(g78
g59
NtRp1281
(dp1282
g62
(dp1283
g82
g83
ssg71
g1277
sg64
(lp1284
S'web2py_version'
p1285
asbag57
(g78
g59
NtRp1286
(dp1287
g62
(dp1288
g89
g90
ssg71
g1277
sg64
(lp1289
S':'
asbag57
(g78
g59
NtRp1290
(dp1291
g62
(dp1292
sg71
g1277
sg64
(lp1293
g57
(g58
g59
NtRp1294
(dp1295
g62
(dp1296
g70
I4
ssg71
g1290
sg64
(lp1297
g57
(g66
g59
NtRp1298
(dp1299
g62
(dp1300
g70
I3
ssg71
Nsg64
(lp1301
g57
(g73
g59
NtRp1302
(dp1303
g62
(dp1304
sg71
g1298
sg64
(lp1305
g57
(g78
g59
NtRp1306
(dp1307
g62
(dp1308
sg71
g1302
sg64
(lp1309
g57
(g58
g59
NtRp1310
(dp1311
g62
(dp1312
g70
I3
ssg71
g1306
sg64
(lp1313
S'2'
asbasbasbag57
(g73
g59
NtRp1314
(dp1315
g62
(dp1316
sg71
g1298
sg64
(lp1317
g57
(g78
g59
NtRp1318
(dp1319
g62
(dp1320
sg71
g1314
sg64
(lp1321
g57
(g58
g59
NtRp1322
(dp1323
g62
(dp1324
g70
I3
ssg71
g1318
sg64
(lp1325
S'3'
asbasbasbag57
(g73
g59
NtRp1326
(dp1327
g62
(dp1328
sg71
g1298
sg64
(lp1329
g57
(g78
g59
NtRp1330
(dp1331
g62
(dp1332
sg71
g1326
sg64
(lp1333
g57
(g58
g59
NtRp1334
(dp1335
g62
(dp1336
g70
I3
ssg71
g1330
sg64
(lp1337
S'2'
asbasbasbag57
(g73
g59
NtRp1338
(dp1339
g62
(dp1340
sg71
g1298
sg64
(lp1341
g57
(g78
g59
NtRp1342
(dp1343
g62
(dp1344
sg71
g1338
sg64
(lp1345
g57
(g58
g59
NtRp1346
(dp1347
g62
(dp1348
g70
I3
ssg71
g1342
sg64
(lp1349
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p1350
asbasbasbag57
(g73
g59
NtRp1351
(dp1352
g62
(dp1353
sg71
g1298
sg64
(lp1354
g57
(g78
g59
NtRp1355
(dp1356
g62
(dp1357
sg71
g1351
sg64
(lp1358
g57
(g58
g59
NtRp1359
(dp1360
g62
(dp1361
g70
I3
ssg71
g1355
sg64
(lp1362
S'stable'
p1363
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1364
(dp1365
g62
(dp1366
sg71
g526
sg64
(lp1367
g57
(g78
g59
NtRp1368
(dp1369
g62
(dp1370
g82
g83
ssg71
g1364
sg64
(lp1371
S'wsgi_errors'
p1372
asbag57
(g78
g59
NtRp1373
(dp1374
g62
(dp1375
g89
g90
ssg71
g1364
sg64
(lp1376
S':'
asbag57
(g78
g59
NtRp1377
(dp1378
g62
(dp1379
sg71
g1364
sg64
(lp1380
g57
(g58
g59
NtRp1381
(dp1382
g62
(dp1383
g70
I4
ssg71
g1377
sg64
(lp1384
S"<open file '<stderr>', mode 'w' at 0xb72a30d0>"
p1385
asbasbasbag57
(g73
g59
NtRp1386
(dp1387
g62
(dp1388
sg71
g526
sg64
(lp1389
g57
(g78
g59
NtRp1390
(dp1391
g62
(dp1392
g82
g83
ssg71
g1386
sg64
(lp1393
S'wsgi_file_wrapper'
p1394
asbag57
(g78
g59
NtRp1395
(dp1396
g62
(dp1397
g89
g90
ssg71
g1386
sg64
(lp1398
S':'
asbag57
(g78
g59
NtRp1399
(dp1400
g62
(dp1401
sg71
g1386
sg64
(lp1402
g57
(g58
g59
NtRp1403
(dp1404
g62
(dp1405
g70
I4
ssg71
g1399
sg64
(lp1406
S'<class wsgiref.util.FileWrapper at 0xa405a4c>'
p1407
asbasbasbag57
(g73
g59
NtRp1408
(dp1409
g62
(dp1410
sg71
g526
sg64
(lp1411
g57
(g78
g59
NtRp1412
(dp1413
g62
(dp1414
g82
g83
ssg71
g1408
sg64
(lp1415
S'wsgi_input'
p1416
asbag57
(g78
g59
NtRp1417
(dp1418
g62
(dp1419
g89
g90
ssg71
g1408
sg64
(lp1420
S':'
asbag57
(g78
g59
NtRp1421
(dp1422
g62
(dp1423
sg71
g1408
sg64
(lp1424
g57
(g58
g59
NtRp1425
(dp1426
g62
(dp1427
g70
I4
ssg71
g1421
sg64
(lp1428
S'<socket._fileobject object at 0xade27d6c>'
p1429
asbasbasbag57
(g73
g59
NtRp1430
(dp1431
g62
(dp1432
sg71
g526
sg64
(lp1433
g57
(g78
g59
NtRp1434
(dp1435
g62
(dp1436
g82
g83
ssg71
g1430
sg64
(lp1437
S'wsgi_multiprocess'
p1438
asbag57
(g78
g59
NtRp1439
(dp1440
g62
(dp1441
g89
g90
ssg71
g1430
sg64
(lp1442
S':'
asbag57
(g78
g59
NtRp1443
(dp1444
g62
(dp1445
sg71
g1430
sg64
(lp1446
g57
(g58
g59
NtRp1447
(dp1448
g62
(dp1449
g70
I4
ssg71
g1443
sg64
(lp1450
g100
asbasbasbag57
(g73
g59
NtRp1451
(dp1452
g62
(dp1453
sg71
g526
sg64
(lp1454
g57
(g78
g59
NtRp1455
(dp1456
g62
(dp1457
g82
g83
ssg71
g1451
sg64
(lp1458
S'wsgi_multithread'
p1459
asbag57
(g78
g59
NtRp1460
(dp1461
g62
(dp1462
g89
g90
ssg71
g1451
sg64
(lp1463
S':'
asbag57
(g78
g59
NtRp1464
(dp1465
g62
(dp1466
sg71
g1451
sg64
(lp1467
g57
(g58
g59
NtRp1468
(dp1469
g62
(dp1470
g70
I4
ssg71
g1464
sg64
(lp1471
S'True'
p1472
asbasbasbag57
(g73
g59
NtRp1473
(dp1474
g62
(dp1475
sg71
g526
sg64
(lp1476
g57
(g78
g59
NtRp1477
(dp1478
g62
(dp1479
g82
g83
ssg71
g1473
sg64
(lp1480
S'wsgi_run_once'
p1481
asbag57
(g78
g59
NtRp1482
(dp1483
g62
(dp1484
g89
g90
ssg71
g1473
sg64
(lp1485
S':'
asbag57
(g78
g59
NtRp1486
(dp1487
g62
(dp1488
sg71
g1473
sg64
(lp1489
g57
(g58
g59
NtRp1490
(dp1491
g62
(dp1492
g70
I4
ssg71
g1486
sg64
(lp1493
g100
asbasbasbag57
(g73
g59
NtRp1494
(dp1495
g62
(dp1496
sg71
g526
sg64
(lp1497
g57
(g78
g59
NtRp1498
(dp1499
g62
(dp1500
g82
g83
ssg71
g1494
sg64
(lp1501
S'wsgi_url_scheme'
p1502
asbag57
(g78
g59
NtRp1503
(dp1504
g62
(dp1505
g89
g90
ssg71
g1494
sg64
(lp1506
S':'
asbag57
(g78
g59
NtRp1507
(dp1508
g62
(dp1509
sg71
g1494
sg64
(lp1510
g57
(g58
g59
NtRp1511
(dp1512
g62
(dp1513
g70
I4
ssg71
g1507
sg64
(lp1514
S'http'
p1515
asbasbasbag57
(g73
g59
NtRp1516
(dp1517
g62
(dp1518
sg71
g526
sg64
(lp1519
g57
(g78
g59
NtRp1520
(dp1521
g62
(dp1522
g82
g83
ssg71
g1516
sg64
(lp1523
S'wsgi_version'
p1524
asbag57
(g78
g59
NtRp1525
(dp1526
g62
(dp1527
g89
g90
ssg71
g1516
sg64
(lp1528
S':'
asbag57
(g78
g59
NtRp1529
(dp1530
g62
(dp1531
sg71
g1516
sg64
(lp1532
g57
(g58
g59
NtRp1533
(dp1534
g62
(dp1535
g70
I4
ssg71
g1529
sg64
(lp1536
g57
(g66
g59
NtRp1537
(dp1538
g62
(dp1539
g70
I3
ssg71
Nsg64
(lp1540
g57
(g73
g59
NtRp1541
(dp1542
g62
(dp1543
sg71
g1537
sg64
(lp1544
g57
(g78
g59
NtRp1545
(dp1546
g62
(dp1547
sg71
g1541
sg64
(lp1548
g57
(g58
g59
NtRp1549
(dp1550
g62
(dp1551
g70
I3
ssg71
g1545
sg64
(lp1552
S'1'
asbasbasbag57
(g73
g59
NtRp1553
(dp1554
g62
(dp1555
sg71
g1537
sg64
(lp1556
g57
(g78
g59
NtRp1557
(dp1558
g62
(dp1559
sg71
g1553
sg64
(lp1560
g57
(g58
g59
NtRp1561
(dp1562
g62
(dp1563
g70
I3
ssg71
g1557
sg64
(lp1564
S'0'
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp1565
(dp1566
g62
(dp1567
sg71
g67
sg64
(lp1568
g57
(g78
g59
NtRp1569
(dp1570
g62
(dp1571
g82
g83
ssg71
g1565
sg64
(lp1572
S'extension'
p1573
asbag57
(g78
g59
NtRp1574
(dp1575
g62
(dp1576
g89
g90
ssg71
g1565
sg64
(lp1577
S':'
asbag57
(g78
g59
NtRp1578
(dp1579
g62
(dp1580
sg71
g1565
sg64
(lp1581
g57
(g58
g59
NtRp1582
(dp1583
g62
(dp1584
g70
I5
ssg71
g1578
sg64
(lp1585
S'html'
p1586
asbasbasbag57
(g73
g59
NtRp1587
(dp1588
g62
(dp1589
sg71
g67
sg64
(lp1590
g57
(g78
g59
NtRp1591
(dp1592
g62
(dp1593
g82
g83
ssg71
g1587
sg64
(lp1594
S'folder'
p1595
asbag57
(g78
g59
NtRp1596
(dp1597
g62
(dp1598
g89
g90
ssg71
g1587
sg64
(lp1599
S':'
asbag57
(g78
g59
NtRp1600
(dp1601
g62
(dp1602
sg71
g1587
sg64
(lp1603
g57
(g58
g59
NtRp1604
(dp1605
g62
(dp1606
g70
I5
ssg71
g1600
sg64
(lp1607
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/'
p1608
asbasbasbag57
(g73
g59
NtRp1609
(dp1610
g62
(dp1611
sg71
g67
sg64
(lp1612
g57
(g78
g59
NtRp1613
(dp1614
g62
(dp1615
g82
g83
ssg71
g1609
sg64
(lp1616
S'function'
p1617
asbag57
(g78
g59
NtRp1618
(dp1619
g62
(dp1620
g89
g90
ssg71
g1609
sg64
(lp1621
S':'
asbag57
(g78
g59
NtRp1622
(dp1623
g62
(dp1624
sg71
g1609
sg64
(lp1625
g57
(g58
g59
NtRp1626
(dp1627
g62
(dp1628
g70
I5
ssg71
g1622
sg64
(lp1629
S'list_all_dev_projects'
p1630
asbasbasbag57
(g73
g59
NtRp1631
(dp1632
g62
(dp1633
sg71
g67
sg64
(lp1634
g57
(g78
g59
NtRp1635
(dp1636
g62
(dp1637
g82
g83
ssg71
g1631
sg64
(lp1638
S'get_vars'
p1639
asbag57
(g78
g59
NtRp1640
(dp1641
g62
(dp1642
g89
g90
ssg71
g1631
sg64
(lp1643
S':'
asbag57
(g78
g59
NtRp1644
(dp1645
g62
(dp1646
sg71
g1631
sg64
(lp1647
g57
(g58
g59
NtRp1648
(dp1649
g62
(dp1650
g70
I5
ssg71
g1644
sg64
(lp1651
g57
(g66
g59
NtRp1652
(dp1653
g62
(dp1654
g70
I4
ssg71
Nsg64
(lp1655
sbasbasbasbag57
(g73
g59
NtRp1656
(dp1657
g62
(dp1658
sg71
g67
sg64
(lp1659
g57
(g78
g59
NtRp1660
(dp1661
g62
(dp1662
g82
g83
ssg71
g1656
sg64
(lp1663
S'global_settings'
p1664
asbag57
(g78
g59
NtRp1665
(dp1666
g62
(dp1667
g89
g90
ssg71
g1656
sg64
(lp1668
S':'
asbag57
(g78
g59
NtRp1669
(dp1670
g62
(dp1671
sg71
g1656
sg64
(lp1672
g57
(g58
g59
NtRp1673
(dp1674
g62
(dp1675
g70
I5
ssg71
g1669
sg64
(lp1676
g57
(g66
g59
NtRp1677
(dp1678
g62
(dp1679
g70
I4
ssg71
Nsg64
(lp1680
g57
(g73
g59
NtRp1681
(dp1682
g62
(dp1683
sg71
g1677
sg64
(lp1684
g57
(g78
g59
NtRp1685
(dp1686
g62
(dp1687
g82
g83
ssg71
g1681
sg64
(lp1688
g538
asbag57
(g78
g59
NtRp1689
(dp1690
g62
(dp1691
g89
g90
ssg71
g1681
sg64
(lp1692
S':'
asbag57
(g78
g59
NtRp1693
(dp1694
g62
(dp1695
sg71
g1681
sg64
(lp1696
g57
(g58
g59
NtRp1697
(dp1698
g62
(dp1699
g70
I4
ssg71
g1693
sg64
(lp1700
S"set(['/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/'])"
p1701
asbasbasbag57
(g73
g59
NtRp1702
(dp1703
g62
(dp1704
sg71
g1677
sg64
(lp1705
g57
(g78
g59
NtRp1706
(dp1707
g62
(dp1708
g82
g83
ssg71
g1702
sg64
(lp1709
g560
asbag57
(g78
g59
NtRp1710
(dp1711
g62
(dp1712
g89
g90
ssg71
g1702
sg64
(lp1713
S':'
asbag57
(g78
g59
NtRp1714
(dp1715
g62
(dp1716
sg71
g1702
sg64
(lp1717
g57
(g58
g59
NtRp1718
(dp1719
g62
(dp1720
g70
I4
ssg71
g1714
sg64
(lp1721
g573
asbasbasbag57
(g73
g59
NtRp1722
(dp1723
g62
(dp1724
sg71
g1677
sg64
(lp1725
g57
(g78
g59
NtRp1726
(dp1727
g62
(dp1728
g82
g83
ssg71
g1722
sg64
(lp1729
g582
asbag57
(g78
g59
NtRp1730
(dp1731
g62
(dp1732
g89
g90
ssg71
g1722
sg64
(lp1733
S':'
asbag57
(g78
g59
NtRp1734
(dp1735
g62
(dp1736
sg71
g1722
sg64
(lp1737
g57
(g58
g59
NtRp1738
(dp1739
g62
(dp1740
g70
I4
ssg71
g1734
sg64
(lp1741
g57
(g66
g59
NtRp1742
(dp1743
g62
(dp1744
g70
I3
ssg71
Nsg64
(lp1745
sbasbasbasbag57
(g73
g59
NtRp1746
(dp1747
g62
(dp1748
sg71
g1677
sg64
(lp1749
g57
(g78
g59
NtRp1750
(dp1751
g62
(dp1752
g82
g83
ssg71
g1746
sg64
(lp1753
g607
asbag57
(g78
g59
NtRp1754
(dp1755
g62
(dp1756
g89
g90
ssg71
g1746
sg64
(lp1757
S':'
asbag57
(g78
g59
NtRp1758
(dp1759
g62
(dp1760
sg71
g1746
sg64
(lp1761
g57
(g58
g59
NtRp1762
(dp1763
g62
(dp1764
g70
I4
ssg71
g1758
sg64
(lp1765
S"<Values at 0xa3b8fcc: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/bootstrap/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1766
asbasbasbag57
(g73
g59
NtRp1767
(dp1768
g62
(dp1769
sg71
g1677
sg64
(lp1770
g57
(g78
g59
NtRp1771
(dp1772
g62
(dp1773
g82
g83
ssg71
g1767
sg64
(lp1774
g629
asbag57
(g78
g59
NtRp1775
(dp1776
g62
(dp1777
g89
g90
ssg71
g1767
sg64
(lp1778
S':'
asbag57
(g78
g59
NtRp1779
(dp1780
g62
(dp1781
sg71
g1767
sg64
(lp1782
g57
(g58
g59
NtRp1783
(dp1784
g62
(dp1785
g70
I4
ssg71
g1779
sg64
(lp1786
S'set([])'
p1787
asbasbasbag57
(g73
g59
NtRp1788
(dp1789
g62
(dp1790
sg71
g1677
sg64
(lp1791
g57
(g78
g59
NtRp1792
(dp1793
g62
(dp1794
g82
g83
ssg71
g1788
sg64
(lp1795
g651
asbag57
(g78
g59
NtRp1796
(dp1797
g62
(dp1798
g89
g90
ssg71
g1788
sg64
(lp1799
S':'
asbag57
(g78
g59
NtRp1800
(dp1801
g62
(dp1802
sg71
g1788
sg64
(lp1803
g57
(g58
g59
NtRp1804
(dp1805
g62
(dp1806
g70
I4
ssg71
g1800
sg64
(lp1807
g100
asbasbasbag57
(g73
g59
NtRp1808
(dp1809
g62
(dp1810
sg71
g1677
sg64
(lp1811
g57
(g78
g59
NtRp1812
(dp1813
g62
(dp1814
g82
g83
ssg71
g1808
sg64
(lp1815
g672
asbag57
(g78
g59
NtRp1816
(dp1817
g62
(dp1818
g89
g90
ssg71
g1808
sg64
(lp1819
S':'
asbag57
(g78
g59
NtRp1820
(dp1821
g62
(dp1822
sg71
g1808
sg64
(lp1823
g57
(g58
g59
NtRp1824
(dp1825
g62
(dp1826
g70
I4
ssg71
g1820
sg64
(lp1827
g685
asbasbasbag57
(g73
g59
NtRp1828
(dp1829
g62
(dp1830
sg71
g1677
sg64
(lp1831
g57
(g78
g59
NtRp1832
(dp1833
g62
(dp1834
g82
g83
ssg71
g1828
sg64
(lp1835
g892
asbag57
(g78
g59
NtRp1836
(dp1837
g62
(dp1838
g89
g90
ssg71
g1828
sg64
(lp1839
S':'
asbag57
(g78
g59
NtRp1840
(dp1841
g62
(dp1842
sg71
g1828
sg64
(lp1843
g57
(g58
g59
NtRp1844
(dp1845
g62
(dp1846
g70
I4
ssg71
g1840
sg64
(lp1847
g100
asbasbasbag57
(g73
g59
NtRp1848
(dp1849
g62
(dp1850
sg71
g1677
sg64
(lp1851
g57
(g78
g59
NtRp1852
(dp1853
g62
(dp1854
g82
g83
ssg71
g1848
sg64
(lp1855
g913
asbag57
(g78
g59
NtRp1856
(dp1857
g62
(dp1858
g89
g90
ssg71
g1848
sg64
(lp1859
S':'
asbag57
(g78
g59
NtRp1860
(dp1861
g62
(dp1862
sg71
g1848
sg64
(lp1863
g57
(g58
g59
NtRp1864
(dp1865
g62
(dp1866
g70
I4
ssg71
g1860
sg64
(lp1867
g100
asbasbasbag57
(g73
g59
NtRp1868
(dp1869
g62
(dp1870
sg71
g1677
sg64
(lp1871
g57
(g78
g59
NtRp1872
(dp1873
g62
(dp1874
g82
g83
ssg71
g1868
sg64
(lp1875
g934
asbag57
(g78
g59
NtRp1876
(dp1877
g62
(dp1878
g89
g90
ssg71
g1868
sg64
(lp1879
S':'
asbag57
(g78
g59
NtRp1880
(dp1881
g62
(dp1882
sg71
g1868
sg64
(lp1883
g57
(g58
g59
NtRp1884
(dp1885
g62
(dp1886
g70
I4
ssg71
g1880
sg64
(lp1887
g57
(g66
g59
NtRp1888
(dp1889
g62
(dp1890
g70
I3
ssg71
Nsg64
(lp1891
g57
(g73
g59
NtRp1892
(dp1893
g62
(dp1894
sg71
g1888
sg64
(lp1895
g57
(g78
g59
NtRp1896
(dp1897
g62
(dp1898
sg71
g1892
sg64
(lp1899
g57
(g58
g59
NtRp1900
(dp1901
g62
(dp1902
g70
I3
ssg71
g1896
sg64
(lp1903
g963
asbasbasbag57
(g73
g59
NtRp1904
(dp1905
g62
(dp1906
sg71
g1888
sg64
(lp1907
g57
(g78
g59
NtRp1908
(dp1909
g62
(dp1910
sg71
g1904
sg64
(lp1911
g57
(g58
g59
NtRp1912
(dp1913
g62
(dp1914
g70
I3
ssg71
g1908
sg64
(lp1915
g976
asbasbasbag57
(g73
g59
NtRp1916
(dp1917
g62
(dp1918
sg71
g1888
sg64
(lp1919
g57
(g78
g59
NtRp1920
(dp1921
g62
(dp1922
sg71
g1916
sg64
(lp1923
g57
(g58
g59
NtRp1924
(dp1925
g62
(dp1926
g70
I3
ssg71
g1920
sg64
(lp1927
g989
asbasbasbag57
(g73
g59
NtRp1928
(dp1929
g62
(dp1930
sg71
g1888
sg64
(lp1931
g57
(g78
g59
NtRp1932
(dp1933
g62
(dp1934
sg71
g1928
sg64
(lp1935
g57
(g58
g59
NtRp1936
(dp1937
g62
(dp1938
g70
I3
ssg71
g1932
sg64
(lp1939
g1002
asbasbasbag57
(g73
g59
NtRp1940
(dp1941
g62
(dp1942
sg71
g1888
sg64
(lp1943
g57
(g78
g59
NtRp1944
(dp1945
g62
(dp1946
sg71
g1940
sg64
(lp1947
g57
(g58
g59
NtRp1948
(dp1949
g62
(dp1950
g70
I3
ssg71
g1944
sg64
(lp1951
g1015
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1952
(dp1953
g62
(dp1954
sg71
g1677
sg64
(lp1955
g57
(g78
g59
NtRp1956
(dp1957
g62
(dp1958
g82
g83
ssg71
g1952
sg64
(lp1959
g1285
asbag57
(g78
g59
NtRp1960
(dp1961
g62
(dp1962
g89
g90
ssg71
g1952
sg64
(lp1963
S':'
asbag57
(g78
g59
NtRp1964
(dp1965
g62
(dp1966
sg71
g1952
sg64
(lp1967
g57
(g58
g59
NtRp1968
(dp1969
g62
(dp1970
g70
I4
ssg71
g1964
sg64
(lp1971
g57
(g66
g59
NtRp1972
(dp1973
g62
(dp1974
g70
I3
ssg71
Nsg64
(lp1975
g57
(g73
g59
NtRp1976
(dp1977
g62
(dp1978
sg71
g1972
sg64
(lp1979
g57
(g78
g59
NtRp1980
(dp1981
g62
(dp1982
sg71
g1976
sg64
(lp1983
g57
(g58
g59
NtRp1984
(dp1985
g62
(dp1986
g70
I3
ssg71
g1980
sg64
(lp1987
S'2'
asbasbasbag57
(g73
g59
NtRp1988
(dp1989
g62
(dp1990
sg71
g1972
sg64
(lp1991
g57
(g78
g59
NtRp1992
(dp1993
g62
(dp1994
sg71
g1988
sg64
(lp1995
g57
(g58
g59
NtRp1996
(dp1997
g62
(dp1998
g70
I3
ssg71
g1992
sg64
(lp1999
S'3'
asbasbasbag57
(g73
g59
NtRp2000
(dp2001
g62
(dp2002
sg71
g1972
sg64
(lp2003
g57
(g78
g59
NtRp2004
(dp2005
g62
(dp2006
sg71
g2000
sg64
(lp2007
g57
(g58
g59
NtRp2008
(dp2009
g62
(dp2010
g70
I3
ssg71
g2004
sg64
(lp2011
S'2'
asbasbasbag57
(g73
g59
NtRp2012
(dp2013
g62
(dp2014
sg71
g1972
sg64
(lp2015
g57
(g78
g59
NtRp2016
(dp2017
g62
(dp2018
sg71
g2012
sg64
(lp2019
g57
(g58
g59
NtRp2020
(dp2021
g62
(dp2022
g70
I3
ssg71
g2016
sg64
(lp2023
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p2024
asbasbasbag57
(g73
g59
NtRp2025
(dp2026
g62
(dp2027
sg71
g1972
sg64
(lp2028
g57
(g78
g59
NtRp2029
(dp2030
g62
(dp2031
sg71
g2025
sg64
(lp2032
g57
(g58
g59
NtRp2033
(dp2034
g62
(dp2035
g70
I3
ssg71
g2029
sg64
(lp2036
g1363
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp2037
(dp2038
g62
(dp2039
sg71
g67
sg64
(lp2040
g57
(g78
g59
NtRp2041
(dp2042
g62
(dp2043
g82
g83
ssg71
g2037
sg64
(lp2044
S'is_https'
p2045
asbag57
(g78
g59
NtRp2046
(dp2047
g62
(dp2048
g89
g90
ssg71
g2037
sg64
(lp2049
S':'
asbag57
(g78
g59
NtRp2050
(dp2051
g62
(dp2052
sg71
g2037
sg64
(lp2053
g57
(g58
g59
NtRp2054
(dp2055
g62
(dp2056
g70
I5
ssg71
g2050
sg64
(lp2057
g100
asbasbasbag57
(g73
g59
NtRp2058
(dp2059
g62
(dp2060
sg71
g67
sg64
(lp2061
g57
(g78
g59
NtRp2062
(dp2063
g62
(dp2064
g82
g83
ssg71
g2058
sg64
(lp2065
S'is_local'
p2066
asbag57
(g78
g59
NtRp2067
(dp2068
g62
(dp2069
g89
g90
ssg71
g2058
sg64
(lp2070
S':'
asbag57
(g78
g59
NtRp2071
(dp2072
g62
(dp2073
sg71
g2058
sg64
(lp2074
g57
(g58
g59
NtRp2075
(dp2076
g62
(dp2077
g70
I5
ssg71
g2071
sg64
(lp2078
g1472
asbasbasbag57
(g73
g59
NtRp2079
(dp2080
g62
(dp2081
sg71
g67
sg64
(lp2082
g57
(g78
g59
NtRp2083
(dp2084
g62
(dp2085
g82
g83
ssg71
g2079
sg64
(lp2086
S'is_restful'
p2087
asbag57
(g78
g59
NtRp2088
(dp2089
g62
(dp2090
g89
g90
ssg71
g2079
sg64
(lp2091
S':'
asbag57
(g78
g59
NtRp2092
(dp2093
g62
(dp2094
sg71
g2079
sg64
(lp2095
g57
(g58
g59
NtRp2096
(dp2097
g62
(dp2098
g70
I5
ssg71
g2092
sg64
(lp2099
g100
asbasbasbag57
(g73
g59
NtRp2100
(dp2101
g62
(dp2102
sg71
g67
sg64
(lp2103
g57
(g78
g59
NtRp2104
(dp2105
g62
(dp2106
g82
g83
ssg71
g2100
sg64
(lp2107
S'now'
p2108
asbag57
(g78
g59
NtRp2109
(dp2110
g62
(dp2111
g89
g90
ssg71
g2100
sg64
(lp2112
S':'
asbag57
(g78
g59
NtRp2113
(dp2114
g62
(dp2115
sg71
g2100
sg64
(lp2116
g57
(g58
g59
NtRp2117
(dp2118
g62
(dp2119
g70
I5
ssg71
g2113
sg64
(lp2120
S'datetime.datetime(2013, 2, 20, 21, 50, 59, 362584)'
p2121
asbasbasbag57
(g73
g59
NtRp2122
(dp2123
g62
(dp2124
sg71
g67
sg64
(lp2125
g57
(g78
g59
NtRp2126
(dp2127
g62
(dp2128
g82
g83
ssg71
g2122
sg64
(lp2129
S'post_vars'
p2130
asbag57
(g78
g59
NtRp2131
(dp2132
g62
(dp2133
g89
g90
ssg71
g2122
sg64
(lp2134
S':'
asbag57
(g78
g59
NtRp2135
(dp2136
g62
(dp2137
sg71
g2122
sg64
(lp2138
g57
(g58
g59
NtRp2139
(dp2140
g62
(dp2141
g70
I5
ssg71
g2135
sg64
(lp2142
g57
(g66
g59
NtRp2143
(dp2144
g62
(dp2145
g70
I4
ssg71
Nsg64
(lp2146
sbasbasbasbag57
(g73
g59
NtRp2147
(dp2148
g62
(dp2149
sg71
g67
sg64
(lp2150
g57
(g78
g59
NtRp2151
(dp2152
g62
(dp2153
g82
g83
ssg71
g2147
sg64
(lp2154
S'raw_args'
p2155
asbag57
(g78
g59
NtRp2156
(dp2157
g62
(dp2158
g89
g90
ssg71
g2147
sg64
(lp2159
S':'
asbag57
(g78
g59
NtRp2160
(dp2161
g62
(dp2162
sg71
g2147
sg64
(lp2163
g57
(g58
g59
NtRp2164
(dp2165
g62
(dp2166
g70
I5
ssg71
g2160
sg64
(lp2167
S'project/view/project/1'
p2168
asbasbasbag57
(g73
g59
NtRp2169
(dp2170
g62
(dp2171
sg71
g67
sg64
(lp2172
g57
(g78
g59
NtRp2173
(dp2174
g62
(dp2175
g82
g83
ssg71
g2169
sg64
(lp2176
S'raw_extension'
p2177
asbag57
(g78
g59
NtRp2178
(dp2179
g62
(dp2180
g89
g90
ssg71
g2169
sg64
(lp2181
S':'
asbag57
(g78
g59
NtRp2182
(dp2183
g62
(dp2184
sg71
g2169
sg64
(lp2185
g57
(g58
g59
NtRp2186
(dp2187
g62
(dp2188
g70
I5
ssg71
g2182
sg64
(lp2189
S'None'
p2190
asbasbasbag57
(g73
g59
NtRp2191
(dp2192
g62
(dp2193
sg71
g67
sg64
(lp2194
g57
(g78
g59
NtRp2195
(dp2196
g62
(dp2197
g82
g83
ssg71
g2191
sg64
(lp2198
S'url'
p2199
asbag57
(g78
g59
NtRp2200
(dp2201
g62
(dp2202
g89
g90
ssg71
g2191
sg64
(lp2203
S':'
asbag57
(g78
g59
NtRp2204
(dp2205
g62
(dp2206
sg71
g2191
sg64
(lp2207
g57
(g58
g59
NtRp2208
(dp2209
g62
(dp2210
g70
I5
ssg71
g2204
sg64
(lp2211
g1037
asbasbasbag57
(g73
g59
NtRp2212
(dp2213
g62
(dp2214
sg71
g67
sg64
(lp2215
g57
(g78
g59
NtRp2216
(dp2217
g62
(dp2218
g82
g83
ssg71
g2212
sg64
(lp2219
S'utcnow'
p2220
asbag57
(g78
g59
NtRp2221
(dp2222
g62
(dp2223
g89
g90
ssg71
g2212
sg64
(lp2224
S':'
asbag57
(g78
g59
NtRp2225
(dp2226
g62
(dp2227
sg71
g2212
sg64
(lp2228
g57
(g58
g59
NtRp2229
(dp2230
g62
(dp2231
g70
I5
ssg71
g2225
sg64
(lp2232
S'datetime.datetime(2013, 2, 20, 16, 20, 59, 362646)'
p2233
asbasbasbag57
(g73
g59
NtRp2234
(dp2235
g62
(dp2236
sg71
g67
sg64
(lp2237
g57
(g78
g59
NtRp2238
(dp2239
g62
(dp2240
g82
g83
ssg71
g2234
sg64
(lp2241
S'uuid'
p2242
asbag57
(g78
g59
NtRp2243
(dp2244
g62
(dp2245
g89
g90
ssg71
g2234
sg64
(lp2246
S':'
asbag57
(g78
g59
NtRp2247
(dp2248
g62
(dp2249
sg71
g2234
sg64
(lp2250
g57
(g58
g59
NtRp2251
(dp2252
g62
(dp2253
g70
I5
ssg71
g2247
sg64
(lp2254
S'DEV_bootstrap_ch/127.0.0.1.2013-02-20.21-50-59.a10f30e3-f361-4407-a8f7-1f2b2172d3a2'
p2255
asbasbasbag57
(g73
g59
NtRp2256
(dp2257
g62
(dp2258
sg71
g67
sg64
(lp2259
g57
(g78
g59
NtRp2260
(dp2261
g62
(dp2262
g82
g83
ssg71
g2256
sg64
(lp2263
S'vars'
p2264
asbag57
(g78
g59
NtRp2265
(dp2266
g62
(dp2267
g89
g90
ssg71
g2256
sg64
(lp2268
S':'
asbag57
(g78
g59
NtRp2269
(dp2270
g62
(dp2271
sg71
g2256
sg64
(lp2272
g57
(g58
g59
NtRp2273
(dp2274
g62
(dp2275
g70
I5
ssg71
g2269
sg64
(lp2276
g57
(g66
g59
NtRp2277
(dp2278
g62
(dp2279
g70
I4
ssg71
Nsg64
(lp2280
sbasbasbasbag57
(g73
g59
NtRp2281
(dp2282
g62
(dp2283
sg71
g67
sg64
(lp2284
g57
(g78
g59
NtRp2285
(dp2286
g62
(dp2287
g82
g83
ssg71
g2281
sg64
(lp2288
S'wsgi'
p2289
asbag57
(g78
g59
NtRp2290
(dp2291
g62
(dp2292
g89
g90
ssg71
g2281
sg64
(lp2293
S':'
asbag57
(g78
g59
NtRp2294
(dp2295
g62
(dp2296
sg71
g2281
sg64
(lp2297
g57
(g58
g59
NtRp2298
(dp2299
g62
(dp2300
g70
I5
ssg71
g2294
sg64
(lp2301
g57
(g66
g59
NtRp2302
(dp2303
g62
(dp2304
g70
I4
ssg71
Nsg64
(lp2305
g57
(g73
g59
NtRp2306
(dp2307
g62
(dp2308
sg71
g2302
sg64
(lp2309
g57
(g78
g59
NtRp2310
(dp2311
g62
(dp2312
g82
g83
ssg71
g2306
sg64
(lp2313
S'environ'
p2314
asbag57
(g78
g59
NtRp2315
(dp2316
g62
(dp2317
g89
g90
ssg71
g2306
sg64
(lp2318
S':'
asbag57
(g78
g59
NtRp2319
(dp2320
g62
(dp2321
sg71
g2306
sg64
(lp2322
g57
(g58
g59
NtRp2323
(dp2324
g62
(dp2325
g70
I4
ssg71
g2319
sg64
(lp2326
g57
(g66
g59
NtRp2327
(dp2328
g62
(dp2329
g70
I3
ssg71
Nsg64
(lp2330
g57
(g73
g59
NtRp2331
(dp2332
g62
(dp2333
sg71
g2327
sg64
(lp2334
g57
(g78
g59
NtRp2335
(dp2336
g62
(dp2337
g82
g83
ssg71
g2331
sg64
(lp2338
S'HTTP_ACCEPT'
p2339
asbag57
(g78
g59
NtRp2340
(dp2341
g62
(dp2342
g89
g90
ssg71
g2331
sg64
(lp2343
S':'
asbag57
(g78
g59
NtRp2344
(dp2345
g62
(dp2346
sg71
g2331
sg64
(lp2347
g57
(g58
g59
NtRp2348
(dp2349
g62
(dp2350
g70
I3
ssg71
g2344
sg64
(lp2351
g707
asbasbasbag57
(g73
g59
NtRp2352
(dp2353
g62
(dp2354
sg71
g2327
sg64
(lp2355
g57
(g78
g59
NtRp2356
(dp2357
g62
(dp2358
g82
g83
ssg71
g2352
sg64
(lp2359
S'HTTP_ACCEPT_CHARSET'
p2360
asbag57
(g78
g59
NtRp2361
(dp2362
g62
(dp2363
g89
g90
ssg71
g2352
sg64
(lp2364
S':'
asbag57
(g78
g59
NtRp2365
(dp2366
g62
(dp2367
sg71
g2352
sg64
(lp2368
g57
(g58
g59
NtRp2369
(dp2370
g62
(dp2371
g70
I3
ssg71
g2365
sg64
(lp2372
g729
asbasbasbag57
(g73
g59
NtRp2373
(dp2374
g62
(dp2375
sg71
g2327
sg64
(lp2376
g57
(g78
g59
NtRp2377
(dp2378
g62
(dp2379
g82
g83
ssg71
g2373
sg64
(lp2380
S'HTTP_ACCEPT_ENCODING'
p2381
asbag57
(g78
g59
NtRp2382
(dp2383
g62
(dp2384
g89
g90
ssg71
g2373
sg64
(lp2385
S':'
asbag57
(g78
g59
NtRp2386
(dp2387
g62
(dp2388
sg71
g2373
sg64
(lp2389
g57
(g58
g59
NtRp2390
(dp2391
g62
(dp2392
g70
I3
ssg71
g2386
sg64
(lp2393
g751
asbasbasbag57
(g73
g59
NtRp2394
(dp2395
g62
(dp2396
sg71
g2327
sg64
(lp2397
g57
(g78
g59
NtRp2398
(dp2399
g62
(dp2400
g82
g83
ssg71
g2394
sg64
(lp2401
S'HTTP_ACCEPT_LANGUAGE'
p2402
asbag57
(g78
g59
NtRp2403
(dp2404
g62
(dp2405
g89
g90
ssg71
g2394
sg64
(lp2406
S':'
asbag57
(g78
g59
NtRp2407
(dp2408
g62
(dp2409
sg71
g2394
sg64
(lp2410
g57
(g58
g59
NtRp2411
(dp2412
g62
(dp2413
g70
I3
ssg71
g2407
sg64
(lp2414
g773
asbasbasbag57
(g73
g59
NtRp2415
(dp2416
g62
(dp2417
sg71
g2327
sg64
(lp2418
g57
(g78
g59
NtRp2419
(dp2420
g62
(dp2421
g82
g83
ssg71
g2415
sg64
(lp2422
S'HTTP_CONNECTION'
p2423
asbag57
(g78
g59
NtRp2424
(dp2425
g62
(dp2426
g89
g90
ssg71
g2415
sg64
(lp2427
S':'
asbag57
(g78
g59
NtRp2428
(dp2429
g62
(dp2430
sg71
g2415
sg64
(lp2431
g57
(g58
g59
NtRp2432
(dp2433
g62
(dp2434
g70
I3
ssg71
g2428
sg64
(lp2435
g795
asbasbasbag57
(g73
g59
NtRp2436
(dp2437
g62
(dp2438
sg71
g2327
sg64
(lp2439
g57
(g78
g59
NtRp2440
(dp2441
g62
(dp2442
g82
g83
ssg71
g2436
sg64
(lp2443
S'HTTP_COOKIE'
p2444
asbag57
(g78
g59
NtRp2445
(dp2446
g62
(dp2447
g89
g90
ssg71
g2436
sg64
(lp2448
S':'
asbag57
(g78
g59
NtRp2449
(dp2450
g62
(dp2451
sg71
g2436
sg64
(lp2452
g57
(g58
g59
NtRp2453
(dp2454
g62
(dp2455
g70
I3
ssg71
g2449
sg64
(lp2456
g817
asbasbasbag57
(g73
g59
NtRp2457
(dp2458
g62
(dp2459
sg71
g2327
sg64
(lp2460
g57
(g78
g59
NtRp2461
(dp2462
g62
(dp2463
g82
g83
ssg71
g2457
sg64
(lp2464
S'HTTP_HOST'
p2465
asbag57
(g78
g59
NtRp2466
(dp2467
g62
(dp2468
g89
g90
ssg71
g2457
sg64
(lp2469
S':'
asbag57
(g78
g59
NtRp2470
(dp2471
g62
(dp2472
sg71
g2457
sg64
(lp2473
g57
(g58
g59
NtRp2474
(dp2475
g62
(dp2476
g70
I3
ssg71
g2470
sg64
(lp2477
g839
asbasbasbag57
(g73
g59
NtRp2478
(dp2479
g62
(dp2480
sg71
g2327
sg64
(lp2481
g57
(g78
g59
NtRp2482
(dp2483
g62
(dp2484
g82
g83
ssg71
g2478
sg64
(lp2485
S'HTTP_REFERER'
p2486
asbag57
(g78
g59
NtRp2487
(dp2488
g62
(dp2489
g89
g90
ssg71
g2478
sg64
(lp2490
S':'
asbag57
(g78
g59
NtRp2491
(dp2492
g62
(dp2493
sg71
g2478
sg64
(lp2494
g57
(g58
g59
NtRp2495
(dp2496
g62
(dp2497
g70
I3
ssg71
g2491
sg64
(lp2498
g861
asbasbasbag57
(g73
g59
NtRp2499
(dp2500
g62
(dp2501
sg71
g2327
sg64
(lp2502
g57
(g78
g59
NtRp2503
(dp2504
g62
(dp2505
g82
g83
ssg71
g2499
sg64
(lp2506
S'HTTP_USER_AGENT'
p2507
asbag57
(g78
g59
NtRp2508
(dp2509
g62
(dp2510
g89
g90
ssg71
g2499
sg64
(lp2511
S':'
asbag57
(g78
g59
NtRp2512
(dp2513
g62
(dp2514
sg71
g2499
sg64
(lp2515
g57
(g58
g59
NtRp2516
(dp2517
g62
(dp2518
g70
I3
ssg71
g2512
sg64
(lp2519
g883
asbasbasbag57
(g73
g59
NtRp2520
(dp2521
g62
(dp2522
sg71
g2327
sg64
(lp2523
g57
(g78
g59
NtRp2524
(dp2525
g62
(dp2526
g82
g83
ssg71
g2520
sg64
(lp2527
S'PATH_INFO'
p2528
asbag57
(g78
g59
NtRp2529
(dp2530
g62
(dp2531
g89
g90
ssg71
g2520
sg64
(lp2532
S':'
asbag57
(g78
g59
NtRp2533
(dp2534
g62
(dp2535
sg71
g2520
sg64
(lp2536
g57
(g58
g59
NtRp2537
(dp2538
g62
(dp2539
g70
I3
ssg71
g2533
sg64
(lp2540
g1037
asbasbasbag57
(g73
g59
NtRp2541
(dp2542
g62
(dp2543
sg71
g2327
sg64
(lp2544
g57
(g78
g59
NtRp2545
(dp2546
g62
(dp2547
g82
g83
ssg71
g2541
sg64
(lp2548
S'QUERY_STRING'
p2549
asbag57
(g78
g59
NtRp2550
(dp2551
g62
(dp2552
g89
g90
ssg71
g2541
sg64
(lp2553
S':'
asbag57
(g78
g59
NtRp2554
(dp2555
g62
(dp2556
sg71
g2541
sg64
(lp2557
g57
(g58
g59
NtRp2558
(dp2559
g62
(dp2560
g70
I3
ssg71
g2554
sg64
(lp2561
g1059
asbasbasbag57
(g73
g59
NtRp2562
(dp2563
g62
(dp2564
sg71
g2327
sg64
(lp2565
g57
(g78
g59
NtRp2566
(dp2567
g62
(dp2568
g82
g83
ssg71
g2562
sg64
(lp2569
S'REMOTE_ADDR'
p2570
asbag57
(g78
g59
NtRp2571
(dp2572
g62
(dp2573
g89
g90
ssg71
g2562
sg64
(lp2574
S':'
asbag57
(g78
g59
NtRp2575
(dp2576
g62
(dp2577
sg71
g2562
sg64
(lp2578
g57
(g58
g59
NtRp2579
(dp2580
g62
(dp2581
g70
I3
ssg71
g2575
sg64
(lp2582
g263
asbasbasbag57
(g73
g59
NtRp2583
(dp2584
g62
(dp2585
sg71
g2327
sg64
(lp2586
g57
(g78
g59
NtRp2587
(dp2588
g62
(dp2589
g82
g83
ssg71
g2583
sg64
(lp2590
S'REMOTE_PORT'
p2591
asbag57
(g78
g59
NtRp2592
(dp2593
g62
(dp2594
g89
g90
ssg71
g2583
sg64
(lp2595
S':'
asbag57
(g78
g59
NtRp2596
(dp2597
g62
(dp2598
sg71
g2583
sg64
(lp2599
g57
(g58
g59
NtRp2600
(dp2601
g62
(dp2602
g70
I3
ssg71
g2596
sg64
(lp2603
g1102
asbasbasbag57
(g73
g59
NtRp2604
(dp2605
g62
(dp2606
sg71
g2327
sg64
(lp2607
g57
(g78
g59
NtRp2608
(dp2609
g62
(dp2610
g82
g83
ssg71
g2604
sg64
(lp2611
S'REQUEST_METHOD'
p2612
asbag57
(g78
g59
NtRp2613
(dp2614
g62
(dp2615
g89
g90
ssg71
g2604
sg64
(lp2616
S':'
asbag57
(g78
g59
NtRp2617
(dp2618
g62
(dp2619
sg71
g2604
sg64
(lp2620
g57
(g58
g59
NtRp2621
(dp2622
g62
(dp2623
g70
I3
ssg71
g2617
sg64
(lp2624
g1124
asbasbasbag57
(g73
g59
NtRp2625
(dp2626
g62
(dp2627
sg71
g2327
sg64
(lp2628
g57
(g78
g59
NtRp2629
(dp2630
g62
(dp2631
g82
g83
ssg71
g2625
sg64
(lp2632
S'REQUEST_URI'
p2633
asbag57
(g78
g59
NtRp2634
(dp2635
g62
(dp2636
g89
g90
ssg71
g2625
sg64
(lp2637
S':'
asbag57
(g78
g59
NtRp2638
(dp2639
g62
(dp2640
sg71
g2625
sg64
(lp2641
g57
(g58
g59
NtRp2642
(dp2643
g62
(dp2644
g70
I3
ssg71
g2638
sg64
(lp2645
g1146
asbasbasbag57
(g73
g59
NtRp2646
(dp2647
g62
(dp2648
sg71
g2327
sg64
(lp2649
g57
(g78
g59
NtRp2650
(dp2651
g62
(dp2652
g82
g83
ssg71
g2646
sg64
(lp2653
S'SCRIPT_NAME'
p2654
asbag57
(g78
g59
NtRp2655
(dp2656
g62
(dp2657
g89
g90
ssg71
g2646
sg64
(lp2658
S':'
asbag57
(g78
g59
NtRp2659
(dp2660
g62
(dp2661
sg71
g2646
sg64
(lp2662
g57
(g58
g59
NtRp2663
(dp2664
g62
(dp2665
g70
I3
ssg71
g2659
sg64
(lp2666
S''
asbasbasbag57
(g73
g59
NtRp2667
(dp2668
g62
(dp2669
sg71
g2327
sg64
(lp2670
g57
(g78
g59
NtRp2671
(dp2672
g62
(dp2673
g82
g83
ssg71
g2667
sg64
(lp2674
S'SERVER_NAME'
p2675
asbag57
(g78
g59
NtRp2676
(dp2677
g62
(dp2678
g89
g90
ssg71
g2667
sg64
(lp2679
S':'
asbag57
(g78
g59
NtRp2680
(dp2681
g62
(dp2682
sg71
g2667
sg64
(lp2683
g57
(g58
g59
NtRp2684
(dp2685
g62
(dp2686
g70
I3
ssg71
g2680
sg64
(lp2687
g1189
asbasbasbag57
(g73
g59
NtRp2688
(dp2689
g62
(dp2690
sg71
g2327
sg64
(lp2691
g57
(g78
g59
NtRp2692
(dp2693
g62
(dp2694
g82
g83
ssg71
g2688
sg64
(lp2695
S'SERVER_PORT'
p2696
asbag57
(g78
g59
NtRp2697
(dp2698
g62
(dp2699
g89
g90
ssg71
g2688
sg64
(lp2700
S':'
asbag57
(g78
g59
NtRp2701
(dp2702
g62
(dp2703
sg71
g2688
sg64
(lp2704
g57
(g58
g59
NtRp2705
(dp2706
g62
(dp2707
g70
I3
ssg71
g2701
sg64
(lp2708
g1211
asbasbasbag57
(g73
g59
NtRp2709
(dp2710
g62
(dp2711
sg71
g2327
sg64
(lp2712
g57
(g78
g59
NtRp2713
(dp2714
g62
(dp2715
g82
g83
ssg71
g2709
sg64
(lp2716
S'SERVER_PROTOCOL'
p2717
asbag57
(g78
g59
NtRp2718
(dp2719
g62
(dp2720
g89
g90
ssg71
g2709
sg64
(lp2721
S':'
asbag57
(g78
g59
NtRp2722
(dp2723
g62
(dp2724
sg71
g2709
sg64
(lp2725
g57
(g58
g59
NtRp2726
(dp2727
g62
(dp2728
g70
I3
ssg71
g2722
sg64
(lp2729
g1233
asbasbasbag57
(g73
g59
NtRp2730
(dp2731
g62
(dp2732
sg71
g2327
sg64
(lp2733
g57
(g78
g59
NtRp2734
(dp2735
g62
(dp2736
g82
g83
ssg71
g2730
sg64
(lp2737
S'SERVER_SOFTWARE'
p2738
asbag57
(g78
g59
NtRp2739
(dp2740
g62
(dp2741
g89
g90
ssg71
g2730
sg64
(lp2742
S':'
asbag57
(g78
g59
NtRp2743
(dp2744
g62
(dp2745
sg71
g2730
sg64
(lp2746
g57
(g58
g59
NtRp2747
(dp2748
g62
(dp2749
g70
I3
ssg71
g2743
sg64
(lp2750
g1255
asbasbasbag57
(g73
g59
NtRp2751
(dp2752
g62
(dp2753
sg71
g2327
sg64
(lp2754
g57
(g78
g59
NtRp2755
(dp2756
g62
(dp2757
g82
g83
ssg71
g2751
sg64
(lp2758
S'wsgi.errors'
p2759
asbag57
(g78
g59
NtRp2760
(dp2761
g62
(dp2762
g89
g90
ssg71
g2751
sg64
(lp2763
S':'
asbag57
(g78
g59
NtRp2764
(dp2765
g62
(dp2766
sg71
g2751
sg64
(lp2767
g57
(g58
g59
NtRp2768
(dp2769
g62
(dp2770
g70
I3
ssg71
g2764
sg64
(lp2771
S"<open file '<stderr>', mode 'w' at 0xb72a30d0>"
p2772
asbasbasbag57
(g73
g59
NtRp2773
(dp2774
g62
(dp2775
sg71
g2327
sg64
(lp2776
g57
(g78
g59
NtRp2777
(dp2778
g62
(dp2779
g82
g83
ssg71
g2773
sg64
(lp2780
S'wsgi.file_wrapper'
p2781
asbag57
(g78
g59
NtRp2782
(dp2783
g62
(dp2784
g89
g90
ssg71
g2773
sg64
(lp2785
S':'
asbag57
(g78
g59
NtRp2786
(dp2787
g62
(dp2788
sg71
g2773
sg64
(lp2789
g57
(g58
g59
NtRp2790
(dp2791
g62
(dp2792
g70
I3
ssg71
g2786
sg64
(lp2793
S'<class wsgiref.util.FileWrapper at 0xa405a4c>'
p2794
asbasbasbag57
(g73
g59
NtRp2795
(dp2796
g62
(dp2797
sg71
g2327
sg64
(lp2798
g57
(g78
g59
NtRp2799
(dp2800
g62
(dp2801
g82
g83
ssg71
g2795
sg64
(lp2802
S'wsgi.input'
p2803
asbag57
(g78
g59
NtRp2804
(dp2805
g62
(dp2806
g89
g90
ssg71
g2795
sg64
(lp2807
S':'
asbag57
(g78
g59
NtRp2808
(dp2809
g62
(dp2810
sg71
g2795
sg64
(lp2811
g57
(g58
g59
NtRp2812
(dp2813
g62
(dp2814
g70
I3
ssg71
g2808
sg64
(lp2815
S'<cStringIO.StringO object at 0xae68ad40>'
p2816
asbasbasbag57
(g73
g59
NtRp2817
(dp2818
g62
(dp2819
sg71
g2327
sg64
(lp2820
g57
(g78
g59
NtRp2821
(dp2822
g62
(dp2823
g82
g83
ssg71
g2817
sg64
(lp2824
S'wsgi.multiprocess'
p2825
asbag57
(g78
g59
NtRp2826
(dp2827
g62
(dp2828
g89
g90
ssg71
g2817
sg64
(lp2829
S':'
asbag57
(g78
g59
NtRp2830
(dp2831
g62
(dp2832
sg71
g2817
sg64
(lp2833
g57
(g58
g59
NtRp2834
(dp2835
g62
(dp2836
g70
I3
ssg71
g2830
sg64
(lp2837
g100
asbasbasbag57
(g73
g59
NtRp2838
(dp2839
g62
(dp2840
sg71
g2327
sg64
(lp2841
g57
(g78
g59
NtRp2842
(dp2843
g62
(dp2844
g82
g83
ssg71
g2838
sg64
(lp2845
S'wsgi.multithread'
p2846
asbag57
(g78
g59
NtRp2847
(dp2848
g62
(dp2849
g89
g90
ssg71
g2838
sg64
(lp2850
S':'
asbag57
(g78
g59
NtRp2851
(dp2852
g62
(dp2853
sg71
g2838
sg64
(lp2854
g57
(g58
g59
NtRp2855
(dp2856
g62
(dp2857
g70
I3
ssg71
g2851
sg64
(lp2858
g1472
asbasbasbag57
(g73
g59
NtRp2859
(dp2860
g62
(dp2861
sg71
g2327
sg64
(lp2862
g57
(g78
g59
NtRp2863
(dp2864
g62
(dp2865
g82
g83
ssg71
g2859
sg64
(lp2866
S'wsgi.run_once'
p2867
asbag57
(g78
g59
NtRp2868
(dp2869
g62
(dp2870
g89
g90
ssg71
g2859
sg64
(lp2871
S':'
asbag57
(g78
g59
NtRp2872
(dp2873
g62
(dp2874
sg71
g2859
sg64
(lp2875
g57
(g58
g59
NtRp2876
(dp2877
g62
(dp2878
g70
I3
ssg71
g2872
sg64
(lp2879
g100
asbasbasbag57
(g73
g59
NtRp2880
(dp2881
g62
(dp2882
sg71
g2327
sg64
(lp2883
g57
(g78
g59
NtRp2884
(dp2885
g62
(dp2886
g82
g83
ssg71
g2880
sg64
(lp2887
S'wsgi.url_scheme'
p2888
asbag57
(g78
g59
NtRp2889
(dp2890
g62
(dp2891
g89
g90
ssg71
g2880
sg64
(lp2892
S':'
asbag57
(g78
g59
NtRp2893
(dp2894
g62
(dp2895
sg71
g2880
sg64
(lp2896
g57
(g58
g59
NtRp2897
(dp2898
g62
(dp2899
g70
I3
ssg71
g2893
sg64
(lp2900
g1515
asbasbasbag57
(g73
g59
NtRp2901
(dp2902
g62
(dp2903
sg71
g2327
sg64
(lp2904
g57
(g78
g59
NtRp2905
(dp2906
g62
(dp2907
g82
g83
ssg71
g2901
sg64
(lp2908
S'wsgi.version'
p2909
asbag57
(g78
g59
NtRp2910
(dp2911
g62
(dp2912
g89
g90
ssg71
g2901
sg64
(lp2913
S':'
asbag57
(g78
g59
NtRp2914
(dp2915
g62
(dp2916
sg71
g2901
sg64
(lp2917
g57
(g58
g59
NtRp2918
(dp2919
g62
(dp2920
g70
I3
ssg71
g2914
sg64
(lp2921
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2922
(lp2923
(dp2924
S'file'
p2925
S'/home/anil/bootstrap/web2py/gluon/restricted.py'
p2926
sS'dump'
p2927
(dp2928
S'environment'
p2929
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p2930
sS'ccode'
p2931
S'<code object <module> at 0xb58c6c80, file "/home...DEV_bootstrap_ch/controllers/default.py", line 1>'
p2932
ssS'lnum'
p2933
I212
sS'lines'
p2934
(dp2935
I207
S'    try:'
p2936
sI208
S'        if isinstance(code, types.CodeType):'
p2937
sI209
S'            ccode = code'
p2938
sI210
S'        else:'
p2939
sI211
S'            ccode = compile2(code, layer)'
p2940
sI212
S'        exec ccode in environment'
p2941
sI213
S'    except HTTP:'
p2942
sI214
S'        raise'
p2943
sI215
S'    except RestrictedError:'
p2944
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p2945
ssS'call'
p2946
S"(code='import rpy2.robjects as robjects\\n# -*- coding: u...se._vars=response._caller(list_all_dev_projects)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}, layer='/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py')"
p2947
sS'func'
p2948
S'restricted'
p2949
sa(dp2950
g2925
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p2951
sg2927
(dp2952
sg2933
I1106
sg2934
(dp2953
I1095
S'   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """'
p2954
sI1096
S'   """ per sample . takes id of the sample as the input """'
p2955
sI1097
S'   sid = request.args(0)'
p2956
sI1098
S'   sample = db(db.sample.id == sid).select().first()'
p2957
sI1099
S'   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)'
p2958
sI1100
S'   form = SQLFORM(db.sample_files)'
p2959
sI1101
S'   form.vars.sample = sid'
p2960
sI1102
S'   return locals()'
p2961
sI1103
S''
sI1104
S''
ssg2946
S'()'
p2962
sg2948
S'<module>'
p2963
sa(dp2964
g2925
S'/home/anil/bootstrap/web2py/gluon/globals.py'
p2965
sg2927
(dp2966
S'self'
p2967
S'undefined'
p2968
sS'f'
S'<function list_all_dev_projects>'
p2969
ssg2933
I193
sg2934
(dp2970
I192
S'        self._vars = None'
p2971
sI193
S'        self._caller = lambda f: f()'
p2972
sI194
S'        self._view_environment = None'
p2973
sI195
S'        self._custom_commit = None'
p2974
sI196
S'        self._custom_rollback = None'
p2975
sI197
S''
sI188
S'        self.menu = []             # used by the default view layout'
p2976
sI189
S'        self.files = []            # used by web2py_ajax.html'
p2977
sI190
S'        self.generic_patterns = []  # patterns to allow generic views'
p2978
sI191
S"        self.delimiters = ('{{', '}}')"
p2979
ssg2946
S'(f=<function list_all_dev_projects>)'
p2980
sg2948
S'<lambda>'
p2981
sa(dp2982
g2925
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p2983
sg2927
(dp2984
S'global grid'
p2985
S'<function grid>'
p2986
sS'ck'
p2987
S"{'project': <Query (project.project_status = '0')>, 'sample': <Query (sample.experimentalist = 2)>}"
p2988
sS'links'
p2989
S"{'sample': [<function <lambda>>, {'body': <function <lambda>>, 'header': 'name'}]}"
p2990
sS'db.project'
p2991
S'<Table project (id,name,code,start_date,project_...name,project_publication_date,project_pubmed_id)>'
p2992
sS'global SQLFORM'
p2993
S"<class 'gluon.sqlhtml.SQLFORM'>"
p2994
sS'create'
p2995
g2968
sS'editable'
p2996
g2968
sS'linked_tables'
p2997
g2968
sS'deletable'
p2998
g2968
sS'fields'
p2999
g2968
sS'global db'
p3000
S'<DAL uri="sqlite://storage.sqlite">'
p3001
sS'fi'
p3002
S'[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>]'
p3003
sS'SQLFORM.smartgrid'
p3004
S'<function smartgrid>'
p3005
sS'create_dict'
p3006
S"{'project': False, 'sample': True}"
p3007
sS'edit_dict'
p3008
S"{'project': False}"
p3009
sS'delete_dict'
p3010
S"{'project': False}"
p3011
ssg2933
I317
sg2934
(dp3012
I320
S'#gets table name and rowid as input and creates another row with same details as rowid recod has'
p3013
sI321
S'def tes(a):'
p3014
sI312
S'    l1=[lambda row: A(\'copy\'+str(row.id),_href=URL("default","replicate",args=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],row.id])),dict(header = \'name\',body = lambda row: A(\'copy\'+tes(row.id),_href=URL("default","replicate",args=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],row.id])))]'
p3015
sI313
S"    links={'sample':l1}"
p3016
sI314
S'#customized Views for certain forms using router'
p3017
sI315
S"    if 'view' in request.args or 'edit' in request.args or 'new' in request.args:"
p3018
sI316
S'     \trouter(request.args)'
p3019
sI317
S"    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=['experiment','sample','biosource','plant_growth_condition','treatments','harvests','extraction_preparation','gas_chromatography','liquid_chromatography','mass_spectroscopy','spectrophotometry','raw_data_storage_information'])"
p3020
sI318
S'    return locals()'
p3021
sI319
S''
ssg2946
S'()'
p3022
sg2948
S'list_all_dev_projects'
p3023
sa(dp3024
g2925
S'/home/anil/bootstrap/web2py/gluon/sqlhtml.py'
p3025
sg2927
(dp3026
S'user_signature'
p3027
g1472
sS'kwargs'
p3028
S"{'create': False, 'deletable': False, 'editable': False, 'fields': [<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>]}"
p3029
ssg2933
I2489
sg2934
(dp3030
I2484
S'                        A(SPAN(t), _class=trap_class(), _href=url('
p3031
sI2485
S'                          args=[args0, row[id_field_name]])))'
p3032
sI2486
S''
sI2487
S'        grid = SQLFORM.grid(query, args=request.args[:nargs], links=links,'
p3033
sI2488
S'                            links_in_grid=links_in_grid,'
p3034
sI2489
S'                            user_signature=user_signature, **kwargs)'
p3035
sI2490
S'        if isinstance(grid, DIV):'
p3036
sI2491
S"            header = table._plural + (field and ' for ' + field.name or '')"
p3037
sI2492
S'            breadcrumbs.append(LI(A(T(header), _class=trap_class(),'
p3038
sI2493
S"                                    _href=url()), _class='active w2p_grid_breadcrumb_elem'))"
p3039
ssg2946
S"(table=<Table project (id,name,code,start_date,project_...name,project_publication_date,project_pubmed_id)>, constraints={'project': <Query (project.project_status = '0')>, 'sample': <Query (sample.experimentalist = 2)>}, linked_tables=['experiment', 'sample', 'biosource', 'plant_growth_condition', 'treatments', 'harvests', 'extraction_preparation', 'gas_chromatography', 'liquid_chromatography', 'mass_spectroscopy', 'spectrophotometry', 'raw_data_storage_information'], links=[<function <lambda>>], links_in_grid=True, args=[], user_signature=True, divider='>', breadcrumbs_class='', **kwargs={'create': False, 'deletable': False, 'editable': False, 'fields': [<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>]})"
p3040
sg2948
S'smartgrid'
p3041
sa(dp3042
g2925
S'/home/anil/bootstrap/web2py/gluon/sqlhtml.py'
p3043
sg2927
(dp3044
S'formfooter'
p3045
S'<gluon.html.DIV object>'
p3046
sS'edit'
p3047
g2968
sS'res'
p3048
g2968
sS'editable'
p3049
g100
sS'buttons'
p3050
S'<function buttons>'
p3051
sS'record'
p3052
S"<Row {'code': 't21', 'name': 'test', 'project_jo...ordinator': 1, 'project_publication_date': None}>"
p3053
sS'global DIV'
p3054
S"<class 'gluon.html.DIV'>"
p3055
sS'_class'
p3056
S"'web2py_grid'"
p3057
sS'view_form'
p3058
S'<gluon.sqlhtml.SQLFORM object>'
p3059
ssg2933
I1897
sg2934
(dp3060
I1892
S'            sqlformargs.update(viewargs)'
p3061
sI1893
S'            view_form = SQLFORM('
p3062
sI1894
S'                table, record, upload=upload, ignore_rw=ignore_rw,'
p3063
sI1895
S"                formstyle=formstyle, readonly=True, _class='web2py_form',"
p3064
sI1896
S'                **sqlformargs)'
p3065
sI1897
S'            res = DIV(buttons(edit=editable, record=record), view_form,'
p3066
sI1898
S'                      formfooter, _class=_class)'
p3067
sI1899
S'            res.create_form = create_form'
p3068
sI1900
S'            res.update_form = update_form'
p3069
sI1901
S'            res.view_form = view_form'
p3070
ssg2946
S"(query=<Query ((project.id > 0) AND (project.project_status = '0'))>, fields=[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], field_id=<gluon.dal.Field object>, left=None, headers={}, orderby=None, groupby=None, searchable=True, sortable=True, paginate=20, deletable=False, editable=False, details=True, selectable=None, create=False, csv=True, links=[<function <lambda>>], links_in_grid=True, upload=<function <lambda>>, args=['project'], user_signature=True, maxtextlengths={}, maxtextlength=20, onvalidation=None, oncreate=None, onupdate=None, ondelete=None, sorter_icons=(<gluon.html.XML object>, <gluon.html.XML object>), ui={'button': 'ui-button-text-icon-primary', 'buttonadd': 'ui-icon ui-icon-plusthick', 'buttonback': 'ui-icon ui-icon-arrowreturnthick-1-w', 'buttondelete': 'ui-icon ui-icon-trash', 'buttonedit': 'ui-icon ui-icon-pencil', 'buttonexport': 'ui-icon ui-icon-transferthick-e-w', 'buttontable': 'ui-icon ui-icon-triangle-1-e', 'buttontext': 'ui-button-text', 'buttonview': 'ui-icon ui-icon-zoomin', 'content': 'ui-widget-content', ...}, showbuttontext=True, _class='web2py_grid', formname='web2py_grid', search_widget='default', ignore_rw=False, formstyle='table3cols', exportclasses=None, formargs={}, createargs={}, editargs={}, viewargs={}, buttons_placement='right', links_placement='right')"
p3071
sg2948
S'grid'
p3072
sa(dp3073
g2925
S'/home/anil/bootstrap/web2py/gluon/sqlhtml.py'
p3074
sg2927
(dp3075
S'buttons'
p3076
S'<gluon.html.DIV object>'
p3077
sS'buttons.append'
p3078
S'<bound method DIV.append of <gluon.html.DIV object>>'
p3079
sS'link'
p3080
S'<function <lambda>>'
p3081
sS'record'
p3082
S"<Row {'code': 't21', 'name': 'test', 'project_jo...ordinator': 1, 'project_publication_date': None}>"
p3083
ssg2933
I1854
sg2934
(dp3084
I1856
S''
sI1857
S'        def linsert(lst, i, x):'
p3085
sI1858
S'            """'
p3086
sI1849
S'            if record and links:'
p3087
sI1850
S'                for link in links:'
p3088
sI1851
S'                    if isinstance(link, dict):'
p3089
sI1852
S"                        buttons.append(link['body'](record))"
p3090
sI1853
S'                    elif link(record):'
p3091
sI1854
S'                        buttons.append(link(record))'
p3092
sI1855
S'            return buttons'
p3093
ssg2946
S"(edit=False, view=False, record=<Row {'code': 't21', 'name': 'test', 'project_jo...ordinator': 1, 'project_publication_date': None}>)"
p3094
sg2948
S'buttons'
p3095
sasS'pyver'
p3096
S'Python 2.7.3: /usr/bin/python'
p3097
sS'session'
p3098
g57
(g58
g59
NtRp3099
(dp3100
g62
(dp3101
sg64
(lp3102
g57
(g66
g59
NtRp3103
(dp3104
g62
(dp3105
g70
I5
ssg71
Nsg64
(lp3106
g57
(g73
g59
NtRp3107
(dp3108
g62
(dp3109
sg71
g3103
sg64
(lp3110
g57
(g78
g59
NtRp3111
(dp3112
g62
(dp3113
g82
g83
ssg71
g3107
sg64
(lp3114
S'auth'
p3115
asbag57
(g78
g59
NtRp3116
(dp3117
g62
(dp3118
g89
g90
ssg71
g3107
sg64
(lp3119
S':'
asbag57
(g78
g59
NtRp3120
(dp3121
g62
(dp3122
sg71
g3107
sg64
(lp3123
g57
(g58
g59
NtRp3124
(dp3125
g62
(dp3126
g70
I5
ssg71
g3120
sg64
(lp3127
g57
(g66
g59
NtRp3128
(dp3129
g62
(dp3130
g70
I4
ssg71
Nsg64
(lp3131
g57
(g73
g59
NtRp3132
(dp3133
g62
(dp3134
sg71
g3128
sg64
(lp3135
g57
(g78
g59
NtRp3136
(dp3137
g62
(dp3138
g82
g83
ssg71
g3132
sg64
(lp3139
S'expiration'
p3140
asbag57
(g78
g59
NtRp3141
(dp3142
g62
(dp3143
g89
g90
ssg71
g3132
sg64
(lp3144
S':'
asbag57
(g78
g59
NtRp3145
(dp3146
g62
(dp3147
sg71
g3132
sg64
(lp3148
g57
(g58
g59
NtRp3149
(dp3150
g62
(dp3151
g70
I4
ssg71
g3145
sg64
(lp3152
S'2592000'
p3153
asbasbasbag57
(g73
g59
NtRp3154
(dp3155
g62
(dp3156
sg71
g3128
sg64
(lp3157
g57
(g78
g59
NtRp3158
(dp3159
g62
(dp3160
g82
g83
ssg71
g3154
sg64
(lp3161
S'hmac_key'
p3162
asbag57
(g78
g59
NtRp3163
(dp3164
g62
(dp3165
g89
g90
ssg71
g3154
sg64
(lp3166
S':'
asbag57
(g78
g59
NtRp3167
(dp3168
g62
(dp3169
sg71
g3154
sg64
(lp3170
g57
(g58
g59
NtRp3171
(dp3172
g62
(dp3173
g70
I4
ssg71
g3167
sg64
(lp3174
S'11fc622b-02bf-4f2a-8e07-fc63863907e8'
p3175
asbasbasbag57
(g73
g59
NtRp3176
(dp3177
g62
(dp3178
sg71
g3128
sg64
(lp3179
g57
(g78
g59
NtRp3180
(dp3181
g62
(dp3182
g82
g83
ssg71
g3176
sg64
(lp3183
S'last_visit'
p3184
asbag57
(g78
g59
NtRp3185
(dp3186
g62
(dp3187
g89
g90
ssg71
g3176
sg64
(lp3188
S':'
asbag57
(g78
g59
NtRp3189
(dp3190
g62
(dp3191
sg71
g3176
sg64
(lp3192
g57
(g58
g59
NtRp3193
(dp3194
g62
(dp3195
g70
I4
ssg71
g3189
sg64
(lp3196
S'datetime.datetime(2013, 2, 18, 0, 21, 50, 823546)'
p3197
asbasbasbag57
(g73
g59
NtRp3198
(dp3199
g62
(dp3200
sg71
g3128
sg64
(lp3201
g57
(g78
g59
NtRp3202
(dp3203
g62
(dp3204
g82
g83
ssg71
g3198
sg64
(lp3205
S'remember'
p3206
asbag57
(g78
g59
NtRp3207
(dp3208
g62
(dp3209
g89
g90
ssg71
g3198
sg64
(lp3210
S':'
asbag57
(g78
g59
NtRp3211
(dp3212
g62
(dp3213
sg71
g3198
sg64
(lp3214
g57
(g58
g59
NtRp3215
(dp3216
g62
(dp3217
g70
I4
ssg71
g3211
sg64
(lp3218
g1472
asbasbasbag57
(g73
g59
NtRp3219
(dp3220
g62
(dp3221
sg71
g3128
sg64
(lp3222
g57
(g78
g59
NtRp3223
(dp3224
g62
(dp3225
g82
g83
ssg71
g3219
sg64
(lp3226
S'user'
p3227
asbag57
(g78
g59
NtRp3228
(dp3229
g62
(dp3230
g89
g90
ssg71
g3219
sg64
(lp3231
S':'
asbag57
(g78
g59
NtRp3232
(dp3233
g62
(dp3234
sg71
g3219
sg64
(lp3235
g57
(g58
g59
NtRp3236
(dp3237
g62
(dp3238
g70
I4
ssg71
g3232
sg64
(lp3239
g57
(g66
g59
NtRp3240
(dp3241
g62
(dp3242
g70
I3
ssg71
Nsg64
(lp3243
g57
(g73
g59
NtRp3244
(dp3245
g62
(dp3246
sg71
g3240
sg64
(lp3247
g57
(g78
g59
NtRp3248
(dp3249
g62
(dp3250
g82
g83
ssg71
g3244
sg64
(lp3251
S'address'
p3252
asbag57
(g78
g59
NtRp3253
(dp3254
g62
(dp3255
g89
g90
ssg71
g3244
sg64
(lp3256
S':'
asbag57
(g78
g59
NtRp3257
(dp3258
g62
(dp3259
sg71
g3244
sg64
(lp3260
g57
(g58
g59
NtRp3261
(dp3262
g62
(dp3263
g70
I3
ssg71
g3257
sg64
(lp3264
S'a'
asbasbasbag57
(g73
g59
NtRp3265
(dp3266
g62
(dp3267
sg71
g3240
sg64
(lp3268
g57
(g78
g59
NtRp3269
(dp3270
g62
(dp3271
g82
g83
ssg71
g3265
sg64
(lp3272
S'affiliated_to'
p3273
asbag57
(g78
g59
NtRp3274
(dp3275
g62
(dp3276
g89
g90
ssg71
g3265
sg64
(lp3277
S':'
asbag57
(g78
g59
NtRp3278
(dp3279
g62
(dp3280
sg71
g3265
sg64
(lp3281
g57
(g58
g59
NtRp3282
(dp3283
g62
(dp3284
g70
I3
ssg71
g3278
sg64
(lp3285
S'a'
asbasbasbag57
(g73
g59
NtRp3286
(dp3287
g62
(dp3288
sg71
g3240
sg64
(lp3289
g57
(g78
g59
NtRp3290
(dp3291
g62
(dp3292
g82
g83
ssg71
g3286
sg64
(lp3293
S'city'
p3294
asbag57
(g78
g59
NtRp3295
(dp3296
g62
(dp3297
g89
g90
ssg71
g3286
sg64
(lp3298
S':'
asbag57
(g78
g59
NtRp3299
(dp3300
g62
(dp3301
sg71
g3286
sg64
(lp3302
g57
(g58
g59
NtRp3303
(dp3304
g62
(dp3305
g70
I3
ssg71
g3299
sg64
(lp3306
S'a'
asbasbasbag57
(g73
g59
NtRp3307
(dp3308
g62
(dp3309
sg71
g3240
sg64
(lp3310
g57
(g78
g59
NtRp3311
(dp3312
g62
(dp3313
g82
g83
ssg71
g3307
sg64
(lp3314
S'country'
p3315
asbag57
(g78
g59
NtRp3316
(dp3317
g62
(dp3318
g89
g90
ssg71
g3307
sg64
(lp3319
S':'
asbag57
(g78
g59
NtRp3320
(dp3321
g62
(dp3322
sg71
g3307
sg64
(lp3323
g57
(g58
g59
NtRp3324
(dp3325
g62
(dp3326
g70
I3
ssg71
g3320
sg64
(lp3327
S'India'
p3328
asbasbasbag57
(g73
g59
NtRp3329
(dp3330
g62
(dp3331
sg71
g3240
sg64
(lp3332
g57
(g78
g59
NtRp3333
(dp3334
g62
(dp3335
g82
g83
ssg71
g3329
sg64
(lp3336
S'email'
p3337
asbag57
(g78
g59
NtRp3338
(dp3339
g62
(dp3340
g89
g90
ssg71
g3329
sg64
(lp3341
S':'
asbag57
(g78
g59
NtRp3342
(dp3343
g62
(dp3344
sg71
g3329
sg64
(lp3345
g57
(g58
g59
NtRp3346
(dp3347
g62
(dp3348
g70
I3
ssg71
g3342
sg64
(lp3349
S'anil.iiith@gmail.com'
p3350
asbasbasbag57
(g73
g59
NtRp3351
(dp3352
g62
(dp3353
sg71
g3240
sg64
(lp3354
g57
(g78
g59
NtRp3355
(dp3356
g62
(dp3357
g82
g83
ssg71
g3351
sg64
(lp3358
S'first_name'
p3359
asbag57
(g78
g59
NtRp3360
(dp3361
g62
(dp3362
g89
g90
ssg71
g3351
sg64
(lp3363
S':'
asbag57
(g78
g59
NtRp3364
(dp3365
g62
(dp3366
sg71
g3351
sg64
(lp3367
g57
(g58
g59
NtRp3368
(dp3369
g62
(dp3370
g70
I3
ssg71
g3364
sg64
(lp3371
S'anil'
p3372
asbasbasbag57
(g73
g59
NtRp3373
(dp3374
g62
(dp3375
sg71
g3240
sg64
(lp3376
g57
(g78
g59
NtRp3377
(dp3378
g62
(dp3379
g82
g83
ssg71
g3373
sg64
(lp3380
S'id'
p3381
asbag57
(g78
g59
NtRp3382
(dp3383
g62
(dp3384
g89
g90
ssg71
g3373
sg64
(lp3385
S':'
asbag57
(g78
g59
NtRp3386
(dp3387
g62
(dp3388
sg71
g3373
sg64
(lp3389
g57
(g58
g59
NtRp3390
(dp3391
g62
(dp3392
g70
I3
ssg71
g3386
sg64
(lp3393
S'2'
asbasbasbag57
(g73
g59
NtRp3394
(dp3395
g62
(dp3396
sg71
g3240
sg64
(lp3397
g57
(g78
g59
NtRp3398
(dp3399
g62
(dp3400
g82
g83
ssg71
g3394
sg64
(lp3401
S'last_name'
p3402
asbag57
(g78
g59
NtRp3403
(dp3404
g62
(dp3405
g89
g90
ssg71
g3394
sg64
(lp3406
S':'
asbag57
(g78
g59
NtRp3407
(dp3408
g62
(dp3409
sg71
g3394
sg64
(lp3410
g57
(g58
g59
NtRp3411
(dp3412
g62
(dp3413
g70
I3
ssg71
g3407
sg64
(lp3414
S'n'
asbasbasbag57
(g73
g59
NtRp3415
(dp3416
g62
(dp3417
sg71
g3240
sg64
(lp3418
g57
(g78
g59
NtRp3419
(dp3420
g62
(dp3421
g82
g83
ssg71
g3415
sg64
(lp3422
S'mobile'
p3423
asbag57
(g78
g59
NtRp3424
(dp3425
g62
(dp3426
g89
g90
ssg71
g3415
sg64
(lp3427
S':'
asbag57
(g78
g59
NtRp3428
(dp3429
g62
(dp3430
sg71
g3415
sg64
(lp3431
g57
(g58
g59
NtRp3432
(dp3433
g62
(dp3434
g70
I3
ssg71
g3428
sg64
(lp3435
S'1233'
p3436
asbasbasbag57
(g73
g59
NtRp3437
(dp3438
g62
(dp3439
sg71
g3240
sg64
(lp3440
g57
(g78
g59
NtRp3441
(dp3442
g62
(dp3443
g82
g83
ssg71
g3437
sg64
(lp3444
S'phone'
p3445
asbag57
(g78
g59
NtRp3446
(dp3447
g62
(dp3448
g89
g90
ssg71
g3437
sg64
(lp3449
S':'
asbag57
(g78
g59
NtRp3450
(dp3451
g62
(dp3452
sg71
g3437
sg64
(lp3453
g57
(g58
g59
NtRp3454
(dp3455
g62
(dp3456
g70
I3
ssg71
g3450
sg64
(lp3457
S'123'
p3458
asbasbasbag57
(g73
g59
NtRp3459
(dp3460
g62
(dp3461
sg71
g3240
sg64
(lp3462
g57
(g78
g59
NtRp3463
(dp3464
g62
(dp3465
g82
g83
ssg71
g3459
sg64
(lp3466
S'position'
p3467
asbag57
(g78
g59
NtRp3468
(dp3469
g62
(dp3470
g89
g90
ssg71
g3459
sg64
(lp3471
S':'
asbag57
(g78
g59
NtRp3472
(dp3473
g62
(dp3474
sg71
g3459
sg64
(lp3475
g57
(g58
g59
NtRp3476
(dp3477
g62
(dp3478
g70
I3
ssg71
g3472
sg64
(lp3479
S'0'
asbasbasbag57
(g73
g59
NtRp3480
(dp3481
g62
(dp3482
sg71
g3240
sg64
(lp3483
g57
(g78
g59
NtRp3484
(dp3485
g62
(dp3486
g82
g83
ssg71
g3480
sg64
(lp3487
S'postal_code'
p3488
asbag57
(g78
g59
NtRp3489
(dp3490
g62
(dp3491
g89
g90
ssg71
g3480
sg64
(lp3492
S':'
asbag57
(g78
g59
NtRp3493
(dp3494
g62
(dp3495
sg71
g3480
sg64
(lp3496
g57
(g58
g59
NtRp3497
(dp3498
g62
(dp3499
g70
I3
ssg71
g3493
sg64
(lp3500
S'123'
p3501
asbasbasbag57
(g73
g59
NtRp3502
(dp3503
g62
(dp3504
sg71
g3240
sg64
(lp3505
g57
(g78
g59
NtRp3506
(dp3507
g62
(dp3508
g82
g83
ssg71
g3502
sg64
(lp3509
S'registration_at'
p3510
asbag57
(g78
g59
NtRp3511
(dp3512
g62
(dp3513
g89
g90
ssg71
g3502
sg64
(lp3514
S':'
asbag57
(g78
g59
NtRp3515
(dp3516
g62
(dp3517
sg71
g3502
sg64
(lp3518
g57
(g58
g59
NtRp3519
(dp3520
g62
(dp3521
g70
I3
ssg71
g3515
sg64
(lp3522
S'0'
asbasbasbag57
(g73
g59
NtRp3523
(dp3524
g62
(dp3525
sg71
g3240
sg64
(lp3526
g57
(g78
g59
NtRp3527
(dp3528
g62
(dp3529
g82
g83
ssg71
g3523
sg64
(lp3530
S'registration_id'
p3531
asbag57
(g78
g59
NtRp3532
(dp3533
g62
(dp3534
g89
g90
ssg71
g3523
sg64
(lp3535
S':'
asbag57
(g78
g59
NtRp3536
(dp3537
g62
(dp3538
sg71
g3523
sg64
(lp3539
g57
(g58
g59
NtRp3540
(dp3541
g62
(dp3542
g70
I3
ssg71
g3536
sg64
(lp3543
S''
asbasbasbag57
(g73
g59
NtRp3544
(dp3545
g62
(dp3546
sg71
g3240
sg64
(lp3547
g57
(g78
g59
NtRp3548
(dp3549
g62
(dp3550
g82
g83
ssg71
g3544
sg64
(lp3551
S'registration_key'
p3552
asbag57
(g78
g59
NtRp3553
(dp3554
g62
(dp3555
g89
g90
ssg71
g3544
sg64
(lp3556
S':'
asbag57
(g78
g59
NtRp3557
(dp3558
g62
(dp3559
sg71
g3544
sg64
(lp3560
g57
(g58
g59
NtRp3561
(dp3562
g62
(dp3563
g70
I3
ssg71
g3557
sg64
(lp3564
S''
asbasbasbag57
(g73
g59
NtRp3565
(dp3566
g62
(dp3567
sg71
g3240
sg64
(lp3568
g57
(g78
g59
NtRp3569
(dp3570
g62
(dp3571
g82
g83
ssg71
g3565
sg64
(lp3572
S'reset_password_key'
p3573
asbag57
(g78
g59
NtRp3574
(dp3575
g62
(dp3576
g89
g90
ssg71
g3565
sg64
(lp3577
S':'
asbag57
(g78
g59
NtRp3578
(dp3579
g62
(dp3580
sg71
g3565
sg64
(lp3581
g57
(g58
g59
NtRp3582
(dp3583
g62
(dp3584
g70
I3
ssg71
g3578
sg64
(lp3585
S''
asbasbasbag57
(g73
g59
NtRp3586
(dp3587
g62
(dp3588
sg71
g3240
sg64
(lp3589
g57
(g78
g59
NtRp3590
(dp3591
g62
(dp3592
g82
g83
ssg71
g3586
sg64
(lp3593
S'title'
p3594
asbag57
(g78
g59
NtRp3595
(dp3596
g62
(dp3597
g89
g90
ssg71
g3586
sg64
(lp3598
S':'
asbag57
(g78
g59
NtRp3599
(dp3600
g62
(dp3601
sg71
g3586
sg64
(lp3602
g57
(g58
g59
NtRp3603
(dp3604
g62
(dp3605
g70
I3
ssg71
g3599
sg64
(lp3606
S'0'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3607
(dp3608
g62
(dp3609
sg71
g3128
sg64
(lp3610
g57
(g78
g59
NtRp3611
(dp3612
g62
(dp3613
g82
g83
ssg71
g3607
sg64
(lp3614
S'user_groups'
p3615
asbag57
(g78
g59
NtRp3616
(dp3617
g62
(dp3618
g89
g90
ssg71
g3607
sg64
(lp3619
S':'
asbag57
(g78
g59
NtRp3620
(dp3621
g62
(dp3622
sg71
g3607
sg64
(lp3623
g57
(g58
g59
NtRp3624
(dp3625
g62
(dp3626
g70
I4
ssg71
g3620
sg64
(lp3627
g57
(g66
g59
NtRp3628
(dp3629
g62
(dp3630
g70
I3
ssg71
Nsg64
(lp3631
g57
(g73
g59
NtRp3632
(dp3633
g62
(dp3634
sg71
g3628
sg64
(lp3635
g57
(g78
g59
NtRp3636
(dp3637
g62
(dp3638
g82
g83
ssg71
g3632
sg64
(lp3639
S'9'
asbag57
(g78
g59
NtRp3640
(dp3641
g62
(dp3642
g89
g90
ssg71
g3632
sg64
(lp3643
S':'
asbag57
(g78
g59
NtRp3644
(dp3645
g62
(dp3646
sg71
g3632
sg64
(lp3647
g57
(g58
g59
NtRp3648
(dp3649
g62
(dp3650
g70
I3
ssg71
g3644
sg64
(lp3651
S'user_2'
p3652
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3653
(dp3654
g62
(dp3655
sg71
g3103
sg64
(lp3656
g57
(g78
g59
NtRp3657
(dp3658
g62
(dp3659
g82
g83
ssg71
g3653
sg64
(lp3660
S'flash'
p3661
asbag57
(g78
g59
NtRp3662
(dp3663
g62
(dp3664
g89
g90
ssg71
g3653
sg64
(lp3665
S':'
asbag57
(g78
g59
NtRp3666
(dp3667
g62
(dp3668
sg71
g3653
sg64
(lp3669
g57
(g58
g59
NtRp3670
(dp3671
g62
(dp3672
g70
I5
ssg71
g3666
sg64
(lp3673
S'None'
p3674
asbasbasbag57
(g73
g59
NtRp3675
(dp3676
g62
(dp3677
sg71
g3103
sg64
(lp3678
g57
(g78
g59
NtRp3679
(dp3680
g62
(dp3681
g82
g83
ssg71
g3675
sg64
(lp3682
S'last_orderby'
p3683
asbag57
(g78
g59
NtRp3684
(dp3685
g62
(dp3686
g89
g90
ssg71
g3675
sg64
(lp3687
S':'
asbag57
(g78
g59
NtRp3688
(dp3689
g62
(dp3690
sg71
g3675
sg64
(lp3691
g57
(g58
g59
NtRp3692
(dp3693
g62
(dp3694
g70
I5
ssg71
g3688
sg64
(lp3695
S'None'
p3696
asbasbasbag57
(g73
g59
NtRp3697
(dp3698
g62
(dp3699
sg71
g3103
sg64
(lp3700
g57
(g78
g59
NtRp3701
(dp3702
g62
(dp3703
g82
g83
ssg71
g3697
sg64
(lp3704
S'last_query'
p3705
asbag57
(g78
g59
NtRp3706
(dp3707
g62
(dp3708
g89
g90
ssg71
g3697
sg64
(lp3709
S':'
asbag57
(g78
g59
NtRp3710
(dp3711
g62
(dp3712
sg71
g3697
sg64
(lp3713
g57
(g58
g59
NtRp3714
(dp3715
g62
(dp3716
g70
I5
ssg71
g3710
sg64
(lp3717
S'db.project.id>0'
p3718
asbasbasbasbasbsS'etype'
p3719
S"<type 'exceptions.TypeError'>"
p3720
sS'date'
p3721
S'Wed Feb 20 21:50:59 2013'
p3722
sS'response'
p3723
g57
(g58
g59
NtRp3724
(dp3725
g62
(dp3726
sg64
(lp3727
g57
(g66
g59
NtRp3728
(dp3729
g62
(dp3730
g70
I5
ssg71
Nsg64
(lp3731
g57
(g73
g59
NtRp3732
(dp3733
g62
(dp3734
sg71
g3728
sg64
(lp3735
g57
(g78
g59
NtRp3736
(dp3737
g62
(dp3738
g82
g83
ssg71
g3732
sg64
(lp3739
g206
asbag57
(g78
g59
NtRp3740
(dp3741
g62
(dp3742
g89
g90
ssg71
g3732
sg64
(lp3743
S':'
asbag57
(g78
g59
NtRp3744
(dp3745
g62
(dp3746
sg71
g3732
sg64
(lp3747
g57
(g58
g59
NtRp3748
(dp3749
g62
(dp3750
g70
I5
ssg71
g3744
sg64
(lp3751
S'<cStringIO.StringO object at 0xadc057e0>'
p3752
asbasbasbag57
(g73
g59
NtRp3753
(dp3754
g62
(dp3755
sg71
g3728
sg64
(lp3756
g57
(g78
g59
NtRp3757
(dp3758
g62
(dp3759
g82
g83
ssg71
g3753
sg64
(lp3760
g294
asbag57
(g78
g59
NtRp3761
(dp3762
g62
(dp3763
g89
g90
ssg71
g3753
sg64
(lp3764
S':'
asbag57
(g78
g59
NtRp3765
(dp3766
g62
(dp3767
sg71
g3753
sg64
(lp3768
g57
(g58
g59
NtRp3769
(dp3770
g62
(dp3771
g70
I5
ssg71
g3765
sg64
(lp3772
g57
(g66
g59
NtRp3773
(dp3774
g62
(dp3775
g70
I4
ssg71
Nsg64
(lp3776
g57
(g73
g59
NtRp3777
(dp3778
g62
(dp3779
sg71
g3773
sg64
(lp3780
g57
(g78
g59
NtRp3781
(dp3782
g62
(dp3783
g82
g83
ssg71
g3777
sg64
(lp3784
S'session_id_dev_bootstrap_ch'
p3785
asbag57
(g78
g59
NtRp3786
(dp3787
g62
(dp3788
g89
g90
ssg71
g3777
sg64
(lp3789
S':'
asbag57
(g78
g59
NtRp3790
(dp3791
g62
(dp3792
sg71
g3777
sg64
(lp3793
g57
(g58
g59
NtRp3794
(dp3795
g62
(dp3796
g70
I4
ssg71
g3790
sg64
(lp3797
g332
ag57
(g66
g59
NtRp3798
(dp3799
g62
(dp3800
g70
I3
ssg71
Nsg64
(lp3801
g57
(g73
g59
NtRp3802
(dp3803
g62
(dp3804
sg71
g3798
sg64
(lp3805
g57
(g78
g59
NtRp3806
(dp3807
g62
(dp3808
g82
g83
ssg71
g3802
sg64
(lp3809
g345
asbag57
(g78
g59
NtRp3810
(dp3811
g62
(dp3812
g89
g90
ssg71
g3802
sg64
(lp3813
S':'
asbag57
(g78
g59
NtRp3814
(dp3815
g62
(dp3816
sg71
g3802
sg64
(lp3817
g57
(g58
g59
NtRp3818
(dp3819
g62
(dp3820
g70
I3
ssg71
g3814
sg64
(lp3821
S''
asbasbasbag57
(g73
g59
NtRp3822
(dp3823
g62
(dp3824
sg71
g3798
sg64
(lp3825
g57
(g78
g59
NtRp3826
(dp3827
g62
(dp3828
g82
g83
ssg71
g3822
sg64
(lp3829
g366
asbag57
(g78
g59
NtRp3830
(dp3831
g62
(dp3832
g89
g90
ssg71
g3822
sg64
(lp3833
S':'
asbag57
(g78
g59
NtRp3834
(dp3835
g62
(dp3836
sg71
g3822
sg64
(lp3837
g57
(g58
g59
NtRp3838
(dp3839
g62
(dp3840
g70
I3
ssg71
g3834
sg64
(lp3841
S''
asbasbasbag57
(g73
g59
NtRp3842
(dp3843
g62
(dp3844
sg71
g3798
sg64
(lp3845
g57
(g78
g59
NtRp3846
(dp3847
g62
(dp3848
g82
g83
ssg71
g3842
sg64
(lp3849
g387
asbag57
(g78
g59
NtRp3850
(dp3851
g62
(dp3852
g89
g90
ssg71
g3842
sg64
(lp3853
S':'
asbag57
(g78
g59
NtRp3854
(dp3855
g62
(dp3856
sg71
g3842
sg64
(lp3857
g57
(g58
g59
NtRp3858
(dp3859
g62
(dp3860
g70
I3
ssg71
g3854
sg64
(lp3861
S'2592000'
p3862
asbasbasbag57
(g73
g59
NtRp3863
(dp3864
g62
(dp3865
sg71
g3798
sg64
(lp3866
g57
(g78
g59
NtRp3867
(dp3868
g62
(dp3869
g82
g83
ssg71
g3863
sg64
(lp3870
g408
asbag57
(g78
g59
NtRp3871
(dp3872
g62
(dp3873
g89
g90
ssg71
g3863
sg64
(lp3874
S':'
asbag57
(g78
g59
NtRp3875
(dp3876
g62
(dp3877
sg71
g3863
sg64
(lp3878
g57
(g58
g59
NtRp3879
(dp3880
g62
(dp3881
g70
I3
ssg71
g3875
sg64
(lp3882
S''
asbasbasbag57
(g73
g59
NtRp3883
(dp3884
g62
(dp3885
sg71
g3798
sg64
(lp3886
g57
(g78
g59
NtRp3887
(dp3888
g62
(dp3889
g82
g83
ssg71
g3883
sg64
(lp3890
g429
asbag57
(g78
g59
NtRp3891
(dp3892
g62
(dp3893
g89
g90
ssg71
g3883
sg64
(lp3894
S':'
asbag57
(g78
g59
NtRp3895
(dp3896
g62
(dp3897
sg71
g3883
sg64
(lp3898
g57
(g58
g59
NtRp3899
(dp3900
g62
(dp3901
g70
I3
ssg71
g3895
sg64
(lp3902
S''
asbasbasbag57
(g73
g59
NtRp3903
(dp3904
g62
(dp3905
sg71
g3798
sg64
(lp3906
g57
(g78
g59
NtRp3907
(dp3908
g62
(dp3909
g82
g83
ssg71
g3903
sg64
(lp3910
g450
asbag57
(g78
g59
NtRp3911
(dp3912
g62
(dp3913
g89
g90
ssg71
g3903
sg64
(lp3914
S':'
asbag57
(g78
g59
NtRp3915
(dp3916
g62
(dp3917
sg71
g3903
sg64
(lp3918
g57
(g58
g59
NtRp3919
(dp3920
g62
(dp3921
g70
I3
ssg71
g3915
sg64
(lp3922
S'/'
asbasbasbag57
(g73
g59
NtRp3923
(dp3924
g62
(dp3925
sg71
g3798
sg64
(lp3926
g57
(g78
g59
NtRp3927
(dp3928
g62
(dp3929
g82
g83
ssg71
g3923
sg64
(lp3930
g471
asbag57
(g78
g59
NtRp3931
(dp3932
g62
(dp3933
g89
g90
ssg71
g3923
sg64
(lp3934
S':'
asbag57
(g78
g59
NtRp3935
(dp3936
g62
(dp3937
sg71
g3923
sg64
(lp3938
g57
(g58
g59
NtRp3939
(dp3940
g62
(dp3941
g70
I3
ssg71
g3935
sg64
(lp3942
S''
asbasbasbag57
(g73
g59
NtRp3943
(dp3944
g62
(dp3945
sg71
g3798
sg64
(lp3946
g57
(g78
g59
NtRp3947
(dp3948
g62
(dp3949
g82
g83
ssg71
g3943
sg64
(lp3950
g492
asbag57
(g78
g59
NtRp3951
(dp3952
g62
(dp3953
g89
g90
ssg71
g3943
sg64
(lp3954
S':'
asbag57
(g78
g59
NtRp3955
(dp3956
g62
(dp3957
sg71
g3943
sg64
(lp3958
g57
(g58
g59
NtRp3959
(dp3960
g62
(dp3961
g70
I3
ssg71
g3955
sg64
(lp3962
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3963
(dp3964
g62
(dp3965
sg71
g3728
sg64
(lp3966
g57
(g78
g59
NtRp3967
(dp3968
g62
(dp3969
g82
g83
ssg71
g3963
sg64
(lp3970
S'delimiters'
p3971
asbag57
(g78
g59
NtRp3972
(dp3973
g62
(dp3974
g89
g90
ssg71
g3963
sg64
(lp3975
S':'
asbag57
(g78
g59
NtRp3976
(dp3977
g62
(dp3978
sg71
g3963
sg64
(lp3979
g57
(g58
g59
NtRp3980
(dp3981
g62
(dp3982
g70
I5
ssg71
g3976
sg64
(lp3983
g57
(g66
g59
NtRp3984
(dp3985
g62
(dp3986
g70
I4
ssg71
Nsg64
(lp3987
g57
(g73
g59
NtRp3988
(dp3989
g62
(dp3990
sg71
g3984
sg64
(lp3991
g57
(g78
g59
NtRp3992
(dp3993
g62
(dp3994
sg71
g3988
sg64
(lp3995
g57
(g58
g59
NtRp3996
(dp3997
g62
(dp3998
g70
I4
ssg71
g3992
sg64
(lp3999
S'{{'
p4000
asbasbasbag57
(g73
g59
NtRp4001
(dp4002
g62
(dp4003
sg71
g3984
sg64
(lp4004
g57
(g78
g59
NtRp4005
(dp4006
g62
(dp4007
sg71
g4001
sg64
(lp4008
g57
(g58
g59
NtRp4009
(dp4010
g62
(dp4011
g70
I4
ssg71
g4005
sg64
(lp4012
S'}}'
p4013
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4014
(dp4015
g62
(dp4016
sg71
g3728
sg64
(lp4017
g57
(g78
g59
NtRp4018
(dp4019
g62
(dp4020
g82
g83
ssg71
g4014
sg64
(lp4021
S'files'
p4022
asbag57
(g78
g59
NtRp4023
(dp4024
g62
(dp4025
g89
g90
ssg71
g4014
sg64
(lp4026
S':'
asbag57
(g78
g59
NtRp4027
(dp4028
g62
(dp4029
sg71
g4014
sg64
(lp4030
g57
(g58
g59
NtRp4031
(dp4032
g62
(dp4033
g70
I5
ssg71
g4027
sg64
(lp4034
g57
(g66
g59
NtRp4035
(dp4036
g62
(dp4037
g70
I4
ssg71
Nsg64
(lp4038
g57
(g73
g59
NtRp4039
(dp4040
g62
(dp4041
sg71
g4035
sg64
(lp4042
g57
(g78
g59
NtRp4043
(dp4044
g62
(dp4045
sg71
g4039
sg64
(lp4046
g57
(g58
g59
NtRp4047
(dp4048
g62
(dp4049
g70
I4
ssg71
g4043
sg64
(lp4050
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/css/redmond/jquery-ui-1.8.5.custom.css'
p4051
asbasbasbag57
(g73
g59
NtRp4052
(dp4053
g62
(dp4054
sg71
g4035
sg64
(lp4055
g57
(g78
g59
NtRp4056
(dp4057
g62
(dp4058
sg71
g4052
sg64
(lp4059
g57
(g58
g59
NtRp4060
(dp4061
g62
(dp4062
g70
I4
ssg71
g4056
sg64
(lp4063
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/js/jquery-ui-1.8.5.custom.min.js'
p4064
asbasbasbag57
(g73
g59
NtRp4065
(dp4066
g62
(dp4067
sg71
g4035
sg64
(lp4068
g57
(g78
g59
NtRp4069
(dp4070
g62
(dp4071
sg71
g4065
sg64
(lp4072
g57
(g58
g59
NtRp4073
(dp4074
g62
(dp4075
g70
I4
ssg71
g4069
sg64
(lp4076
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/ui.jqgrid.css'
p4077
asbasbasbag57
(g73
g59
NtRp4078
(dp4079
g62
(dp4080
sg71
g4035
sg64
(lp4081
g57
(g78
g59
NtRp4082
(dp4083
g62
(dp4084
sg71
g4078
sg64
(lp4085
g57
(g58
g59
NtRp4086
(dp4087
g62
(dp4088
g70
I4
ssg71
g4082
sg64
(lp4089
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/i18n/grid.locale-en.js'
p4090
asbasbasbag57
(g73
g59
NtRp4091
(dp4092
g62
(dp4093
sg71
g4035
sg64
(lp4094
g57
(g78
g59
NtRp4095
(dp4096
g62
(dp4097
sg71
g4091
sg64
(lp4098
g57
(g58
g59
NtRp4099
(dp4100
g62
(dp4101
g70
I4
ssg71
g4095
sg64
(lp4102
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/jquery.jqGrid.min.js'
p4103
asbasbasbag57
(g73
g59
NtRp4104
(dp4105
g62
(dp4106
sg71
g4035
sg64
(lp4107
g57
(g78
g59
NtRp4108
(dp4109
g62
(dp4110
sg71
g4104
sg64
(lp4111
g57
(g58
g59
NtRp4112
(dp4113
g62
(dp4114
g70
I4
ssg71
g4108
sg64
(lp4115
S'/DEV_bootstrap_ch/static/plugin_wiki/slideshow/jquery.cycle.min.js'
p4116
asbasbasbag57
(g73
g59
NtRp4117
(dp4118
g62
(dp4119
sg71
g4035
sg64
(lp4120
g57
(g78
g59
NtRp4121
(dp4122
g62
(dp4123
sg71
g4117
sg64
(lp4124
g57
(g58
g59
NtRp4125
(dp4126
g62
(dp4127
g70
I4
ssg71
g4121
sg64
(lp4128
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.css'
p4129
asbasbasbag57
(g73
g59
NtRp4130
(dp4131
g62
(dp4132
sg71
g4035
sg64
(lp4133
g57
(g78
g59
NtRp4134
(dp4135
g62
(dp4136
sg71
g4130
sg64
(lp4137
g57
(g58
g59
NtRp4138
(dp4139
g62
(dp4140
g70
I4
ssg71
g4134
sg64
(lp4141
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.js'
p4142
asbasbasbag57
(g73
g59
NtRp4143
(dp4144
g62
(dp4145
sg71
g4035
sg64
(lp4146
g57
(g78
g59
NtRp4147
(dp4148
g62
(dp4149
sg71
g4143
sg64
(lp4150
g57
(g58
g59
NtRp4151
(dp4152
g62
(dp4153
g70
I4
ssg71
g4147
sg64
(lp4154
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.css'
p4155
asbasbasbag57
(g73
g59
NtRp4156
(dp4157
g62
(dp4158
sg71
g4035
sg64
(lp4159
g57
(g78
g59
NtRp4160
(dp4161
g62
(dp4162
sg71
g4156
sg64
(lp4163
g57
(g58
g59
NtRp4164
(dp4165
g62
(dp4166
g70
I4
ssg71
g4160
sg64
(lp4167
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.js'
p4168
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4169
(dp4170
g62
(dp4171
sg71
g3728
sg64
(lp4172
g57
(g78
g59
NtRp4173
(dp4174
g62
(dp4175
g82
g83
ssg71
g4169
sg64
(lp4176
S'flash'
p4177
asbag57
(g78
g59
NtRp4178
(dp4179
g62
(dp4180
g89
g90
ssg71
g4169
sg64
(lp4181
S':'
asbag57
(g78
g59
NtRp4182
(dp4183
g62
(dp4184
sg71
g4169
sg64
(lp4185
g57
(g58
g59
NtRp4186
(dp4187
g62
(dp4188
g70
I5
ssg71
g4182
sg64
(lp4189
S''
asbasbasbag57
(g73
g59
NtRp4190
(dp4191
g62
(dp4192
sg71
g3728
sg64
(lp4193
g57
(g78
g59
NtRp4194
(dp4195
g62
(dp4196
g82
g83
ssg71
g4190
sg64
(lp4197
S'generic_patterns'
p4198
asbag57
(g78
g59
NtRp4199
(dp4200
g62
(dp4201
g89
g90
ssg71
g4190
sg64
(lp4202
S':'
asbag57
(g78
g59
NtRp4203
(dp4204
g62
(dp4205
sg71
g4190
sg64
(lp4206
g57
(g58
g59
NtRp4207
(dp4208
g62
(dp4209
g70
I5
ssg71
g4203
sg64
(lp4210
g57
(g66
g59
NtRp4211
(dp4212
g62
(dp4213
g70
I4
ssg71
Nsg64
(lp4214
g57
(g73
g59
NtRp4215
(dp4216
g62
(dp4217
sg71
g4211
sg64
(lp4218
g57
(g78
g59
NtRp4219
(dp4220
g62
(dp4221
sg71
g4215
sg64
(lp4222
g57
(g58
g59
NtRp4223
(dp4224
g62
(dp4225
g70
I4
ssg71
g4219
sg64
(lp4226
S'*'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4227
(dp4228
g62
(dp4229
sg71
g3728
sg64
(lp4230
g57
(g78
g59
NtRp4231
(dp4232
g62
(dp4233
g82
g83
ssg71
g4227
sg64
(lp4234
S'google_analytics_id'
p4235
asbag57
(g78
g59
NtRp4236
(dp4237
g62
(dp4238
g89
g90
ssg71
g4227
sg64
(lp4239
S':'
asbag57
(g78
g59
NtRp4240
(dp4241
g62
(dp4242
sg71
g4227
sg64
(lp4243
g57
(g58
g59
NtRp4244
(dp4245
g62
(dp4246
g70
I5
ssg71
g4240
sg64
(lp4247
S'None'
p4248
asbasbasbag57
(g73
g59
NtRp4249
(dp4250
g62
(dp4251
sg71
g3728
sg64
(lp4252
g57
(g78
g59
NtRp4253
(dp4254
g62
(dp4255
g82
g83
ssg71
g4249
sg64
(lp4256
S'headers'
p4257
asbag57
(g78
g59
NtRp4258
(dp4259
g62
(dp4260
g89
g90
ssg71
g4249
sg64
(lp4261
S':'
asbag57
(g78
g59
NtRp4262
(dp4263
g62
(dp4264
sg71
g4249
sg64
(lp4265
g57
(g58
g59
NtRp4266
(dp4267
g62
(dp4268
g70
I5
ssg71
g4262
sg64
(lp4269
g57
(g66
g59
NtRp4270
(dp4271
g62
(dp4272
g70
I4
ssg71
Nsg64
(lp4273
g57
(g73
g59
NtRp4274
(dp4275
g62
(dp4276
sg71
g4270
sg64
(lp4277
g57
(g78
g59
NtRp4278
(dp4279
g62
(dp4280
g82
g83
ssg71
g4274
sg64
(lp4281
S'X-Powered-By'
p4282
asbag57
(g78
g59
NtRp4283
(dp4284
g62
(dp4285
g89
g90
ssg71
g4274
sg64
(lp4286
S':'
asbag57
(g78
g59
NtRp4287
(dp4288
g62
(dp4289
sg71
g4274
sg64
(lp4290
g57
(g58
g59
NtRp4291
(dp4292
g62
(dp4293
g70
I4
ssg71
g4287
sg64
(lp4294
S'web2py'
p4295
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4296
(dp4297
g62
(dp4298
sg71
g3728
sg64
(lp4299
g57
(g78
g59
NtRp4300
(dp4301
g62
(dp4302
g82
g83
ssg71
g4296
sg64
(lp4303
S'menu'
p4304
asbag57
(g78
g59
NtRp4305
(dp4306
g62
(dp4307
g89
g90
ssg71
g4296
sg64
(lp4308
S':'
asbag57
(g78
g59
NtRp4309
(dp4310
g62
(dp4311
sg71
g4296
sg64
(lp4312
g57
(g58
g59
NtRp4313
(dp4314
g62
(dp4315
g70
I5
ssg71
g4309
sg64
(lp4316
g57
(g66
g59
NtRp4317
(dp4318
g62
(dp4319
g70
I4
ssg71
Nsg64
(lp4320
g57
(g73
g59
NtRp4321
(dp4322
g62
(dp4323
sg71
g4317
sg64
(lp4324
g57
(g78
g59
NtRp4325
(dp4326
g62
(dp4327
sg71
g4321
sg64
(lp4328
g57
(g58
g59
NtRp4329
(dp4330
g62
(dp4331
g70
I4
ssg71
g4325
sg64
(lp4332
g57
(g66
g59
NtRp4333
(dp4334
g62
(dp4335
g70
I3
ssg71
Nsg64
(lp4336
g57
(g73
g59
NtRp4337
(dp4338
g62
(dp4339
sg71
g4333
sg64
(lp4340
g57
(g78
g59
NtRp4341
(dp4342
g62
(dp4343
sg71
g4337
sg64
(lp4344
g57
(g58
g59
NtRp4345
(dp4346
g62
(dp4347
g70
I3
ssg71
g4341
sg64
(lp4348
cgluon.languages
lazyT_unpickle
p4349
(S't\x04\x00\x00\x00Home'
tRp4350
asbasbasbag57
(g73
g59
NtRp4351
(dp4352
g62
(dp4353
sg71
g4333
sg64
(lp4354
g57
(g78
g59
NtRp4355
(dp4356
g62
(dp4357
sg71
g4351
sg64
(lp4358
g57
(g58
g59
NtRp4359
(dp4360
g62
(dp4361
g70
I3
ssg71
g4355
sg64
(lp4362
g100
asbasbasbag57
(g73
g59
NtRp4363
(dp4364
g62
(dp4365
sg71
g4333
sg64
(lp4366
g57
(g78
g59
NtRp4367
(dp4368
g62
(dp4369
sg71
g4363
sg64
(lp4370
g57
(g58
g59
NtRp4371
(dp4372
g62
(dp4373
g70
I3
ssg71
g4367
sg64
(lp4374
S'/DEV_bootstrap_ch/default/list_all_projects'
p4375
asbasbasbag57
(g73
g59
NtRp4376
(dp4377
g62
(dp4378
sg71
g4333
sg64
(lp4379
g57
(g78
g59
NtRp4380
(dp4381
g62
(dp4382
sg71
g4376
sg64
(lp4383
g57
(g58
g59
NtRp4384
(dp4385
g62
(dp4386
g70
I3
ssg71
g4380
sg64
(lp4387
g57
(g66
g59
NtRp4388
(dp4389
g62
(dp4390
g70
I2
ssg71
Nsg64
(lp4391
sbasbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp4392
(dp4393
g62
(dp4394
sg71
g3728
sg64
(lp4395
g57
(g78
g59
NtRp4396
(dp4397
g62
(dp4398
g82
g83
ssg71
g4392
sg64
(lp4399
S'meta'
p4400
asbag57
(g78
g59
NtRp4401
(dp4402
g62
(dp4403
g89
g90
ssg71
g4392
sg64
(lp4404
S':'
asbag57
(g78
g59
NtRp4405
(dp4406
g62
(dp4407
sg71
g4392
sg64
(lp4408
g57
(g58
g59
NtRp4409
(dp4410
g62
(dp4411
g70
I5
ssg71
g4405
sg64
(lp4412
g57
(g66
g59
NtRp4413
(dp4414
g62
(dp4415
g70
I4
ssg71
Nsg64
(lp4416
g57
(g73
g59
NtRp4417
(dp4418
g62
(dp4419
sg71
g4413
sg64
(lp4420
g57
(g78
g59
NtRp4421
(dp4422
g62
(dp4423
g82
g83
ssg71
g4417
sg64
(lp4424
S'author'
p4425
asbag57
(g78
g59
NtRp4426
(dp4427
g62
(dp4428
g89
g90
ssg71
g4417
sg64
(lp4429
S':'
asbag57
(g78
g59
NtRp4430
(dp4431
g62
(dp4432
sg71
g4417
sg64
(lp4433
g57
(g58
g59
NtRp4434
(dp4435
g62
(dp4436
g70
I4
ssg71
g4430
sg64
(lp4437
S'Vikram Pudi <vikram@iiit.ac.in>'
p4438
asbasbasbag57
(g73
g59
NtRp4439
(dp4440
g62
(dp4441
sg71
g4413
sg64
(lp4442
g57
(g78
g59
NtRp4443
(dp4444
g62
(dp4445
g82
g83
ssg71
g4439
sg64
(lp4446
S'copyright'
p4447
asbag57
(g78
g59
NtRp4448
(dp4449
g62
(dp4450
g89
g90
ssg71
g4439
sg64
(lp4451
S':'
asbag57
(g78
g59
NtRp4452
(dp4453
g62
(dp4454
sg71
g4439
sg64
(lp4455
g57
(g58
g59
NtRp4456
(dp4457
g62
(dp4458
g70
I4
ssg71
g4452
sg64
(lp4459
S'Copyright 2011'
p4460
asbasbasbag57
(g73
g59
NtRp4461
(dp4462
g62
(dp4463
sg71
g4413
sg64
(lp4464
g57
(g78
g59
NtRp4465
(dp4466
g62
(dp4467
g82
g83
ssg71
g4461
sg64
(lp4468
S'description'
p4469
asbag57
(g78
g59
NtRp4470
(dp4471
g62
(dp4472
g89
g90
ssg71
g4461
sg64
(lp4473
S':'
asbag57
(g78
g59
NtRp4474
(dp4475
g62
(dp4476
sg71
g4461
sg64
(lp4477
g57
(g58
g59
NtRp4478
(dp4479
g62
(dp4480
g70
I4
ssg71
g4474
sg64
(lp4481
S'Computational Core for Plant Metabolomics -- A project sanctioned by DBT, Govt. of India'
p4482
asbasbasbag57
(g73
g59
NtRp4483
(dp4484
g62
(dp4485
sg71
g4413
sg64
(lp4486
g57
(g78
g59
NtRp4487
(dp4488
g62
(dp4489
g82
g83
ssg71
g4483
sg64
(lp4490
S'generator'
p4491
asbag57
(g78
g59
NtRp4492
(dp4493
g62
(dp4494
g89
g90
ssg71
g4483
sg64
(lp4495
S':'
asbag57
(g78
g59
NtRp4496
(dp4497
g62
(dp4498
sg71
g4483
sg64
(lp4499
g57
(g58
g59
NtRp4500
(dp4501
g62
(dp4502
g70
I4
ssg71
g4496
sg64
(lp4503
S'Web2py Web Framework'
p4504
asbasbasbag57
(g73
g59
NtRp4505
(dp4506
g62
(dp4507
sg71
g4413
sg64
(lp4508
g57
(g78
g59
NtRp4509
(dp4510
g62
(dp4511
g82
g83
ssg71
g4505
sg64
(lp4512
S'keywords'
p4513
asbag57
(g78
g59
NtRp4514
(dp4515
g62
(dp4516
g89
g90
ssg71
g4505
sg64
(lp4517
S':'
asbag57
(g78
g59
NtRp4518
(dp4519
g62
(dp4520
sg71
g4505
sg64
(lp4521
g57
(g58
g59
NtRp4522
(dp4523
g62
(dp4524
g70
I4
ssg71
g4518
sg64
(lp4525
S'web2py, python, metabolome, metabolomics'
p4526
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4527
(dp4528
g62
(dp4529
sg71
g3728
sg64
(lp4530
g57
(g78
g59
NtRp4531
(dp4532
g62
(dp4533
g82
g83
ssg71
g4527
sg64
(lp4534
S'models_to_run'
p4535
asbag57
(g78
g59
NtRp4536
(dp4537
g62
(dp4538
g89
g90
ssg71
g4527
sg64
(lp4539
S':'
asbag57
(g78
g59
NtRp4540
(dp4541
g62
(dp4542
sg71
g4527
sg64
(lp4543
g57
(g58
g59
NtRp4544
(dp4545
g62
(dp4546
g70
I5
ssg71
g4540
sg64
(lp4547
g57
(g66
g59
NtRp4548
(dp4549
g62
(dp4550
g70
I4
ssg71
Nsg64
(lp4551
g57
(g73
g59
NtRp4552
(dp4553
g62
(dp4554
sg71
g4548
sg64
(lp4555
g57
(g78
g59
NtRp4556
(dp4557
g62
(dp4558
sg71
g4552
sg64
(lp4559
g57
(g58
g59
NtRp4560
(dp4561
g62
(dp4562
g70
I4
ssg71
g4556
sg64
(lp4563
S'^\\w+\\.py$'
p4564
asbasbasbag57
(g73
g59
NtRp4565
(dp4566
g62
(dp4567
sg71
g4548
sg64
(lp4568
g57
(g78
g59
NtRp4569
(dp4570
g62
(dp4571
sg71
g4565
sg64
(lp4572
g57
(g58
g59
NtRp4573
(dp4574
g62
(dp4575
g70
I4
ssg71
g4569
sg64
(lp4576
S'^default/\\w+\\.py$'
p4577
asbasbasbag57
(g73
g59
NtRp4578
(dp4579
g62
(dp4580
sg71
g4548
sg64
(lp4581
g57
(g78
g59
NtRp4582
(dp4583
g62
(dp4584
sg71
g4578
sg64
(lp4585
g57
(g58
g59
NtRp4586
(dp4587
g62
(dp4588
g70
I4
ssg71
g4582
sg64
(lp4589
S'^default/list_all_dev_projects/\\w+\\.py$'
p4590
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4591
(dp4592
g62
(dp4593
sg71
g3728
sg64
(lp4594
g57
(g78
g59
NtRp4595
(dp4596
g62
(dp4597
g82
g83
ssg71
g4591
sg64
(lp4598
S'postprocessing'
p4599
asbag57
(g78
g59
NtRp4600
(dp4601
g62
(dp4602
g89
g90
ssg71
g4591
sg64
(lp4603
S':'
asbag57
(g78
g59
NtRp4604
(dp4605
g62
(dp4606
sg71
g4591
sg64
(lp4607
g57
(g58
g59
NtRp4608
(dp4609
g62
(dp4610
g70
I5
ssg71
g4604
sg64
(lp4611
g57
(g66
g59
NtRp4612
(dp4613
g62
(dp4614
g70
I4
ssg71
Nsg64
(lp4615
sbasbasbasbag57
(g73
g59
NtRp4616
(dp4617
g62
(dp4618
sg71
g3728
sg64
(lp4619
g57
(g78
g59
NtRp4620
(dp4621
g62
(dp4622
g82
g83
ssg71
g4616
sg64
(lp4623
S'session_cookie_expires'
p4624
asbag57
(g78
g59
NtRp4625
(dp4626
g62
(dp4627
g89
g90
ssg71
g4616
sg64
(lp4628
S':'
asbag57
(g78
g59
NtRp4629
(dp4630
g62
(dp4631
sg71
g4616
sg64
(lp4632
g57
(g58
g59
NtRp4633
(dp4634
g62
(dp4635
g70
I5
ssg71
g4629
sg64
(lp4636
S'None'
p4637
asbasbasbag57
(g73
g59
NtRp4638
(dp4639
g62
(dp4640
sg71
g3728
sg64
(lp4641
g57
(g78
g59
NtRp4642
(dp4643
g62
(dp4644
g82
g83
ssg71
g4638
sg64
(lp4645
S'session_data_name'
p4646
asbag57
(g78
g59
NtRp4647
(dp4648
g62
(dp4649
g89
g90
ssg71
g4638
sg64
(lp4650
S':'
asbag57
(g78
g59
NtRp4651
(dp4652
g62
(dp4653
sg71
g4638
sg64
(lp4654
g57
(g58
g59
NtRp4655
(dp4656
g62
(dp4657
g70
I5
ssg71
g4651
sg64
(lp4658
S'session_data_dev_bootstrap_ch'
p4659
asbasbasbag57
(g73
g59
NtRp4660
(dp4661
g62
(dp4662
sg71
g3728
sg64
(lp4663
g57
(g78
g59
NtRp4664
(dp4665
g62
(dp4666
g82
g83
ssg71
g4660
sg64
(lp4667
S'session_file'
p4668
asbag57
(g78
g59
NtRp4669
(dp4670
g62
(dp4671
g89
g90
ssg71
g4660
sg64
(lp4672
S':'
asbag57
(g78
g59
NtRp4673
(dp4674
g62
(dp4675
sg71
g4660
sg64
(lp4676
g57
(g58
g59
NtRp4677
(dp4678
g62
(dp4679
g70
I5
ssg71
g4673
sg64
(lp4680
S"<open file '/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-270b038b-df00-4d5c-949a-e87692880510', mode 'rb+' at 0xae15ccd8>"
p4681
asbasbasbag57
(g73
g59
NtRp4682
(dp4683
g62
(dp4684
sg71
g3728
sg64
(lp4685
g57
(g78
g59
NtRp4686
(dp4687
g62
(dp4688
g82
g83
ssg71
g4682
sg64
(lp4689
S'session_filename'
p4690
asbag57
(g78
g59
NtRp4691
(dp4692
g62
(dp4693
g89
g90
ssg71
g4682
sg64
(lp4694
S':'
asbag57
(g78
g59
NtRp4695
(dp4696
g62
(dp4697
sg71
g4682
sg64
(lp4698
g57
(g58
g59
NtRp4699
(dp4700
g62
(dp4701
g70
I5
ssg71
g4695
sg64
(lp4702
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-270b038b-df00-4d5c-949a-e87692880510'
p4703
asbasbasbag57
(g73
g59
NtRp4704
(dp4705
g62
(dp4706
sg71
g3728
sg64
(lp4707
g57
(g78
g59
NtRp4708
(dp4709
g62
(dp4710
g82
g83
ssg71
g4704
sg64
(lp4711
S'session_id'
p4712
asbag57
(g78
g59
NtRp4713
(dp4714
g62
(dp4715
g89
g90
ssg71
g4704
sg64
(lp4716
S':'
asbag57
(g78
g59
NtRp4717
(dp4718
g62
(dp4719
sg71
g4704
sg64
(lp4720
g57
(g58
g59
NtRp4721
(dp4722
g62
(dp4723
g70
I5
ssg71
g4717
sg64
(lp4724
g332
asbasbasbag57
(g73
g59
NtRp4725
(dp4726
g62
(dp4727
sg71
g3728
sg64
(lp4728
g57
(g78
g59
NtRp4729
(dp4730
g62
(dp4731
g82
g83
ssg71
g4725
sg64
(lp4732
S'session_id_name'
p4733
asbag57
(g78
g59
NtRp4734
(dp4735
g62
(dp4736
g89
g90
ssg71
g4725
sg64
(lp4737
S':'
asbag57
(g78
g59
NtRp4738
(dp4739
g62
(dp4740
sg71
g4725
sg64
(lp4741
g57
(g58
g59
NtRp4742
(dp4743
g62
(dp4744
g70
I5
ssg71
g4738
sg64
(lp4745
g3785
asbasbasbag57
(g73
g59
NtRp4746
(dp4747
g62
(dp4748
sg71
g3728
sg64
(lp4749
g57
(g78
g59
NtRp4750
(dp4751
g62
(dp4752
g82
g83
ssg71
g4746
sg64
(lp4753
S'session_locked'
p4754
asbag57
(g78
g59
NtRp4755
(dp4756
g62
(dp4757
g89
g90
ssg71
g4746
sg64
(lp4758
S':'
asbag57
(g78
g59
NtRp4759
(dp4760
g62
(dp4761
sg71
g4746
sg64
(lp4762
g57
(g58
g59
NtRp4763
(dp4764
g62
(dp4765
g70
I5
ssg71
g4759
sg64
(lp4766
g1472
asbasbasbag57
(g73
g59
NtRp4767
(dp4768
g62
(dp4769
sg71
g3728
sg64
(lp4770
g57
(g78
g59
NtRp4771
(dp4772
g62
(dp4773
g82
g83
ssg71
g4767
sg64
(lp4774
S'session_new'
p4775
asbag57
(g78
g59
NtRp4776
(dp4777
g62
(dp4778
g89
g90
ssg71
g4767
sg64
(lp4779
S':'
asbag57
(g78
g59
NtRp4780
(dp4781
g62
(dp4782
sg71
g4767
sg64
(lp4783
g57
(g58
g59
NtRp4784
(dp4785
g62
(dp4786
g70
I5
ssg71
g4780
sg64
(lp4787
g100
asbasbasbag57
(g73
g59
NtRp4788
(dp4789
g62
(dp4790
sg71
g3728
sg64
(lp4791
g57
(g78
g59
NtRp4792
(dp4793
g62
(dp4794
g82
g83
ssg71
g4788
sg64
(lp4795
S'session_storage_type'
p4796
asbag57
(g78
g59
NtRp4797
(dp4798
g62
(dp4799
g89
g90
ssg71
g4788
sg64
(lp4800
S':'
asbag57
(g78
g59
NtRp4801
(dp4802
g62
(dp4803
sg71
g4788
sg64
(lp4804
g57
(g58
g59
NtRp4805
(dp4806
g62
(dp4807
g70
I5
ssg71
g4801
sg64
(lp4808
g2925
asbasbasbag57
(g73
g59
NtRp4809
(dp4810
g62
(dp4811
sg71
g3728
sg64
(lp4812
g57
(g78
g59
NtRp4813
(dp4814
g62
(dp4815
g82
g83
ssg71
g4809
sg64
(lp4816
S'status'
p4817
asbag57
(g78
g59
NtRp4818
(dp4819
g62
(dp4820
g89
g90
ssg71
g4809
sg64
(lp4821
S':'
asbag57
(g78
g59
NtRp4822
(dp4823
g62
(dp4824
sg71
g4809
sg64
(lp4825
g57
(g58
g59
NtRp4826
(dp4827
g62
(dp4828
g70
I5
ssg71
g4822
sg64
(lp4829
S'200'
p4830
asbasbasbag57
(g73
g59
NtRp4831
(dp4832
g62
(dp4833
sg71
g3728
sg64
(lp4834
g57
(g78
g59
NtRp4835
(dp4836
g62
(dp4837
g82
g83
ssg71
g4831
sg64
(lp4838
S'subtitle'
p4839
asbag57
(g78
g59
NtRp4840
(dp4841
g62
(dp4842
g89
g90
ssg71
g4831
sg64
(lp4843
S':'
asbag57
(g78
g59
NtRp4844
(dp4845
g62
(dp4846
sg71
g4831
sg64
(lp4847
g57
(g58
g59
NtRp4848
(dp4849
g62
(dp4850
g70
I5
ssg71
g4844
sg64
(lp4851
g4349
(S's)\x00\x00\x00Computational Core for Plant Metabolomics'
tRp4852
asbasbasbag57
(g73
g59
NtRp4853
(dp4854
g62
(dp4855
sg71
g3728
sg64
(lp4856
g57
(g78
g59
NtRp4857
(dp4858
g62
(dp4859
g82
g83
ssg71
g4853
sg64
(lp4860
g3594
asbag57
(g78
g59
NtRp4861
(dp4862
g62
(dp4863
g89
g90
ssg71
g4853
sg64
(lp4864
S':'
asbag57
(g78
g59
NtRp4865
(dp4866
g62
(dp4867
sg71
g4853
sg64
(lp4868
g57
(g58
g59
NtRp4869
(dp4870
g62
(dp4871
g70
I5
ssg71
g4865
sg64
(lp4872
g122
asbasbasbag57
(g73
g59
NtRp4873
(dp4874
g62
(dp4875
sg71
g3728
sg64
(lp4876
g57
(g78
g59
NtRp4877
(dp4878
g62
(dp4879
g82
g83
ssg71
g4873
sg64
(lp4880
S'view'
p4881
asbag57
(g78
g59
NtRp4882
(dp4883
g62
(dp4884
g89
g90
ssg71
g4873
sg64
(lp4885
S':'
asbag57
(g78
g59
NtRp4886
(dp4887
g62
(dp4888
sg71
g4873
sg64
(lp4889
g57
(g58
g59
NtRp4890
(dp4891
g62
(dp4892
g70
I5
ssg71
g4886
sg64
(lp4893
S'default/list_all_dev_projects.html'
p4894
asbasbasbasbasbsS'locals'
p4895
(dp4896
S'links'
p4897
S'[<function <lambda>>]'
p4898
sS'edit'
p4899
g100
sS'referrer'
p4900
S"'/DEV_bootstrap_ch/default/list_all_dev_projects/...ignature=7ef83f1a1fbc1478046ec45b38081f44f469294d'"
p4901
sg56
S"<Storage {'function': 'list_all_dev_projects', '...s/DEV_bootstrap_ch/', 'post_vars': <Storage {}>}>"
p4902
sg3095
S'<gluon.html.DIV object>'
p4903
sS'record'
p4904
S"<Row {'code': 't21', 'name': 'test', 'project_jo...ordinator': 1, 'project_publication_date': None}>"
p4905
sS'ui'
p4906
S"{'button': 'ui-button-text-icon-primary', 'buttonadd': 'ui-icon ui-icon-plusthick', 'buttonback': 'ui-icon ui-icon-arrowreturnthick-1-w', 'buttondelete': 'ui-icon ui-icon-trash', 'buttonedit': 'ui-icon ui-icon-pencil', 'buttonexport': 'ui-icon ui-icon-transferthick-e-w', 'buttontable': 'ui-icon ui-icon-triangle-1-e', 'buttontext': 'ui-button-text', 'buttonview': 'ui-icon ui-icon-zoomin', 'content': 'ui-widget-content', ...}"
p4907
sg2199
S'<function url>'
p4908
sS'gridbutton'
p4909
S'<function gridbutton>'
p4910
sS'table'
p4911
S'<Table project (id,name,code,start_date,project_...name,project_publication_date,project_pubmed_id)>'
p4912
sS'link'
p4913
S'<function <lambda>>'
p4914
sg4881
g100
sssS'traceback'
p4915
S'Traceback (most recent call last):\n  File "/home/anil/bootstrap/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 1106, in <module>\n  File "/home/anil/bootstrap/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 317, in list_all_dev_projects\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'raw_data_storage_information\'])\n  File "/home/anil/bootstrap/web2py/gluon/sqlhtml.py", line 2489, in smartgrid\n    user_signature=user_signature, **kwargs)\n  File "/home/anil/bootstrap/web2py/gluon/sqlhtml.py", line 1897, in grid\n    res = DIV(buttons(edit=editable, record=record), view_form,\n  File "/home/anil/bootstrap/web2py/gluon/sqlhtml.py", line 1854, in buttons\n    buttons.append(link(record))\nTypeError: append() takes exactly 2 arguments (1 given)\n'
p4916
s.