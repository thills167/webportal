(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'id'"
p3
sS'layer'
p4
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n########################## Tips\n#http://stackoverflow.com/questions/12354353/duplicate-a-record-and-its-references-in-web2py\n\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL(\'default\',\'list_all_projects\'))\n    #redirect(URL(\'plugin_wiki\',\'page/home\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef authenticate(uid,pid,func):   \n   result = db(db.role.user == uid)(db.role.approval_status==1)(db.role.project == pid).select(db.role.ALL)\n   myroles = [role_list[int(k.role)] for k in result]\n   is_coordinator = db(db.project.project_coordinator == uid).select(db.project.ALL)\n   if func == \'roles\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'You must be a project co-ordinator to manage roles\'\n\treturn error  \n   if func == \'add_project\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'\'\n        return error\n   if func == \'add_sample\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'SignUp for  "Experimentalist Role" in this project to add a sample. Use Browser back button to navigate to Project View.\'\n        return error\n   if func == \'experimentalist\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You must be an experimentalist to add the biosource information of a sample\'\n        return error\n   if func == \'my_samples\':\n\tif  \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You are not authorized to view this page\'\n        return error\n\ndef basic_groups(pid):\n    """ creates the basic groups on general basis or id basis """\n    if not pid:\n        for i in role_list:\n\t   auth.add_group(i,i) \n    else:\n        pid_groups = [str(pid)+\'#\'+i for i in role_list]\n\tfor k in pid_groups:\n\t   auth.add_group(k,k)\n    return locals()\t   \n\n\ndef add_project():\n    error = authenticate(auth.user.id,\'\',\'add_project\')\n    form = SQLFORM(db.project,fields=[\'name\',\'code\',\'start_date\',\'project_description\',\'project_literature_reference\',\'project_journal_name\',\'project_publication_date\',\'project_pubmed_id\'],showid=False)\n    form.vars.project_coordinator = auth.user.id\n    if form.process().accepted:\n       response.flash =\'accepted\'\n       result = db(db.project.name == form.vars.name).select(db.project.ALL).first()\n       basic_groups(result.id)\n       db.role.insert(user=auth.user.id,project=result.id,role=6,approval_status=1,member_since=now)\n       redirect(URL(\'project_viewer\',args = form.vars.id))\n    elif form.errors:\n       response.flash = \'errors\'\n    return locals()\n\ndef remove_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """takes an id and removes the project """ \n    pid  = request.args(0)\n    pid_groups = [str(pid)+\'#\'+i for i in role_list]\n    for z in pid_groups:\n\tpgid = auth.id_group(z)\n\tauth.del_group(pgid)\n    del db.project[pid]\n    return locals()\n\ndef add_experiment():\n    grid = SQLFORM.grid(db.experiment)\n    return locals()\n\ndef new_affiliation():\n    form = SQLFORM(db.affiliation)\n    return locals()\n\ndef edit_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    crud.settings.update_next = URL(\'project_viewer\',args=request.args)\n    form=crud.update(db.project,request.args(0),deletable=False)\n    return locals();\n \n@auth.requires_login()\ndef project_viewer():\n    pid = request.args[-1]\n    project=db(db.project.id==pid).select(db.project.ALL).first()\n    cord = db(db.auth_user.id==project.project_coordinator).select(db.auth_user.ALL).first()\n    \n    if authenticate(auth.user.id,\'\',\'roles\') == \'\':\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'Grant Role\'),False,URL(\'roles\',args=project.id)),\n      (T(\'Edit Project\'),False,URL(\'edit_project\',args=project.id)),\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n    else :\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n      \n    if project.project_status == \'1\':\n      response.menu+= [\n      (T(\'Published Samples\'), False,URL(\'list_all_pub_samples\',args=(pid)),[])\n      ]\n    elif authenticate(auth.user.id,pid,\'add_sample\')==\'\':\n        response.menu+= [\n        (T(\'Samples\'), False,URL(\'my_samples\',args=(pid)),[\n        (T(\'My Samples\'), False,URL(\'my_samples\',args=(pid))),\n        ])\n        ]\n      \n    users=db(db.role.approval_status==1)(db.role.project==pid)(db.role.project == db.project.id)(db.role.user==db.auth_user.id).select(db.role.ALL,db.auth_user.ALL)\n    is_coordinator = \'\'\n    myroles = \'\'\n    if auth.user:\n      is_coordinator = db(db.project.id == pid)(db.project.project_coordinator == auth.user.id).select(db.project.ALL).first()\n      result = db(db.role.user == auth.user.id)(db.role.project == pid).select(db.role.ALL)\n      myroles = [role_list[int(k.role)] for k in result]\n      \n    return locals()\n\n\ndef add_sample():\n  """ creates a exp on an project basis and should continue to fill the bio source data """\n  """ available to the experimentalist """ \n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  if \'new\' in request.args:\n   pid = request.args[-3]\n  else:\n   pid = request.args(0)\n  error = authenticate(auth.user.id,pid,\'add_sample\') \n  form = SQLFORM(db.sample,fields=[\'name\',\'code\',\'description\',\'scientific_name\'],showid=False)\n#added a field project in sample table\n#added two more fields in form insert root/replica etc and scientific name\n  if form.validate():\n      i = db.sample.insert(experimentalist=auth.user.id,name=form.vars.name,code=form.vars.code ,description=form.vars.description,experiment=pid,scientific_name=form.vars.scientific_name,working_status=1,publication_status=0)\n      response.flash = \'sample has been created\'\n      redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',pid])) \n      # redirect to the sample creation \n  elif form.errors:\n      response.flash = \'Form has errors\'\n  return locals()\n\ndef sample_viewer():\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   i = request.args[-1]\n   if \'view\' in request.args: \n\tform = SQLFORM(db.sample, i,readonly =True,showid=False)\n   if \'edit\' in request.args: \n\tform = SQLFORM(db.sample, i,showid=False)\n   if form.process().accepted:\n\tresponse.flash = \'form accepted\'\n\tredirect(URL(\'list_all_dev_projects\',args = request.args[0:-3])) \n   elif form.errors:\n\tresponse.flash = \'form has errors\'\n   return dict(form=form)\n\ndef list_all_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'index\'), [])\n    #(T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    #(T(\'Project\'), False, URL(\'default\',\'list_all_projects\'), [(T(\'Add Project\'),False,URL(\'default\',\'add_project\'))])\n    ]\n    form=FORM(\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    form.elements(\'input[type=submit]\')[0]["_value"] = "Search"\n    if form.accepts(request,session):\n      redirect(URL(\'grid?keywords=tomato\')) \n    \n    #form=FORM(\'\',INPUT(_name=\'name\') ,INPUT(_type=\'submit\'))\n    #if form.process().accepted:\n      #redirect(URL(\'grid\')) \n    pub_projects = db(db.project.project_status == 1)(db.project.project_coordinator==db.auth_user.id).select(db.project.ALL,db.auth_user.ALL)\n    dev_projects = db(db.project.project_status == 0)(db.project.project_coordinator==db.auth_user.id).select(db.project.ALL,db.auth_user.ALL)\n    authenticated = \'no\'\n    if auth.user:\n     authenticated = authenticate(auth.user.id,\'\',\'add_project\')\n    return locals()\n\ndef grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.sample.id==db.biosource.sample_name))\n   #query=((db.project.project_status==0))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n   grid = SQLFORM.grid(query)\n   return locals() \n\ndef temp():\n   q1 = (db.project.project_status ==  0)\n   q2 = (db.sample.publication_status == True)\n   ck = {}\n   fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n   l1=[lambda row: A(\'View Post\',_href=URL("default","view",args=[row.id]))]\n   links={\'project\':l1}\n   grid = SQLFORM.smartgrid(db.project,ck,fields=fi,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n   return locals() \n\ndef list_all_pub_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    q1 = (db.project.project_status ==  1)\n    q2 = (db.sample.publication_status == True)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n    \trouter(request.args)\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=False,deletable=False,create = False,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n    \n    return locals()\n\ndef list_all_dev_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    db.sample.experimentalist.default=auth.user.id\n    db.sample.experiment.writable = False\n    q1 = (db.project.project_status ==  0)\n    q2 = (db.sample.experimentalist == auth.user.id)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.sample.publication_status,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.spectrophotometry.sample_name,db.raw_data_storage_information.sample_name]\n    edit_dict = {\'project\':False}\n    delete_dict = {\'project\':False}\n#Allow only one original sample to be added in an experiment others are replicates\n    addsample = True\n   # if \'sample\' in request.args and \'new\' in request.args:\n   #      count = db(db.sample.experiment==request.args[-3]).count()\n   #      if(count>0):\n   #        db.sample.replica.default = \'replicate\'\n   #       # db.sample.replica.requires=IS_IN_SET([\'replicate\',\'alicot\'])\n   #      else:\n   #        db.sample.replica.default = \'Original\'\n   #        db.sample.replica.writable = False\n           \n    create_dict = {\'project\':False,\'sample\':addsample}\n#Links for replicating samples  \n    args= request.args[0:5]\n    #args1=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],"biosource.sample_name","edit","biosource"]\n    l1=[lambda row: A(\'copy\',_href=URL("default","replicate",args=request.args[:]+[row.id])),\\\n           lambda row: A(\'aliqout\',_href=URL("default","duplicate",args=request.args[:]+["aliqout"]+[row.id])), \\\n           lambda row: A(\'aliqout\',_href=URL("default","duplicate",args=request.args[:]+["aliqout"]+[row.id])), \\\n           lambda row: A(\'biosource_\'+tes(row.id,\'biosource\'),_href=URL("default","router",args=getargs(row.id,args,"biosource"))), \\\n           lambda row: A(\'PGC_\'+tes(row.id,\'plant_growth_condition\'),_href=URL("default","router",args=getargs(row.id,args,"plant_growth_condition"))), \\\n           lambda row: A(\'treatment_\'+tes(row.id,\'treatments\'),_href=URL("default","router",args=getargs(row.id,args,"treatments"))), \\\n           lambda row: A(\'harvest_\'+tes(row.id,\'harvests\'),_href=URL("default","router",args=getargs(row.id,args,"harvests"))), \\\n           lambda row: A(\'Ext_\'+tes(row.id,\'extraction_preparation\'),_href=URL("default","router",args=getargs(row.id,args,"extraction_preparation"))), \\\n           lambda row: A(\'GC_\'+tes(row.id,\'gas_chromatography\'),_href=URL("default","router",args=getargs(row.id,args,"gas_chromatography"))), \\\n           lambda row: A(\'LC_\'+tes(row.id,\'liquid_chromatography\'),_href=URL("default","router",args=getargs(row.id,args,"liquid_chromatography"))), \\\n           lambda row: A(\'MS_\'+tes(row.id,\'mass_spectroscopy\'),_href=URL("default","router",args=getargs(row.id,args,"mass_spectroscopy"))), \\\n           lambda row: A(\'spectrophotometry_\'+tes(row.id,\'spectrophotometry\'),_href=URL("default","router",args=getargs(row.id,args,"spectrophotometry")))]\n    links={\'sample\':l1}\n#customized Views for certain forms using router   \n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n     \trouter()\n    s={\'sample\':lambda ids : redirect(URL(\'default\', \'mapping_multiple\', vars=dict(id=ids)))}\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=[\'experiment\',\'sample\',\'raw_data_storage_information\'],selectable = s) \n    return locals()\n\n#gets table name and rowid as input and creates another row with same details as rowid recod has\ndef tes(a,table):\n    if db(db[table].sample_name==a).count()==0:\n     return "add"\n    else:\n        return "edit"\n    return "add"\ndef getargs(a,args,table):\n    row = db(db[table].sample_name==a).select(db[table].id).first()\n    if row:\n        args=args+[table+".sample_name",a,"edit",table,row.id]\n        return args\n    else:\n        args = args+[table+".sample_name",a,"new",table]\n        return args\n\ndef replicate():\n    if db(db.template.user==auth.user.id).count() == 0:\n       db.template.insert(user=auth.user.id, sample=request.args[-1])\n    else:   \n       db(db.template.user == auth.user.id).update(sample=request.args[-1])\n    redirect(URL(\'list_all_dev_projects\',args=request.args[0:-1]))\n    #Unique fields take care\n    #product.update(sampleid=\'temp\')\n    return() \ndef duplicate():\n    if True:\n        rec = db(db.sample.id==request.args[-1]).select(db.sample.ALL).first()\n        rec.update(parent=rec.id,replica=str(request.args[-2]))\n        in_row = db.sample.insert(**db.sample._filter_fields(rec))\n        for tb in [\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\']:\n            row = db(db[tb].sample_name==request.args[-1]).select(db[tb].ALL).first()\n            if row:\n                row.update(sample_name = in_row.id)\n                db[tb].insert(**db[tb]._filter_fields(row)) \n        redirect(URL(\'list_all_dev_projects\',args=request.args[0:-2]))\n    redirect(URL(\'list_all_dev_projects\',args=[]))\n\n\ndef my_samples():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """ all my samples in the project with permissions to edit delete publish/unpublish samples """\n    error = authenticate(auth.user.id,request.args(0),\'add_sample\') \n    l =  [\'project\',\'experiment.project\',request.args(0)]\n    if error == \'\':\n      redirect(URL(\'list_all_dev_projects\',args=l))\n    return locals()\n\ndef list_all_samples1():\n    proj_id = request.args(0)\n    pub_samples = db((db.sample.working_status == 1)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    dev_samples = db((db.sample.working_status == 0)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    return locals()\n\ndef view_published_samples():\n    proj_id = request.args(0)\n    return locals() \n\ndef router():\n    l=request.args\n    if \'biosource\' in l:\n      redirect(URL(\'insert_biosource\',args = l))\n    elif \'plant_growth_condition\' in l:\n      redirect(URL(\'insert_pgc\',args = l))\n    elif \'treatments\' in l:\n      redirect(URL(\'insert_treatments\',args = l))\n    elif \'harvests\' in l:\n      redirect(URL(\'insert_harvests\',args = l))\n    elif \'extraction_preparation\' in l:\n      redirect(URL(\'insert_ep\',args = l))\n    elif \'gas_chromatography\' in l:\n        redirect(URL(\'insert_gc\',args = l))\n    elif \'liquid_chromatography\' in l:\n        redirect(URL(\'insert_lc\',args = l))\n    elif \'mass_spectroscopy\' in l:\n        redirect(URL(\'insert_ms\',args = l))\n    elif \'raw_data_storage_information\' in l:\n          redirect(URL(\'insert_raw_data\',args = l))\n    elif \'sample\' in l and \'view\' in l:\t\t\n        redirect(URL(\'sample\',args=l))\n    else:\n        return()\n\n\'\'\'\telif \'sample\' in l and \'new\' in l:\t\t\n\t  redirect(URL(\'add_sample\',args = l))\n\telif \'sample\' in l:\t\t\n\t  redirect(URL(\'sample_viewer\',args = l))\n\telif \'project\' in l:\n\t  redirect(URL(\'project_viewer\',args=l))\n\telse : \n\t  redirect(URL(\'index\'))\'\'\'\n\ndef list_all_pub_samples():\n#    proj_id = request.args(0)\n#    pub = request.args(1) # if pub == 1 show published samples otherwise non published samples\n#   pub_query = (db.sample.working_status == 1 and db.sample.project == proj_id)\n#   unpub_query = (db.sample.working_status == 0 and db.sample.project == proj_id)\n#   pquery_dict = {\'sample\':pub_query}\n#   nquery_dict = {\'sample\':unpub_query}\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#       router(request.args)\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#     \trouter(request.args)\n    \n    """an argument to display published and non-published samples"""\n    """ request.args(0) - project  , request.args(1) published"""\n\n    redirect(URL(\'list_all_pub_projects\',args=[\'project\',\'experiment.project\',request.args(0)]))\n    \ndef list_all_dev_samples():\n   \n    redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',request.args(0)]))\n    return locals()\n\ndef ajx_role():\n    """ an ajax call back which takes care of insert , update and delete in the roles table """\n    rid = request.args(1)\n    if request.args(0) == \'accept\':\n       row = db(db.role.id == rid).update(approval_status = 1)\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.add_membership(gid,result.user)\n    if request.args(0) == \'unblock\':\n       del db.role[rid] \n    if request.args(0) == \'block\':\n       row = db(db.role.id == rid).update(approval_status = 2)\n    if request.args(0) == \'delete\' or request.args(0) == \'deny\':\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.del_membership(gid,result.user)\n       del db.role[rid] \n    return locals()\n\ndef reg_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ takes an id for the project and registers """\n    import datetime\n    now = datetime.datetime.now()\n    """ already requested """\n    pid = request.args(0)\n    ptitle = db(db.project.id == pid).select(db.project.ALL).first()\n    form = SQLFORM(db.role,fields=[\'role\'],showid=False)\n    if form.validate():\n       requested = db(db.role.user == auth.user.id)(db.role.project == pid)(db.role.approval_status == 0)(db.role.role==form.vars.role).count()\n       if requested == 0: \n        db.role.insert(user=auth.user.id,approval_status=0,project=pid,member_since=now,role=form.vars.role)\n        response.flash = \'accepted\'\n       else:\n        response.flash = \'You already hold the applied role\' \n    return locals() \n\ndef ajx_publish():\n    """ an ajax call back which takes care of publication status """\n    eid = request.args(1)\n    if request.args(0) == \'publish\':\n     row = db(db.project.id == eid).update(project_status = "1")\n    elif request.args(0) == \'unpublish\':\n     row = db(db.project.id == eid).update(project_status = "0")\n    redirect(URL(\'project_viewer\',args = eid))\n    return locals() \n\ndef roles():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ complete interface for managing roles for a particular project"""\n    """ should be accessible to only project co-ordinators """\n    pid = request.args(0)\n    error = authenticate(auth.user.id,pid,\'roles\')\n    accepted = db(db.auth_user.id == db.role.user)(db.role.approval_status == 1)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    pending = db(db.auth_user.id == db.role.user)(db.role.approval_status == 0)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    blocked = db(db.auth_user.id == db.role.user)(db.role.approval_status == 2)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    return locals()\n   \ndef home_page():\n    """ home page for a user , shows list of projects he is working on and his past work """\n    uid = request.args(0)\n    #my roles \n    \n    roles = db(db.role.user == uid)(db.role.project == db.project.id).select(db.role.ALL,db.project.name) \n    myroles = [role_list[int(p.role.role)] for p in roles]\n    k = {}\n    """\n    is_coordinator = db(db.project.project_coordinator==uid).select(db.project.ALL)\n    coordinating_projects = [row.name for row in is_coordinator]\n    value=\'\'\n    for p in coordinating_projects:\n       value = value + \',\'+ p\n\t  \n    k[6] = value[1:] """\n    for row in roles:\n       if row.role.role not in k:\n          k[row.role.role] = row.project.name\n       else:\n          k[row.role.role] = k[row.role.role] + \',\' + row.project.name\n    com_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    incom_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    pub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == True)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    unpub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == False) (db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    for p in k:\n       list_projects = k[p].split(\',\')\n       proj = \'\' \n       for d in list_projects:\n          res = db(db.project.name == d).select(db.project.ALL).first()\n          cat = \'\'\n          if res:\n             cat = A(res.name,_href=URL(\'project_viewer\',args=res.id))\n          if proj == \'\':\n             proj=SPAN(cat)\n          else:\n           proj = SPAN(proj,\',\',cat)\n       k[p] = proj \n    return locals()\n\ndef download():\n    return response.download(request, db)\n\ndef insert_biosource():\n#prepopulating records  \n   if \'clear\' not in request.args and \'new\' in request.args:    \n    trows = db(db.template.user==auth.user.id).select()\n    count = db(db.template.user==auth.user.id).count()\n    if count > 0:\n     rows = db(db.biosource.sample_name==trows[0].sample).select()\n     count1 = db(db.biosource.sample_name==trows[0].sample).count()\n     if count1 > 0:\n      row = rows[0]      \n      for fieldname in db.biosource.fields:\n       if fieldname!=\'id\': \n        db.biosource[fieldname].default=row[fieldname]\n   elif \'clear\' in request.args: \n    request.args.pop()\n   #result = db(db.sample.id == request.args[-3]).select(db.sample.ALL).first()\n#  error = authenticate(auth.user.id,result.project,\'insert_biosource\')\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   redirect_args = request.args[0:-3]\n   form = SQLFORM(db.biosource)\n   if \'view\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],readonly = True,showid=False)\t  \n   elif \'edit\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],showid=False)\n   elif \'new\' in request.args:\n               db.biosource.sample_name.readable = False \n               hid = {}   \n\t       form=SQLFORM(db.biosource,showid=False)\n\t       form.vars.sample_name = request.args[-3]\n \t       redirect_args = request.args[0:-4]\n   i=1\n   f1=form[0][:i+2]\n   fs1=form[0][i+2:i+7]\n   f2=form[0][i+7:]\n   form[0]=TABLE(TABLE(f1),\n      FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n   if form.process().accepted:\n     redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n     response.flash="Inserted entry"\n   return locals()\n\ndef insert_pgc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.plant_growth_condition.sample_name==trows[0].sample).select()\n    count1 = db(db.plant_growth_condition.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.plant_growth_condition.fields:\n      if fieldname!=\'id\': \n       db.plant_growth_condition[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.plant_growth_condition) \n  if \'view\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.plant_growth_condition.sample_name.readable = False \n\tform=SQLFORM(db.plant_growth_condition,showid=False)\n        form.vars.sample_name = request.args[-3]\n\tredirect_args = request.args[0:-2]\t \n  i=1\n  fs1=form[0][:i+5]\n  fss1=form[0][i+5:i+9]\n  fss2=form[0][i+9:i+10]\n  fss3=form[0][i+10:i+15]\n  f2=form[0][i+15:i+18]\n  fs2=form[0][i+18:i+21]\n  fs3=form[0][i+21:i+27]\n  f3=form[0][i+27:]\n  t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n  t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n  t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n  t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n  form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n  if form.process().accepted:\n    redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n    response.flash="form accepted"\n# redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  else:\n    response.flsh="form has some errors"\n  return locals()\n\ndef insert_ep():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.extraction_preparation.sample_name==trows[0].sample).select()\n    count1 = db(db.extraction_preparation.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.extraction_preparation.fields:\n      if fieldname!=\'id\': \n       db.extraction_preparation[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.extraction_preparation.sample_name.readable=False\n       form=SQLFORM(db.extraction_preparation,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:i+8]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][i+8:i+12])))))\n  t2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][i+12:])))\n  form[0]=TABLE(FIELDSET(t1,t2))\n  if form.process().accepted:\n       response.flash="Inserted entry"\n       redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_treatments():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.treatments.sample_name==trows[0].sample).select()\n    count1 = db(db.treatments.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.treatments.fields:\n      if fieldname!=\'id\': \n       db.treatments[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.treatments.sample_name.readable=False\n       form=SQLFORM(db.treatments,showid=False)\n       form.vars.sample_name = request.args[-3] \n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n  form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_harvests():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.harvests.sample_name==trows[0].sample).select()\n    count1 = db(db.harvests.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.harvests.fields:\n      if fieldname!=\'id\': \n       db.harvests[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.harvests.sample_name.readable=False\n       form=SQLFORM(db.harvests,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\n  i=1\t \n  t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n  form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\t  \t\ndef insert_gc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.gas_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.gas_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.gas_chromatography.fields:\n      if fieldname!=\'id\': \n       db.gas_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n\tform=SQLFORM(db.gas_chromatography,request.args[-1],readonly = True,pload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n        form=SQLFORM(db.gas_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.gas_chromatography.sample_name.readable=False\n        redirect_args = request.args[0:-2]\t \n        form=SQLFORM(db.gas_chromatography,showid=False)\n        form.vars.sample_name = request.args[-3]\n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n\tresponse.flash="Inserted entry"\n\tredirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#       redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_lc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.liquid_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.liquid_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.liquid_chromatography.fields:\n      if fieldname!=\'id\': \n       db.liquid_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.liquid_chromatography)\n  if \'view\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n      db.liquid_chromatography.sample_name.readable=False\n      redirect_args = request.args[0:-2]\t \n      form=SQLFORM(db.liquid_chromatography,showid=False)\n      form.vars.sample_name = request.args[-3] \n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_ms():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.mass_spectroscopy.sample_name==trows[0].sample).select()\n    count1 = db(db.mass_spectroscopy.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.mass_spectroscopy.fields:\n      if fieldname!=\'id\': \n       db.mass_spectroscopy[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.mass_spectroscopy.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.mass_spectroscopy,showid=False)\n    form.vars.sample_name = request.args[-3]\n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n  t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n  t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n  t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n  form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_raw_data():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.raw_data_storage_information.sample_name==trows[0].sample).select()\n    count1 = db(db.raw_data_storage_information.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.raw_data_storage_information.fields:\n      if fieldname!=\'id\': \n       db.raw_data_storage_information[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.raw_data_storage_information.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.raw_data_storage_information,showid=False)\n    form.vars.sample_name = request.args[-3]\n    form.vars.email_id_of_person=auth.user.email \n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_spectrophotometry():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.spectrophotometry.sample_name==trows[0].sample).select()\n    count1 = db(db.spectrophotometry.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.spectrophotometry.fields:\n      if fieldname!=\'id\': \n       db.spectrophotometry[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.spectrophotometry.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.spectrophotometry,showid=False)\n    form.vars.sample_name = request.args[-3]\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n#def drop_tables():\n    #are you sure you want to do this?\n    #for t in [\'auth_user\',\'auth_group\', \'auth_membership\', \'auth_permission\', \'auth_event\',\'sample\',\'biosource\',\'affiliation\',\'project\',\'role\',\'template\',\'experiment\',\'project_meta\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'feedback\',\'sample_files\']:\n    #    db[t].drop()\n    # pass\n    #return \n\ndef show_feedback():\n    grid = SQLFORM.smartgrid(db.feedback)\n    return locals()\n\n \ndef post_feedback():\n    """ allows to post feedback to the table feedback """ \n    past_feeds = db(db.feedback.feedback_on == request.env.http_referer).select(db.feedback.feedback_body,db.feedback.id)\n    form = SQLFORM(db.feedback,fields=[\'feedback_body\'],labels={\'feedback_body\':\'Your feedback about this page\'})\n    feedback_by = \'\'\n    if form.validate():\n\tif auth.user:\n            feedback_by = auth.user.id\n        else:\n\t   feedback_by = \'\'\n\tdb.feedback.insert(feedback_on=request.env.http_referer,feedback_body=form.vars.feedback_body,feedback_by=feedback_by)\n\tresponse.flash = "feedback has been duly noted and will be taken care of "\n    return locals()\n\n\ndef user_viewer():\n   """shows the user details """\n   uid = request.args(0)\n   record = db.auth_user(uid)\n   form = SQLFORM(db.auth_user,record,readonly=True,showid=False,fields=[\'first_name\',\'last_name\',\'email\',\'affiliated_to\',\'phone\',\'mobile\',\'city\'])\n   return locals()\n\n\ndef dict_dump(obj,inp):\n  ans = \'<dl class="dl-horizontal">\'\n  for key in inp.keys():\n     add = \'<dt>\'+str(inp[key])+\'</dt>\'+\'<dd>\'+str(obj[key])+\'</dd>\'\n     ans = ans+add\n  return ans\t\n\n\ndef sample():\n  """gets all the information regarding a sample in a single page """\n  sid = request.args[-1]\n  sample = db(db.sample.id == sid).select(db.sample.ALL).first()\n  user = db(db.auth_user.id == sample.experimentalist).select(db.auth_user.ALL).first()\n  experiment = db(db.experiment.id == sample.experiment).select(db.experiment.ALL).first()\n  biosource = db(db.biosource.sample_name == sid).select(db.biosource.ALL)\n  plant_growth = db(db.plant_growth_condition.sample_name == sid).select(db.plant_growth_condition.ALL)\n  treatment = db(db.treatments.sample_name == sid).select(db.treatments.ALL)\n  harvest = db(db.harvests.sample_name == sid).select(db.harvests.ALL)\n  extraction_preparation = db(db.extraction_preparation.sample_name == sid).select(db.extraction_preparation.ALL)\n  gc = db(db.gas_chromatography.sample_name == sid).select(db.gas_chromatography.ALL)\n  lc = db(db.liquid_chromatography.sample_name == sid).select(db.liquid_chromatography.ALL)\n  ms = db(db.mass_spectroscopy.sample_name == sid).select(db.mass_spectroscopy.ALL)\n  raw_storage = db(db.raw_data_storage_information.sample_name == sid).select(db.raw_data_storage_information.ALL)\n  biosource_forms = [] #a list of forms\n  for each in biosource:\n\tform = SQLFORM(db.biosource,each.id,showid=False,readonly=True)\n\ti=1\n\tf1=form[0][:i+2]\n\tfs1=form[0][i+2:i+7]\n\tf2=form[0][i+7:]\n\tform[0]=TABLE(TABLE(f1),FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n\tbiosource_forms.append(form[0])\n        \n  pgc_forms = []\n  for each in plant_growth:\n     form = SQLFORM(db.plant_growth_condition,each.id,showid=False,readonly=True)\n     i=1\n     fs1=form[0][:i+5]\n     fss1=form[0][i+5:i+9]\n     fss2=form[0][i+9:i+10]\n     fss3=form[0][i+10:i+15]\n     f2=form[0][i+15:i+18]\n     fs2=form[0][i+18:i+21]\n     fs3=form[0][i+21:i+27]\n     f3=form[0][i+27:]\n     t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n     t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n     t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n     t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n     form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n     pgc_forms.append(form[0])\n  \n  treatment_forms = []\n  for each in treatment:\n     form = SQLFORM(db.treatments,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n     form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n\n\n  harvest_forms = []\n  for each in harvest:\n     form = SQLFORM(db.harvests,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n     form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n     harvest_forms.append(form[0])\n\n  gc_forms = []\n  for each in gc:\n     form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n     j=1\n     t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n     t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n     i=15\n     t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n     t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n     t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n     t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n     t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n     t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n     t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n     form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n\n     gc_forms.append(form[0])\n \n  lc_forms = []\n  \n  for each in lc:\n    form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n    j=1\n    t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n    t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n    i=15\n    t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n    t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n    t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n    t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n    t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n    t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n    form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n    lc_forms.append(form[0])\n \n  ms_forms = []\n  for each in ms:\n    form = SQLFORM(db.mass_spectroscopy,each.id,showid=False,readonly=True)\n    i=1\n    t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n    t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n    t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n    t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n    t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n    form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))  \n    ms_forms.append(form[0])\n\n  raw_forms = []\n  for each in raw_storage:\n     form = SQLFORM(db.raw_data_storage_information,each.id,showid=False,readonly=True)\n     raw_forms.append(form[0])\n\n\n  return locals() \n\n#def grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   #query=((db.sample.project==db.project.id)&(db.project.id>0))\n   #query=((db.project.id>0)&(db.sample.project==db.project.id)&((db.sample.id==db.biosource.sample_name)&(db.sample.id==db.plant_growth_condition.sample_name)))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n#   grid = SQLFORM.grid(query)\n#   return locals()\n\n\ndef search():\n    form=FORM(\'Your name:\',\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n      redirect(URL(\'sample\',args=form.vars.name)) \n    return locals()\n    \ndef multiple_files():\n   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """\n   """ per sample . takes id of the sample as the input """\n   sid = request.args(0)\n   sample = db(db.sample.id == sid).select().first() \n   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)\n   form = SQLFORM(db.sample_files)\n   form.vars.sample = sid\n   return locals()\n\n\n\nresponse._vars=response._caller(roles)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.AttributeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.AttributeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.AttributeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.AttributeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.AttributeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.AttributeError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.AttributeError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.AttributeError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.AttributeError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.AttributeError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.AttributeError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.AttributeError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.AttributeError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.AttributeError object>"
p41
sS'args'
p42
S'("\'NoneType\' object has no attribute \'id\'",)'
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.AttributeError object>'
p47
sS'__doc__'
p48
S"'Attribute not found.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.AttributeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S"'NoneType' object has no attribute 'id'"
p55
sS'request'
p56
ccopy_reg
_reconstructor
p57
(cgluon.html
BEAUTIFY
p58
c__builtin__
object
p59
NtRp60
(dp61
S'attributes'
p62
(dp63
sS'components'
p64
(lp65
g57
(cgluon.html
TABLE
p66
g59
NtRp67
(dp68
g62
(dp69
S'level'
p70
I5
ssS'parent'
p71
Nsg64
(lp72
g57
(cgluon.html
TR
p73
g59
NtRp74
(dp75
g62
(dp76
sg71
g67
sg64
(lp77
g57
(cgluon.html
TD
p78
g59
NtRp79
(dp80
g62
(dp81
S'_style'
p82
S'font-weight:bold;vertical-align:top'
p83
ssg71
g74
sg64
(lp84
S'ajax'
p85
asbag57
(g78
g59
NtRp86
(dp87
g62
(dp88
S'_valign'
p89
S'top'
p90
ssg71
g74
sg64
(lp91
S':'
asbag57
(g78
g59
NtRp92
(dp93
g62
(dp94
sg71
g74
sg64
(lp95
g57
(g58
g59
NtRp96
(dp97
g62
(dp98
g70
I5
ssg71
g92
sg64
(lp99
S'False'
p100
asbasbasbag57
(g73
g59
NtRp101
(dp102
g62
(dp103
sg71
g67
sg64
(lp104
g57
(g78
g59
NtRp105
(dp106
g62
(dp107
g82
g83
ssg71
g101
sg64
(lp108
S'application'
p109
asbag57
(g78
g59
NtRp110
(dp111
g62
(dp112
g89
g90
ssg71
g101
sg64
(lp113
S':'
asbag57
(g78
g59
NtRp114
(dp115
g62
(dp116
sg71
g101
sg64
(lp117
g57
(g58
g59
NtRp118
(dp119
g62
(dp120
g70
I5
ssg71
g114
sg64
(lp121
S'DEV_bootstrap_ch'
p122
asbasbasbag57
(g73
g59
NtRp123
(dp124
g62
(dp125
sg71
g67
sg64
(lp126
g57
(g78
g59
NtRp127
(dp128
g62
(dp129
g82
g83
ssg71
g123
sg64
(lp130
g42
asbag57
(g78
g59
NtRp131
(dp132
g62
(dp133
g89
g90
ssg71
g123
sg64
(lp134
S':'
asbag57
(g78
g59
NtRp135
(dp136
g62
(dp137
sg71
g123
sg64
(lp138
g57
(g58
g59
NtRp139
(dp140
g62
(dp141
g70
I5
ssg71
g135
sg64
(lp142
g57
(g66
g59
NtRp143
(dp144
g62
(dp145
g70
I4
ssg71
Nsg64
(lp146
g57
(g73
g59
NtRp147
(dp148
g62
(dp149
sg71
g143
sg64
(lp150
g57
(g78
g59
NtRp151
(dp152
g62
(dp153
sg71
g147
sg64
(lp154
g57
(g58
g59
NtRp155
(dp156
g62
(dp157
g70
I4
ssg71
g151
sg64
(lp158
S'5'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp159
(dp160
g62
(dp161
sg71
g67
sg64
(lp162
g57
(g78
g59
NtRp163
(dp164
g62
(dp165
g82
g83
ssg71
g159
sg64
(lp166
S'body'
p167
asbag57
(g78
g59
NtRp168
(dp169
g62
(dp170
g89
g90
ssg71
g159
sg64
(lp171
S':'
asbag57
(g78
g59
NtRp172
(dp173
g62
(dp174
sg71
g159
sg64
(lp175
g57
(g58
g59
NtRp176
(dp177
g62
(dp178
g70
I5
ssg71
g172
sg64
(lp179
S'<cStringIO.StringO object at 0xad145ba0>'
p180
asbasbasbag57
(g73
g59
NtRp181
(dp182
g62
(dp183
sg71
g67
sg64
(lp184
g57
(g78
g59
NtRp185
(dp186
g62
(dp187
g82
g83
ssg71
g181
sg64
(lp188
S'cid'
p189
asbag57
(g78
g59
NtRp190
(dp191
g62
(dp192
g89
g90
ssg71
g181
sg64
(lp193
S':'
asbag57
(g78
g59
NtRp194
(dp195
g62
(dp196
sg71
g181
sg64
(lp197
g57
(g58
g59
NtRp198
(dp199
g62
(dp200
g70
I5
ssg71
g194
sg64
(lp201
S'None'
p202
asbasbasbag57
(g73
g59
NtRp203
(dp204
g62
(dp205
sg71
g67
sg64
(lp206
g57
(g78
g59
NtRp207
(dp208
g62
(dp209
g82
g83
ssg71
g203
sg64
(lp210
S'client'
p211
asbag57
(g78
g59
NtRp212
(dp213
g62
(dp214
g89
g90
ssg71
g203
sg64
(lp215
S':'
asbag57
(g78
g59
NtRp216
(dp217
g62
(dp218
sg71
g203
sg64
(lp219
g57
(g58
g59
NtRp220
(dp221
g62
(dp222
g70
I5
ssg71
g216
sg64
(lp223
S'127.0.0.1'
p224
asbasbasbag57
(g73
g59
NtRp225
(dp226
g62
(dp227
sg71
g67
sg64
(lp228
g57
(g78
g59
NtRp229
(dp230
g62
(dp231
g82
g83
ssg71
g225
sg64
(lp232
S'controller'
p233
asbag57
(g78
g59
NtRp234
(dp235
g62
(dp236
g89
g90
ssg71
g225
sg64
(lp237
S':'
asbag57
(g78
g59
NtRp238
(dp239
g62
(dp240
sg71
g225
sg64
(lp241
g57
(g58
g59
NtRp242
(dp243
g62
(dp244
g70
I5
ssg71
g238
sg64
(lp245
S'default'
p246
asbasbasbag57
(g73
g59
NtRp247
(dp248
g62
(dp249
sg71
g67
sg64
(lp250
g57
(g78
g59
NtRp251
(dp252
g62
(dp253
g82
g83
ssg71
g247
sg64
(lp254
S'cookies'
p255
asbag57
(g78
g59
NtRp256
(dp257
g62
(dp258
g89
g90
ssg71
g247
sg64
(lp259
S':'
asbag57
(g78
g59
NtRp260
(dp261
g62
(dp262
sg71
g247
sg64
(lp263
g57
(g58
g59
NtRp264
(dp265
g62
(dp266
g70
I5
ssg71
g260
sg64
(lp267
g57
(g66
g59
NtRp268
(dp269
g62
(dp270
g70
I4
ssg71
Nsg64
(lp271
g57
(g73
g59
NtRp272
(dp273
g62
(dp274
sg71
g268
sg64
(lp275
g57
(g78
g59
NtRp276
(dp277
g62
(dp278
g82
g83
ssg71
g272
sg64
(lp279
S'session_id_admin'
p280
asbag57
(g78
g59
NtRp281
(dp282
g62
(dp283
g89
g90
ssg71
g272
sg64
(lp284
S':'
asbag57
(g78
g59
NtRp285
(dp286
g62
(dp287
sg71
g272
sg64
(lp288
g57
(g58
g59
NtRp289
(dp290
g62
(dp291
g70
I4
ssg71
g285
sg64
(lp292
S'127.0.0.1-139d73ee-0525-46bf-aeb6-deeffe5cb9b3'
p293
ag57
(g66
g59
NtRp294
(dp295
g62
(dp296
g70
I3
ssg71
Nsg64
(lp297
g57
(g73
g59
NtRp298
(dp299
g62
(dp300
sg71
g294
sg64
(lp301
g57
(g78
g59
NtRp302
(dp303
g62
(dp304
g82
g83
ssg71
g298
sg64
(lp305
S'comment'
p306
asbag57
(g78
g59
NtRp307
(dp308
g62
(dp309
g89
g90
ssg71
g298
sg64
(lp310
S':'
asbag57
(g78
g59
NtRp311
(dp312
g62
(dp313
sg71
g298
sg64
(lp314
g57
(g58
g59
NtRp315
(dp316
g62
(dp317
g70
I3
ssg71
g311
sg64
(lp318
S''
asbasbasbag57
(g73
g59
NtRp319
(dp320
g62
(dp321
sg71
g294
sg64
(lp322
g57
(g78
g59
NtRp323
(dp324
g62
(dp325
g82
g83
ssg71
g319
sg64
(lp326
S'domain'
p327
asbag57
(g78
g59
NtRp328
(dp329
g62
(dp330
g89
g90
ssg71
g319
sg64
(lp331
S':'
asbag57
(g78
g59
NtRp332
(dp333
g62
(dp334
sg71
g319
sg64
(lp335
g57
(g58
g59
NtRp336
(dp337
g62
(dp338
g70
I3
ssg71
g332
sg64
(lp339
S''
asbasbasbag57
(g73
g59
NtRp340
(dp341
g62
(dp342
sg71
g294
sg64
(lp343
g57
(g78
g59
NtRp344
(dp345
g62
(dp346
g82
g83
ssg71
g340
sg64
(lp347
S'expires'
p348
asbag57
(g78
g59
NtRp349
(dp350
g62
(dp351
g89
g90
ssg71
g340
sg64
(lp352
S':'
asbag57
(g78
g59
NtRp353
(dp354
g62
(dp355
sg71
g340
sg64
(lp356
g57
(g58
g59
NtRp357
(dp358
g62
(dp359
g70
I3
ssg71
g353
sg64
(lp360
S''
asbasbasbag57
(g73
g59
NtRp361
(dp362
g62
(dp363
sg71
g294
sg64
(lp364
g57
(g78
g59
NtRp365
(dp366
g62
(dp367
g82
g83
ssg71
g361
sg64
(lp368
S'httponly'
p369
asbag57
(g78
g59
NtRp370
(dp371
g62
(dp372
g89
g90
ssg71
g361
sg64
(lp373
S':'
asbag57
(g78
g59
NtRp374
(dp375
g62
(dp376
sg71
g361
sg64
(lp377
g57
(g58
g59
NtRp378
(dp379
g62
(dp380
g70
I3
ssg71
g374
sg64
(lp381
S''
asbasbasbag57
(g73
g59
NtRp382
(dp383
g62
(dp384
sg71
g294
sg64
(lp385
g57
(g78
g59
NtRp386
(dp387
g62
(dp388
g82
g83
ssg71
g382
sg64
(lp389
S'max-age'
p390
asbag57
(g78
g59
NtRp391
(dp392
g62
(dp393
g89
g90
ssg71
g382
sg64
(lp394
S':'
asbag57
(g78
g59
NtRp395
(dp396
g62
(dp397
sg71
g382
sg64
(lp398
g57
(g58
g59
NtRp399
(dp400
g62
(dp401
g70
I3
ssg71
g395
sg64
(lp402
S''
asbasbasbag57
(g73
g59
NtRp403
(dp404
g62
(dp405
sg71
g294
sg64
(lp406
g57
(g78
g59
NtRp407
(dp408
g62
(dp409
g82
g83
ssg71
g403
sg64
(lp410
S'path'
p411
asbag57
(g78
g59
NtRp412
(dp413
g62
(dp414
g89
g90
ssg71
g403
sg64
(lp415
S':'
asbag57
(g78
g59
NtRp416
(dp417
g62
(dp418
sg71
g403
sg64
(lp419
g57
(g58
g59
NtRp420
(dp421
g62
(dp422
g70
I3
ssg71
g416
sg64
(lp423
S''
asbasbasbag57
(g73
g59
NtRp424
(dp425
g62
(dp426
sg71
g294
sg64
(lp427
g57
(g78
g59
NtRp428
(dp429
g62
(dp430
g82
g83
ssg71
g424
sg64
(lp431
S'secure'
p432
asbag57
(g78
g59
NtRp433
(dp434
g62
(dp435
g89
g90
ssg71
g424
sg64
(lp436
S':'
asbag57
(g78
g59
NtRp437
(dp438
g62
(dp439
sg71
g424
sg64
(lp440
g57
(g58
g59
NtRp441
(dp442
g62
(dp443
g70
I3
ssg71
g437
sg64
(lp444
S''
asbasbasbag57
(g73
g59
NtRp445
(dp446
g62
(dp447
sg71
g294
sg64
(lp448
g57
(g78
g59
NtRp449
(dp450
g62
(dp451
g82
g83
ssg71
g445
sg64
(lp452
S'version'
p453
asbag57
(g78
g59
NtRp454
(dp455
g62
(dp456
g89
g90
ssg71
g445
sg64
(lp457
S':'
asbag57
(g78
g59
NtRp458
(dp459
g62
(dp460
sg71
g445
sg64
(lp461
g57
(g58
g59
NtRp462
(dp463
g62
(dp464
g70
I3
ssg71
g458
sg64
(lp465
S''
asbasbasbasbasbasbasbag57
(g73
g59
NtRp466
(dp467
g62
(dp468
sg71
g268
sg64
(lp469
g57
(g78
g59
NtRp470
(dp471
g62
(dp472
g82
g83
ssg71
g466
sg64
(lp473
S'session_id_dev_bootstrap_ch'
p474
asbag57
(g78
g59
NtRp475
(dp476
g62
(dp477
g89
g90
ssg71
g466
sg64
(lp478
S':'
asbag57
(g78
g59
NtRp479
(dp480
g62
(dp481
sg71
g466
sg64
(lp482
g57
(g58
g59
NtRp483
(dp484
g62
(dp485
g70
I4
ssg71
g479
sg64
(lp486
S'127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a'
p487
ag57
(g66
g59
NtRp488
(dp489
g62
(dp490
g70
I3
ssg71
Nsg64
(lp491
g57
(g73
g59
NtRp492
(dp493
g62
(dp494
sg71
g488
sg64
(lp495
g57
(g78
g59
NtRp496
(dp497
g62
(dp498
g82
g83
ssg71
g492
sg64
(lp499
g306
asbag57
(g78
g59
NtRp500
(dp501
g62
(dp502
g89
g90
ssg71
g492
sg64
(lp503
S':'
asbag57
(g78
g59
NtRp504
(dp505
g62
(dp506
sg71
g492
sg64
(lp507
g57
(g58
g59
NtRp508
(dp509
g62
(dp510
g70
I3
ssg71
g504
sg64
(lp511
S''
asbasbasbag57
(g73
g59
NtRp512
(dp513
g62
(dp514
sg71
g488
sg64
(lp515
g57
(g78
g59
NtRp516
(dp517
g62
(dp518
g82
g83
ssg71
g512
sg64
(lp519
g327
asbag57
(g78
g59
NtRp520
(dp521
g62
(dp522
g89
g90
ssg71
g512
sg64
(lp523
S':'
asbag57
(g78
g59
NtRp524
(dp525
g62
(dp526
sg71
g512
sg64
(lp527
g57
(g58
g59
NtRp528
(dp529
g62
(dp530
g70
I3
ssg71
g524
sg64
(lp531
S''
asbasbasbag57
(g73
g59
NtRp532
(dp533
g62
(dp534
sg71
g488
sg64
(lp535
g57
(g78
g59
NtRp536
(dp537
g62
(dp538
g82
g83
ssg71
g532
sg64
(lp539
g348
asbag57
(g78
g59
NtRp540
(dp541
g62
(dp542
g89
g90
ssg71
g532
sg64
(lp543
S':'
asbag57
(g78
g59
NtRp544
(dp545
g62
(dp546
sg71
g532
sg64
(lp547
g57
(g58
g59
NtRp548
(dp549
g62
(dp550
g70
I3
ssg71
g544
sg64
(lp551
S''
asbasbasbag57
(g73
g59
NtRp552
(dp553
g62
(dp554
sg71
g488
sg64
(lp555
g57
(g78
g59
NtRp556
(dp557
g62
(dp558
g82
g83
ssg71
g552
sg64
(lp559
g369
asbag57
(g78
g59
NtRp560
(dp561
g62
(dp562
g89
g90
ssg71
g552
sg64
(lp563
S':'
asbag57
(g78
g59
NtRp564
(dp565
g62
(dp566
sg71
g552
sg64
(lp567
g57
(g58
g59
NtRp568
(dp569
g62
(dp570
g70
I3
ssg71
g564
sg64
(lp571
S''
asbasbasbag57
(g73
g59
NtRp572
(dp573
g62
(dp574
sg71
g488
sg64
(lp575
g57
(g78
g59
NtRp576
(dp577
g62
(dp578
g82
g83
ssg71
g572
sg64
(lp579
g390
asbag57
(g78
g59
NtRp580
(dp581
g62
(dp582
g89
g90
ssg71
g572
sg64
(lp583
S':'
asbag57
(g78
g59
NtRp584
(dp585
g62
(dp586
sg71
g572
sg64
(lp587
g57
(g58
g59
NtRp588
(dp589
g62
(dp590
g70
I3
ssg71
g584
sg64
(lp591
S''
asbasbasbag57
(g73
g59
NtRp592
(dp593
g62
(dp594
sg71
g488
sg64
(lp595
g57
(g78
g59
NtRp596
(dp597
g62
(dp598
g82
g83
ssg71
g592
sg64
(lp599
g411
asbag57
(g78
g59
NtRp600
(dp601
g62
(dp602
g89
g90
ssg71
g592
sg64
(lp603
S':'
asbag57
(g78
g59
NtRp604
(dp605
g62
(dp606
sg71
g592
sg64
(lp607
g57
(g58
g59
NtRp608
(dp609
g62
(dp610
g70
I3
ssg71
g604
sg64
(lp611
S''
asbasbasbag57
(g73
g59
NtRp612
(dp613
g62
(dp614
sg71
g488
sg64
(lp615
g57
(g78
g59
NtRp616
(dp617
g62
(dp618
g82
g83
ssg71
g612
sg64
(lp619
g432
asbag57
(g78
g59
NtRp620
(dp621
g62
(dp622
g89
g90
ssg71
g612
sg64
(lp623
S':'
asbag57
(g78
g59
NtRp624
(dp625
g62
(dp626
sg71
g612
sg64
(lp627
g57
(g58
g59
NtRp628
(dp629
g62
(dp630
g70
I3
ssg71
g624
sg64
(lp631
S''
asbasbasbag57
(g73
g59
NtRp632
(dp633
g62
(dp634
sg71
g488
sg64
(lp635
g57
(g78
g59
NtRp636
(dp637
g62
(dp638
g82
g83
ssg71
g632
sg64
(lp639
g453
asbag57
(g78
g59
NtRp640
(dp641
g62
(dp642
g89
g90
ssg71
g632
sg64
(lp643
S':'
asbag57
(g78
g59
NtRp644
(dp645
g62
(dp646
sg71
g632
sg64
(lp647
g57
(g58
g59
NtRp648
(dp649
g62
(dp650
g70
I3
ssg71
g644
sg64
(lp651
S''
asbasbasbasbasbasbasbag57
(g73
g59
NtRp652
(dp653
g62
(dp654
sg71
g268
sg64
(lp655
g57
(g78
g59
NtRp656
(dp657
g62
(dp658
g82
g83
ssg71
g652
sg64
(lp659
S'session_id_welcome'
p660
asbag57
(g78
g59
NtRp661
(dp662
g62
(dp663
g89
g90
ssg71
g652
sg64
(lp664
S':'
asbag57
(g78
g59
NtRp665
(dp666
g62
(dp667
sg71
g652
sg64
(lp668
g57
(g58
g59
NtRp669
(dp670
g62
(dp671
g70
I4
ssg71
g665
sg64
(lp672
S'127.0.0.1-73acd783-e52e-42fb-8ab7-4f6570d093df'
p673
ag57
(g66
g59
NtRp674
(dp675
g62
(dp676
g70
I3
ssg71
Nsg64
(lp677
g57
(g73
g59
NtRp678
(dp679
g62
(dp680
sg71
g674
sg64
(lp681
g57
(g78
g59
NtRp682
(dp683
g62
(dp684
g82
g83
ssg71
g678
sg64
(lp685
g306
asbag57
(g78
g59
NtRp686
(dp687
g62
(dp688
g89
g90
ssg71
g678
sg64
(lp689
S':'
asbag57
(g78
g59
NtRp690
(dp691
g62
(dp692
sg71
g678
sg64
(lp693
g57
(g58
g59
NtRp694
(dp695
g62
(dp696
g70
I3
ssg71
g690
sg64
(lp697
S''
asbasbasbag57
(g73
g59
NtRp698
(dp699
g62
(dp700
sg71
g674
sg64
(lp701
g57
(g78
g59
NtRp702
(dp703
g62
(dp704
g82
g83
ssg71
g698
sg64
(lp705
g327
asbag57
(g78
g59
NtRp706
(dp707
g62
(dp708
g89
g90
ssg71
g698
sg64
(lp709
S':'
asbag57
(g78
g59
NtRp710
(dp711
g62
(dp712
sg71
g698
sg64
(lp713
g57
(g58
g59
NtRp714
(dp715
g62
(dp716
g70
I3
ssg71
g710
sg64
(lp717
S''
asbasbasbag57
(g73
g59
NtRp718
(dp719
g62
(dp720
sg71
g674
sg64
(lp721
g57
(g78
g59
NtRp722
(dp723
g62
(dp724
g82
g83
ssg71
g718
sg64
(lp725
g348
asbag57
(g78
g59
NtRp726
(dp727
g62
(dp728
g89
g90
ssg71
g718
sg64
(lp729
S':'
asbag57
(g78
g59
NtRp730
(dp731
g62
(dp732
sg71
g718
sg64
(lp733
g57
(g58
g59
NtRp734
(dp735
g62
(dp736
g70
I3
ssg71
g730
sg64
(lp737
S''
asbasbasbag57
(g73
g59
NtRp738
(dp739
g62
(dp740
sg71
g674
sg64
(lp741
g57
(g78
g59
NtRp742
(dp743
g62
(dp744
g82
g83
ssg71
g738
sg64
(lp745
g369
asbag57
(g78
g59
NtRp746
(dp747
g62
(dp748
g89
g90
ssg71
g738
sg64
(lp749
S':'
asbag57
(g78
g59
NtRp750
(dp751
g62
(dp752
sg71
g738
sg64
(lp753
g57
(g58
g59
NtRp754
(dp755
g62
(dp756
g70
I3
ssg71
g750
sg64
(lp757
S''
asbasbasbag57
(g73
g59
NtRp758
(dp759
g62
(dp760
sg71
g674
sg64
(lp761
g57
(g78
g59
NtRp762
(dp763
g62
(dp764
g82
g83
ssg71
g758
sg64
(lp765
g390
asbag57
(g78
g59
NtRp766
(dp767
g62
(dp768
g89
g90
ssg71
g758
sg64
(lp769
S':'
asbag57
(g78
g59
NtRp770
(dp771
g62
(dp772
sg71
g758
sg64
(lp773
g57
(g58
g59
NtRp774
(dp775
g62
(dp776
g70
I3
ssg71
g770
sg64
(lp777
S''
asbasbasbag57
(g73
g59
NtRp778
(dp779
g62
(dp780
sg71
g674
sg64
(lp781
g57
(g78
g59
NtRp782
(dp783
g62
(dp784
g82
g83
ssg71
g778
sg64
(lp785
g411
asbag57
(g78
g59
NtRp786
(dp787
g62
(dp788
g89
g90
ssg71
g778
sg64
(lp789
S':'
asbag57
(g78
g59
NtRp790
(dp791
g62
(dp792
sg71
g778
sg64
(lp793
g57
(g58
g59
NtRp794
(dp795
g62
(dp796
g70
I3
ssg71
g790
sg64
(lp797
S''
asbasbasbag57
(g73
g59
NtRp798
(dp799
g62
(dp800
sg71
g674
sg64
(lp801
g57
(g78
g59
NtRp802
(dp803
g62
(dp804
g82
g83
ssg71
g798
sg64
(lp805
g432
asbag57
(g78
g59
NtRp806
(dp807
g62
(dp808
g89
g90
ssg71
g798
sg64
(lp809
S':'
asbag57
(g78
g59
NtRp810
(dp811
g62
(dp812
sg71
g798
sg64
(lp813
g57
(g58
g59
NtRp814
(dp815
g62
(dp816
g70
I3
ssg71
g810
sg64
(lp817
S''
asbasbasbag57
(g73
g59
NtRp818
(dp819
g62
(dp820
sg71
g674
sg64
(lp821
g57
(g78
g59
NtRp822
(dp823
g62
(dp824
g82
g83
ssg71
g818
sg64
(lp825
g453
asbag57
(g78
g59
NtRp826
(dp827
g62
(dp828
g89
g90
ssg71
g818
sg64
(lp829
S':'
asbag57
(g78
g59
NtRp830
(dp831
g62
(dp832
sg71
g818
sg64
(lp833
g57
(g58
g59
NtRp834
(dp835
g62
(dp836
g70
I3
ssg71
g830
sg64
(lp837
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp838
(dp839
g62
(dp840
sg71
g67
sg64
(lp841
g57
(g78
g59
NtRp842
(dp843
g62
(dp844
g82
g83
ssg71
g838
sg64
(lp845
S'env'
p846
asbag57
(g78
g59
NtRp847
(dp848
g62
(dp849
g89
g90
ssg71
g838
sg64
(lp850
S':'
asbag57
(g78
g59
NtRp851
(dp852
g62
(dp853
sg71
g838
sg64
(lp854
g57
(g58
g59
NtRp855
(dp856
g62
(dp857
g70
I5
ssg71
g851
sg64
(lp858
g57
(g66
g59
NtRp859
(dp860
g62
(dp861
g70
I4
ssg71
Nsg64
(lp862
g57
(g73
g59
NtRp863
(dp864
g62
(dp865
sg71
g859
sg64
(lp866
g57
(g78
g59
NtRp867
(dp868
g62
(dp869
g82
g83
ssg71
g863
sg64
(lp870
S'app_folders'
p871
asbag57
(g78
g59
NtRp872
(dp873
g62
(dp874
g89
g90
ssg71
g863
sg64
(lp875
S':'
asbag57
(g78
g59
NtRp876
(dp877
g62
(dp878
sg71
g863
sg64
(lp879
g57
(g58
g59
NtRp880
(dp881
g62
(dp882
g70
I4
ssg71
g876
sg64
(lp883
S"set(['/home/anil/Downloads/web2py/applications/welcome/', '/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/', '/home/anil/Downloads/web2py/applications/admin/'])"
p884
asbasbasbag57
(g73
g59
NtRp885
(dp886
g62
(dp887
sg71
g859
sg64
(lp888
g57
(g78
g59
NtRp889
(dp890
g62
(dp891
g82
g83
ssg71
g885
sg64
(lp892
S'applications_parent'
p893
asbag57
(g78
g59
NtRp894
(dp895
g62
(dp896
g89
g90
ssg71
g885
sg64
(lp897
S':'
asbag57
(g78
g59
NtRp898
(dp899
g62
(dp900
sg71
g885
sg64
(lp901
g57
(g58
g59
NtRp902
(dp903
g62
(dp904
g70
I4
ssg71
g898
sg64
(lp905
S'/home/anil/Downloads/web2py'
p906
asbasbasbag57
(g73
g59
NtRp907
(dp908
g62
(dp909
sg71
g859
sg64
(lp910
g57
(g78
g59
NtRp911
(dp912
g62
(dp913
g82
g83
ssg71
g907
sg64
(lp914
S'cmd_args'
p915
asbag57
(g78
g59
NtRp916
(dp917
g62
(dp918
g89
g90
ssg71
g907
sg64
(lp919
S':'
asbag57
(g78
g59
NtRp920
(dp921
g62
(dp922
sg71
g907
sg64
(lp923
g57
(g58
g59
NtRp924
(dp925
g62
(dp926
g70
I4
ssg71
g920
sg64
(lp927
g57
(g66
g59
NtRp928
(dp929
g62
(dp930
g70
I3
ssg71
Nsg64
(lp931
sbasbasbasbag57
(g73
g59
NtRp932
(dp933
g62
(dp934
sg71
g859
sg64
(lp935
g57
(g78
g59
NtRp936
(dp937
g62
(dp938
g82
g83
ssg71
g932
sg64
(lp939
S'cmd_options'
p940
asbag57
(g78
g59
NtRp941
(dp942
g62
(dp943
g89
g90
ssg71
g932
sg64
(lp944
S':'
asbag57
(g78
g59
NtRp945
(dp946
g62
(dp947
sg71
g932
sg64
(lp948
g57
(g58
g59
NtRp949
(dp950
g62
(dp951
g70
I4
ssg71
g945
sg64
(lp952
S"<Values at 0x8936a4c: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/Downloads/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p953
asbasbasbag57
(g73
g59
NtRp954
(dp955
g62
(dp956
sg71
g859
sg64
(lp957
g57
(g78
g59
NtRp958
(dp959
g62
(dp960
g82
g83
ssg71
g954
sg64
(lp961
S'db_sessions'
p962
asbag57
(g78
g59
NtRp963
(dp964
g62
(dp965
g89
g90
ssg71
g954
sg64
(lp966
S':'
asbag57
(g78
g59
NtRp967
(dp968
g62
(dp969
sg71
g954
sg64
(lp970
g57
(g58
g59
NtRp971
(dp972
g62
(dp973
g70
I4
ssg71
g967
sg64
(lp974
S'set([])'
p975
asbasbasbag57
(g73
g59
NtRp976
(dp977
g62
(dp978
sg71
g859
sg64
(lp979
g57
(g78
g59
NtRp980
(dp981
g62
(dp982
g82
g83
ssg71
g976
sg64
(lp983
S'debugging'
p984
asbag57
(g78
g59
NtRp985
(dp986
g62
(dp987
g89
g90
ssg71
g976
sg64
(lp988
S':'
asbag57
(g78
g59
NtRp989
(dp990
g62
(dp991
sg71
g976
sg64
(lp992
g57
(g58
g59
NtRp993
(dp994
g62
(dp995
g70
I4
ssg71
g989
sg64
(lp996
g100
asbasbasbag57
(g73
g59
NtRp997
(dp998
g62
(dp999
sg71
g859
sg64
(lp1000
g57
(g78
g59
NtRp1001
(dp1002
g62
(dp1003
g82
g83
ssg71
g997
sg64
(lp1004
S'gluon_parent'
p1005
asbag57
(g78
g59
NtRp1006
(dp1007
g62
(dp1008
g89
g90
ssg71
g997
sg64
(lp1009
S':'
asbag57
(g78
g59
NtRp1010
(dp1011
g62
(dp1012
sg71
g997
sg64
(lp1013
g57
(g58
g59
NtRp1014
(dp1015
g62
(dp1016
g70
I4
ssg71
g1010
sg64
(lp1017
S'/home/anil/Downloads/web2py'
p1018
asbasbasbag57
(g73
g59
NtRp1019
(dp1020
g62
(dp1021
sg71
g859
sg64
(lp1022
g57
(g78
g59
NtRp1023
(dp1024
g62
(dp1025
g82
g83
ssg71
g1019
sg64
(lp1026
S'http_accept'
p1027
asbag57
(g78
g59
NtRp1028
(dp1029
g62
(dp1030
g89
g90
ssg71
g1019
sg64
(lp1031
S':'
asbag57
(g78
g59
NtRp1032
(dp1033
g62
(dp1034
sg71
g1019
sg64
(lp1035
g57
(g58
g59
NtRp1036
(dp1037
g62
(dp1038
g70
I4
ssg71
g1032
sg64
(lp1039
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p1040
asbasbasbag57
(g73
g59
NtRp1041
(dp1042
g62
(dp1043
sg71
g859
sg64
(lp1044
g57
(g78
g59
NtRp1045
(dp1046
g62
(dp1047
g82
g83
ssg71
g1041
sg64
(lp1048
S'http_accept_charset'
p1049
asbag57
(g78
g59
NtRp1050
(dp1051
g62
(dp1052
g89
g90
ssg71
g1041
sg64
(lp1053
S':'
asbag57
(g78
g59
NtRp1054
(dp1055
g62
(dp1056
sg71
g1041
sg64
(lp1057
g57
(g58
g59
NtRp1058
(dp1059
g62
(dp1060
g70
I4
ssg71
g1054
sg64
(lp1061
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p1062
asbasbasbag57
(g73
g59
NtRp1063
(dp1064
g62
(dp1065
sg71
g859
sg64
(lp1066
g57
(g78
g59
NtRp1067
(dp1068
g62
(dp1069
g82
g83
ssg71
g1063
sg64
(lp1070
S'http_accept_encoding'
p1071
asbag57
(g78
g59
NtRp1072
(dp1073
g62
(dp1074
g89
g90
ssg71
g1063
sg64
(lp1075
S':'
asbag57
(g78
g59
NtRp1076
(dp1077
g62
(dp1078
sg71
g1063
sg64
(lp1079
g57
(g58
g59
NtRp1080
(dp1081
g62
(dp1082
g70
I4
ssg71
g1076
sg64
(lp1083
S'gzip,deflate,sdch'
p1084
asbasbasbag57
(g73
g59
NtRp1085
(dp1086
g62
(dp1087
sg71
g859
sg64
(lp1088
g57
(g78
g59
NtRp1089
(dp1090
g62
(dp1091
g82
g83
ssg71
g1085
sg64
(lp1092
S'http_accept_language'
p1093
asbag57
(g78
g59
NtRp1094
(dp1095
g62
(dp1096
g89
g90
ssg71
g1085
sg64
(lp1097
S':'
asbag57
(g78
g59
NtRp1098
(dp1099
g62
(dp1100
sg71
g1085
sg64
(lp1101
g57
(g58
g59
NtRp1102
(dp1103
g62
(dp1104
g70
I4
ssg71
g1098
sg64
(lp1105
S'en-US,en;q=0.8'
p1106
asbasbasbag57
(g73
g59
NtRp1107
(dp1108
g62
(dp1109
sg71
g859
sg64
(lp1110
g57
(g78
g59
NtRp1111
(dp1112
g62
(dp1113
g82
g83
ssg71
g1107
sg64
(lp1114
S'http_connection'
p1115
asbag57
(g78
g59
NtRp1116
(dp1117
g62
(dp1118
g89
g90
ssg71
g1107
sg64
(lp1119
S':'
asbag57
(g78
g59
NtRp1120
(dp1121
g62
(dp1122
sg71
g1107
sg64
(lp1123
g57
(g58
g59
NtRp1124
(dp1125
g62
(dp1126
g70
I4
ssg71
g1120
sg64
(lp1127
S'keep-alive'
p1128
asbasbasbag57
(g73
g59
NtRp1129
(dp1130
g62
(dp1131
sg71
g859
sg64
(lp1132
g57
(g78
g59
NtRp1133
(dp1134
g62
(dp1135
g82
g83
ssg71
g1129
sg64
(lp1136
S'http_cookie'
p1137
asbag57
(g78
g59
NtRp1138
(dp1139
g62
(dp1140
g89
g90
ssg71
g1129
sg64
(lp1141
S':'
asbag57
(g78
g59
NtRp1142
(dp1143
g62
(dp1144
sg71
g1129
sg64
(lp1145
g57
(g58
g59
NtRp1146
(dp1147
g62
(dp1148
g70
I4
ssg71
g1142
sg64
(lp1149
S'session_id_welcome=127.0.0.1-73acd783-e52e-42fb-8ab7-4f6570d093df; session_id_admin=127.0.0.1-139d73ee-0525-46bf-aeb6-deeffe5cb9b3; session_id_dev_bootstrap_ch=127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a'
p1150
asbasbasbag57
(g73
g59
NtRp1151
(dp1152
g62
(dp1153
sg71
g859
sg64
(lp1154
g57
(g78
g59
NtRp1155
(dp1156
g62
(dp1157
g82
g83
ssg71
g1151
sg64
(lp1158
S'http_host'
p1159
asbag57
(g78
g59
NtRp1160
(dp1161
g62
(dp1162
g89
g90
ssg71
g1151
sg64
(lp1163
S':'
asbag57
(g78
g59
NtRp1164
(dp1165
g62
(dp1166
sg71
g1151
sg64
(lp1167
g57
(g58
g59
NtRp1168
(dp1169
g62
(dp1170
g70
I4
ssg71
g1164
sg64
(lp1171
S'127.0.0.1:8000'
p1172
asbasbasbag57
(g73
g59
NtRp1173
(dp1174
g62
(dp1175
sg71
g859
sg64
(lp1176
g57
(g78
g59
NtRp1177
(dp1178
g62
(dp1179
g82
g83
ssg71
g1173
sg64
(lp1180
S'http_referer'
p1181
asbag57
(g78
g59
NtRp1182
(dp1183
g62
(dp1184
g89
g90
ssg71
g1173
sg64
(lp1185
S':'
asbag57
(g78
g59
NtRp1186
(dp1187
g62
(dp1188
sg71
g1173
sg64
(lp1189
g57
(g58
g59
NtRp1190
(dp1191
g62
(dp1192
g70
I4
ssg71
g1186
sg64
(lp1193
S'http://127.0.0.1:8000/DEV_bootstrap_ch/default/project_viewer/5'
p1194
asbasbasbag57
(g73
g59
NtRp1195
(dp1196
g62
(dp1197
sg71
g859
sg64
(lp1198
g57
(g78
g59
NtRp1199
(dp1200
g62
(dp1201
g82
g83
ssg71
g1195
sg64
(lp1202
S'http_user_agent'
p1203
asbag57
(g78
g59
NtRp1204
(dp1205
g62
(dp1206
g89
g90
ssg71
g1195
sg64
(lp1207
S':'
asbag57
(g78
g59
NtRp1208
(dp1209
g62
(dp1210
sg71
g1195
sg64
(lp1211
g57
(g58
g59
NtRp1212
(dp1213
g62
(dp1214
g70
I4
ssg71
g1208
sg64
(lp1215
S'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.10 Safari/537.31'
p1216
asbasbasbag57
(g73
g59
NtRp1217
(dp1218
g62
(dp1219
sg71
g859
sg64
(lp1220
g57
(g78
g59
NtRp1221
(dp1222
g62
(dp1223
g82
g83
ssg71
g1217
sg64
(lp1224
S'is_jython'
p1225
asbag57
(g78
g59
NtRp1226
(dp1227
g62
(dp1228
g89
g90
ssg71
g1217
sg64
(lp1229
S':'
asbag57
(g78
g59
NtRp1230
(dp1231
g62
(dp1232
sg71
g1217
sg64
(lp1233
g57
(g58
g59
NtRp1234
(dp1235
g62
(dp1236
g70
I4
ssg71
g1230
sg64
(lp1237
g100
asbasbasbag57
(g73
g59
NtRp1238
(dp1239
g62
(dp1240
sg71
g859
sg64
(lp1241
g57
(g78
g59
NtRp1242
(dp1243
g62
(dp1244
g82
g83
ssg71
g1238
sg64
(lp1245
S'is_pypy'
p1246
asbag57
(g78
g59
NtRp1247
(dp1248
g62
(dp1249
g89
g90
ssg71
g1238
sg64
(lp1250
S':'
asbag57
(g78
g59
NtRp1251
(dp1252
g62
(dp1253
sg71
g1238
sg64
(lp1254
g57
(g58
g59
NtRp1255
(dp1256
g62
(dp1257
g70
I4
ssg71
g1251
sg64
(lp1258
g100
asbasbasbag57
(g73
g59
NtRp1259
(dp1260
g62
(dp1261
sg71
g859
sg64
(lp1262
g57
(g78
g59
NtRp1263
(dp1264
g62
(dp1265
g82
g83
ssg71
g1259
sg64
(lp1266
S'local_hosts'
p1267
asbag57
(g78
g59
NtRp1268
(dp1269
g62
(dp1270
g89
g90
ssg71
g1259
sg64
(lp1271
S':'
asbag57
(g78
g59
NtRp1272
(dp1273
g62
(dp1274
sg71
g1259
sg64
(lp1275
g57
(g58
g59
NtRp1276
(dp1277
g62
(dp1278
g70
I4
ssg71
g1272
sg64
(lp1279
g57
(g66
g59
NtRp1280
(dp1281
g62
(dp1282
g70
I3
ssg71
Nsg64
(lp1283
g57
(g73
g59
NtRp1284
(dp1285
g62
(dp1286
sg71
g1280
sg64
(lp1287
g57
(g78
g59
NtRp1288
(dp1289
g62
(dp1290
sg71
g1284
sg64
(lp1291
g57
(g58
g59
NtRp1292
(dp1293
g62
(dp1294
g70
I3
ssg71
g1288
sg64
(lp1295
S'::1'
p1296
asbasbasbag57
(g73
g59
NtRp1297
(dp1298
g62
(dp1299
sg71
g1280
sg64
(lp1300
g57
(g78
g59
NtRp1301
(dp1302
g62
(dp1303
sg71
g1297
sg64
(lp1304
g57
(g58
g59
NtRp1305
(dp1306
g62
(dp1307
g70
I3
ssg71
g1301
sg64
(lp1308
S'127.0.1.1'
p1309
asbasbasbag57
(g73
g59
NtRp1310
(dp1311
g62
(dp1312
sg71
g1280
sg64
(lp1313
g57
(g78
g59
NtRp1314
(dp1315
g62
(dp1316
sg71
g1310
sg64
(lp1317
g57
(g58
g59
NtRp1318
(dp1319
g62
(dp1320
g70
I3
ssg71
g1314
sg64
(lp1321
S'::ffff:127.0.0.1'
p1322
asbasbasbag57
(g73
g59
NtRp1323
(dp1324
g62
(dp1325
sg71
g1280
sg64
(lp1326
g57
(g78
g59
NtRp1327
(dp1328
g62
(dp1329
sg71
g1323
sg64
(lp1330
g57
(g58
g59
NtRp1331
(dp1332
g62
(dp1333
g70
I3
ssg71
g1327
sg64
(lp1334
S'127.0.0.1'
p1335
asbasbasbag57
(g73
g59
NtRp1336
(dp1337
g62
(dp1338
sg71
g1280
sg64
(lp1339
g57
(g78
g59
NtRp1340
(dp1341
g62
(dp1342
sg71
g1336
sg64
(lp1343
g57
(g58
g59
NtRp1344
(dp1345
g62
(dp1346
g70
I3
ssg71
g1340
sg64
(lp1347
S'anil-Inspiron-1525'
p1348
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1349
(dp1350
g62
(dp1351
sg71
g859
sg64
(lp1352
g57
(g78
g59
NtRp1353
(dp1354
g62
(dp1355
g82
g83
ssg71
g1349
sg64
(lp1356
S'path_info'
p1357
asbag57
(g78
g59
NtRp1358
(dp1359
g62
(dp1360
g89
g90
ssg71
g1349
sg64
(lp1361
S':'
asbag57
(g78
g59
NtRp1362
(dp1363
g62
(dp1364
sg71
g1349
sg64
(lp1365
g57
(g58
g59
NtRp1366
(dp1367
g62
(dp1368
g70
I4
ssg71
g1362
sg64
(lp1369
S'/DEV_bootstrap_ch/default/roles/5'
p1370
asbasbasbag57
(g73
g59
NtRp1371
(dp1372
g62
(dp1373
sg71
g859
sg64
(lp1374
g57
(g78
g59
NtRp1375
(dp1376
g62
(dp1377
g82
g83
ssg71
g1371
sg64
(lp1378
S'query_string'
p1379
asbag57
(g78
g59
NtRp1380
(dp1381
g62
(dp1382
g89
g90
ssg71
g1371
sg64
(lp1383
S':'
asbag57
(g78
g59
NtRp1384
(dp1385
g62
(dp1386
sg71
g1371
sg64
(lp1387
g57
(g58
g59
NtRp1388
(dp1389
g62
(dp1390
g70
I4
ssg71
g1384
sg64
(lp1391
S''
asbasbasbag57
(g73
g59
NtRp1392
(dp1393
g62
(dp1394
sg71
g859
sg64
(lp1395
g57
(g78
g59
NtRp1396
(dp1397
g62
(dp1398
g82
g83
ssg71
g1392
sg64
(lp1399
S'remote_addr'
p1400
asbag57
(g78
g59
NtRp1401
(dp1402
g62
(dp1403
g89
g90
ssg71
g1392
sg64
(lp1404
S':'
asbag57
(g78
g59
NtRp1405
(dp1406
g62
(dp1407
sg71
g1392
sg64
(lp1408
g57
(g58
g59
NtRp1409
(dp1410
g62
(dp1411
g70
I4
ssg71
g1405
sg64
(lp1412
g224
asbasbasbag57
(g73
g59
NtRp1413
(dp1414
g62
(dp1415
sg71
g859
sg64
(lp1416
g57
(g78
g59
NtRp1417
(dp1418
g62
(dp1419
g82
g83
ssg71
g1413
sg64
(lp1420
S'remote_port'
p1421
asbag57
(g78
g59
NtRp1422
(dp1423
g62
(dp1424
g89
g90
ssg71
g1413
sg64
(lp1425
S':'
asbag57
(g78
g59
NtRp1426
(dp1427
g62
(dp1428
sg71
g1413
sg64
(lp1429
g57
(g58
g59
NtRp1430
(dp1431
g62
(dp1432
g70
I4
ssg71
g1426
sg64
(lp1433
S'43084'
p1434
asbasbasbag57
(g73
g59
NtRp1435
(dp1436
g62
(dp1437
sg71
g859
sg64
(lp1438
g57
(g78
g59
NtRp1439
(dp1440
g62
(dp1441
g82
g83
ssg71
g1435
sg64
(lp1442
S'request_method'
p1443
asbag57
(g78
g59
NtRp1444
(dp1445
g62
(dp1446
g89
g90
ssg71
g1435
sg64
(lp1447
S':'
asbag57
(g78
g59
NtRp1448
(dp1449
g62
(dp1450
sg71
g1435
sg64
(lp1451
g57
(g58
g59
NtRp1452
(dp1453
g62
(dp1454
g70
I4
ssg71
g1448
sg64
(lp1455
S'GET'
p1456
asbasbasbag57
(g73
g59
NtRp1457
(dp1458
g62
(dp1459
sg71
g859
sg64
(lp1460
g57
(g78
g59
NtRp1461
(dp1462
g62
(dp1463
g82
g83
ssg71
g1457
sg64
(lp1464
S'request_uri'
p1465
asbag57
(g78
g59
NtRp1466
(dp1467
g62
(dp1468
g89
g90
ssg71
g1457
sg64
(lp1469
S':'
asbag57
(g78
g59
NtRp1470
(dp1471
g62
(dp1472
sg71
g1457
sg64
(lp1473
g57
(g58
g59
NtRp1474
(dp1475
g62
(dp1476
g70
I4
ssg71
g1470
sg64
(lp1477
g1370
asbasbasbag57
(g73
g59
NtRp1478
(dp1479
g62
(dp1480
sg71
g859
sg64
(lp1481
g57
(g78
g59
NtRp1482
(dp1483
g62
(dp1484
g82
g83
ssg71
g1478
sg64
(lp1485
S'script_name'
p1486
asbag57
(g78
g59
NtRp1487
(dp1488
g62
(dp1489
g89
g90
ssg71
g1478
sg64
(lp1490
S':'
asbag57
(g78
g59
NtRp1491
(dp1492
g62
(dp1493
sg71
g1478
sg64
(lp1494
g57
(g58
g59
NtRp1495
(dp1496
g62
(dp1497
g70
I4
ssg71
g1491
sg64
(lp1498
S''
asbasbasbag57
(g73
g59
NtRp1499
(dp1500
g62
(dp1501
sg71
g859
sg64
(lp1502
g57
(g78
g59
NtRp1503
(dp1504
g62
(dp1505
g82
g83
ssg71
g1499
sg64
(lp1506
S'server_name'
p1507
asbag57
(g78
g59
NtRp1508
(dp1509
g62
(dp1510
g89
g90
ssg71
g1499
sg64
(lp1511
S':'
asbag57
(g78
g59
NtRp1512
(dp1513
g62
(dp1514
sg71
g1499
sg64
(lp1515
g57
(g58
g59
NtRp1516
(dp1517
g62
(dp1518
g70
I4
ssg71
g1512
sg64
(lp1519
S'anil-Inspiron-1525'
p1520
asbasbasbag57
(g73
g59
NtRp1521
(dp1522
g62
(dp1523
sg71
g859
sg64
(lp1524
g57
(g78
g59
NtRp1525
(dp1526
g62
(dp1527
g82
g83
ssg71
g1521
sg64
(lp1528
S'server_port'
p1529
asbag57
(g78
g59
NtRp1530
(dp1531
g62
(dp1532
g89
g90
ssg71
g1521
sg64
(lp1533
S':'
asbag57
(g78
g59
NtRp1534
(dp1535
g62
(dp1536
sg71
g1521
sg64
(lp1537
g57
(g58
g59
NtRp1538
(dp1539
g62
(dp1540
g70
I4
ssg71
g1534
sg64
(lp1541
S'8000'
p1542
asbasbasbag57
(g73
g59
NtRp1543
(dp1544
g62
(dp1545
sg71
g859
sg64
(lp1546
g57
(g78
g59
NtRp1547
(dp1548
g62
(dp1549
g82
g83
ssg71
g1543
sg64
(lp1550
S'server_protocol'
p1551
asbag57
(g78
g59
NtRp1552
(dp1553
g62
(dp1554
g89
g90
ssg71
g1543
sg64
(lp1555
S':'
asbag57
(g78
g59
NtRp1556
(dp1557
g62
(dp1558
sg71
g1543
sg64
(lp1559
g57
(g58
g59
NtRp1560
(dp1561
g62
(dp1562
g70
I4
ssg71
g1556
sg64
(lp1563
S'HTTP/1.1'
p1564
asbasbasbag57
(g73
g59
NtRp1565
(dp1566
g62
(dp1567
sg71
g859
sg64
(lp1568
g57
(g78
g59
NtRp1569
(dp1570
g62
(dp1571
g82
g83
ssg71
g1565
sg64
(lp1572
S'server_software'
p1573
asbag57
(g78
g59
NtRp1574
(dp1575
g62
(dp1576
g89
g90
ssg71
g1565
sg64
(lp1577
S':'
asbag57
(g78
g59
NtRp1578
(dp1579
g62
(dp1580
sg71
g1565
sg64
(lp1581
g57
(g58
g59
NtRp1582
(dp1583
g62
(dp1584
g70
I4
ssg71
g1578
sg64
(lp1585
S'Rocket 1.2.6'
p1586
asbasbasbag57
(g73
g59
NtRp1587
(dp1588
g62
(dp1589
sg71
g859
sg64
(lp1590
g57
(g78
g59
NtRp1591
(dp1592
g62
(dp1593
g82
g83
ssg71
g1587
sg64
(lp1594
S'web2py_path'
p1595
asbag57
(g78
g59
NtRp1596
(dp1597
g62
(dp1598
g89
g90
ssg71
g1587
sg64
(lp1599
S':'
asbag57
(g78
g59
NtRp1600
(dp1601
g62
(dp1602
sg71
g1587
sg64
(lp1603
g57
(g58
g59
NtRp1604
(dp1605
g62
(dp1606
g70
I4
ssg71
g1600
sg64
(lp1607
g906
asbasbasbag57
(g73
g59
NtRp1608
(dp1609
g62
(dp1610
sg71
g859
sg64
(lp1611
g57
(g78
g59
NtRp1612
(dp1613
g62
(dp1614
g82
g83
ssg71
g1608
sg64
(lp1615
S'web2py_version'
p1616
asbag57
(g78
g59
NtRp1617
(dp1618
g62
(dp1619
g89
g90
ssg71
g1608
sg64
(lp1620
S':'
asbag57
(g78
g59
NtRp1621
(dp1622
g62
(dp1623
sg71
g1608
sg64
(lp1624
g57
(g58
g59
NtRp1625
(dp1626
g62
(dp1627
g70
I4
ssg71
g1621
sg64
(lp1628
g57
(g66
g59
NtRp1629
(dp1630
g62
(dp1631
g70
I3
ssg71
Nsg64
(lp1632
g57
(g73
g59
NtRp1633
(dp1634
g62
(dp1635
sg71
g1629
sg64
(lp1636
g57
(g78
g59
NtRp1637
(dp1638
g62
(dp1639
sg71
g1633
sg64
(lp1640
g57
(g58
g59
NtRp1641
(dp1642
g62
(dp1643
g70
I3
ssg71
g1637
sg64
(lp1644
S'2'
asbasbasbag57
(g73
g59
NtRp1645
(dp1646
g62
(dp1647
sg71
g1629
sg64
(lp1648
g57
(g78
g59
NtRp1649
(dp1650
g62
(dp1651
sg71
g1645
sg64
(lp1652
g57
(g58
g59
NtRp1653
(dp1654
g62
(dp1655
g70
I3
ssg71
g1649
sg64
(lp1656
S'3'
asbasbasbag57
(g73
g59
NtRp1657
(dp1658
g62
(dp1659
sg71
g1629
sg64
(lp1660
g57
(g78
g59
NtRp1661
(dp1662
g62
(dp1663
sg71
g1657
sg64
(lp1664
g57
(g58
g59
NtRp1665
(dp1666
g62
(dp1667
g70
I3
ssg71
g1661
sg64
(lp1668
S'2'
asbasbasbag57
(g73
g59
NtRp1669
(dp1670
g62
(dp1671
sg71
g1629
sg64
(lp1672
g57
(g78
g59
NtRp1673
(dp1674
g62
(dp1675
sg71
g1669
sg64
(lp1676
g57
(g58
g59
NtRp1677
(dp1678
g62
(dp1679
g70
I3
ssg71
g1673
sg64
(lp1680
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p1681
asbasbasbag57
(g73
g59
NtRp1682
(dp1683
g62
(dp1684
sg71
g1629
sg64
(lp1685
g57
(g78
g59
NtRp1686
(dp1687
g62
(dp1688
sg71
g1682
sg64
(lp1689
g57
(g58
g59
NtRp1690
(dp1691
g62
(dp1692
g70
I3
ssg71
g1686
sg64
(lp1693
S'stable'
p1694
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1695
(dp1696
g62
(dp1697
sg71
g859
sg64
(lp1698
g57
(g78
g59
NtRp1699
(dp1700
g62
(dp1701
g82
g83
ssg71
g1695
sg64
(lp1702
S'wsgi_errors'
p1703
asbag57
(g78
g59
NtRp1704
(dp1705
g62
(dp1706
g89
g90
ssg71
g1695
sg64
(lp1707
S':'
asbag57
(g78
g59
NtRp1708
(dp1709
g62
(dp1710
sg71
g1695
sg64
(lp1711
g57
(g58
g59
NtRp1712
(dp1713
g62
(dp1714
g70
I4
ssg71
g1708
sg64
(lp1715
S"<open file '<stderr>', mode 'w' at 0xb729e0d0>"
p1716
asbasbasbag57
(g73
g59
NtRp1717
(dp1718
g62
(dp1719
sg71
g859
sg64
(lp1720
g57
(g78
g59
NtRp1721
(dp1722
g62
(dp1723
g82
g83
ssg71
g1717
sg64
(lp1724
S'wsgi_file_wrapper'
p1725
asbag57
(g78
g59
NtRp1726
(dp1727
g62
(dp1728
g89
g90
ssg71
g1717
sg64
(lp1729
S':'
asbag57
(g78
g59
NtRp1730
(dp1731
g62
(dp1732
sg71
g1717
sg64
(lp1733
g57
(g58
g59
NtRp1734
(dp1735
g62
(dp1736
g70
I4
ssg71
g1730
sg64
(lp1737
S'<class wsgiref.util.FileWrapper at 0x88bfb6c>'
p1738
asbasbasbag57
(g73
g59
NtRp1739
(dp1740
g62
(dp1741
sg71
g859
sg64
(lp1742
g57
(g78
g59
NtRp1743
(dp1744
g62
(dp1745
g82
g83
ssg71
g1739
sg64
(lp1746
S'wsgi_input'
p1747
asbag57
(g78
g59
NtRp1748
(dp1749
g62
(dp1750
g89
g90
ssg71
g1739
sg64
(lp1751
S':'
asbag57
(g78
g59
NtRp1752
(dp1753
g62
(dp1754
sg71
g1739
sg64
(lp1755
g57
(g58
g59
NtRp1756
(dp1757
g62
(dp1758
g70
I4
ssg71
g1752
sg64
(lp1759
S'<socket._fileobject object at 0xad14b52c>'
p1760
asbasbasbag57
(g73
g59
NtRp1761
(dp1762
g62
(dp1763
sg71
g859
sg64
(lp1764
g57
(g78
g59
NtRp1765
(dp1766
g62
(dp1767
g82
g83
ssg71
g1761
sg64
(lp1768
S'wsgi_multiprocess'
p1769
asbag57
(g78
g59
NtRp1770
(dp1771
g62
(dp1772
g89
g90
ssg71
g1761
sg64
(lp1773
S':'
asbag57
(g78
g59
NtRp1774
(dp1775
g62
(dp1776
sg71
g1761
sg64
(lp1777
g57
(g58
g59
NtRp1778
(dp1779
g62
(dp1780
g70
I4
ssg71
g1774
sg64
(lp1781
g100
asbasbasbag57
(g73
g59
NtRp1782
(dp1783
g62
(dp1784
sg71
g859
sg64
(lp1785
g57
(g78
g59
NtRp1786
(dp1787
g62
(dp1788
g82
g83
ssg71
g1782
sg64
(lp1789
S'wsgi_multithread'
p1790
asbag57
(g78
g59
NtRp1791
(dp1792
g62
(dp1793
g89
g90
ssg71
g1782
sg64
(lp1794
S':'
asbag57
(g78
g59
NtRp1795
(dp1796
g62
(dp1797
sg71
g1782
sg64
(lp1798
g57
(g58
g59
NtRp1799
(dp1800
g62
(dp1801
g70
I4
ssg71
g1795
sg64
(lp1802
S'True'
p1803
asbasbasbag57
(g73
g59
NtRp1804
(dp1805
g62
(dp1806
sg71
g859
sg64
(lp1807
g57
(g78
g59
NtRp1808
(dp1809
g62
(dp1810
g82
g83
ssg71
g1804
sg64
(lp1811
S'wsgi_run_once'
p1812
asbag57
(g78
g59
NtRp1813
(dp1814
g62
(dp1815
g89
g90
ssg71
g1804
sg64
(lp1816
S':'
asbag57
(g78
g59
NtRp1817
(dp1818
g62
(dp1819
sg71
g1804
sg64
(lp1820
g57
(g58
g59
NtRp1821
(dp1822
g62
(dp1823
g70
I4
ssg71
g1817
sg64
(lp1824
g100
asbasbasbag57
(g73
g59
NtRp1825
(dp1826
g62
(dp1827
sg71
g859
sg64
(lp1828
g57
(g78
g59
NtRp1829
(dp1830
g62
(dp1831
g82
g83
ssg71
g1825
sg64
(lp1832
S'wsgi_url_scheme'
p1833
asbag57
(g78
g59
NtRp1834
(dp1835
g62
(dp1836
g89
g90
ssg71
g1825
sg64
(lp1837
S':'
asbag57
(g78
g59
NtRp1838
(dp1839
g62
(dp1840
sg71
g1825
sg64
(lp1841
g57
(g58
g59
NtRp1842
(dp1843
g62
(dp1844
g70
I4
ssg71
g1838
sg64
(lp1845
S'http'
p1846
asbasbasbag57
(g73
g59
NtRp1847
(dp1848
g62
(dp1849
sg71
g859
sg64
(lp1850
g57
(g78
g59
NtRp1851
(dp1852
g62
(dp1853
g82
g83
ssg71
g1847
sg64
(lp1854
S'wsgi_version'
p1855
asbag57
(g78
g59
NtRp1856
(dp1857
g62
(dp1858
g89
g90
ssg71
g1847
sg64
(lp1859
S':'
asbag57
(g78
g59
NtRp1860
(dp1861
g62
(dp1862
sg71
g1847
sg64
(lp1863
g57
(g58
g59
NtRp1864
(dp1865
g62
(dp1866
g70
I4
ssg71
g1860
sg64
(lp1867
g57
(g66
g59
NtRp1868
(dp1869
g62
(dp1870
g70
I3
ssg71
Nsg64
(lp1871
g57
(g73
g59
NtRp1872
(dp1873
g62
(dp1874
sg71
g1868
sg64
(lp1875
g57
(g78
g59
NtRp1876
(dp1877
g62
(dp1878
sg71
g1872
sg64
(lp1879
g57
(g58
g59
NtRp1880
(dp1881
g62
(dp1882
g70
I3
ssg71
g1876
sg64
(lp1883
S'1'
asbasbasbag57
(g73
g59
NtRp1884
(dp1885
g62
(dp1886
sg71
g1868
sg64
(lp1887
g57
(g78
g59
NtRp1888
(dp1889
g62
(dp1890
sg71
g1884
sg64
(lp1891
g57
(g58
g59
NtRp1892
(dp1893
g62
(dp1894
g70
I3
ssg71
g1888
sg64
(lp1895
S'0'
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp1896
(dp1897
g62
(dp1898
sg71
g67
sg64
(lp1899
g57
(g78
g59
NtRp1900
(dp1901
g62
(dp1902
g82
g83
ssg71
g1896
sg64
(lp1903
S'extension'
p1904
asbag57
(g78
g59
NtRp1905
(dp1906
g62
(dp1907
g89
g90
ssg71
g1896
sg64
(lp1908
S':'
asbag57
(g78
g59
NtRp1909
(dp1910
g62
(dp1911
sg71
g1896
sg64
(lp1912
g57
(g58
g59
NtRp1913
(dp1914
g62
(dp1915
g70
I5
ssg71
g1909
sg64
(lp1916
S'html'
p1917
asbasbasbag57
(g73
g59
NtRp1918
(dp1919
g62
(dp1920
sg71
g67
sg64
(lp1921
g57
(g78
g59
NtRp1922
(dp1923
g62
(dp1924
g82
g83
ssg71
g1918
sg64
(lp1925
S'folder'
p1926
asbag57
(g78
g59
NtRp1927
(dp1928
g62
(dp1929
g89
g90
ssg71
g1918
sg64
(lp1930
S':'
asbag57
(g78
g59
NtRp1931
(dp1932
g62
(dp1933
sg71
g1918
sg64
(lp1934
g57
(g58
g59
NtRp1935
(dp1936
g62
(dp1937
g70
I5
ssg71
g1931
sg64
(lp1938
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/'
p1939
asbasbasbag57
(g73
g59
NtRp1940
(dp1941
g62
(dp1942
sg71
g67
sg64
(lp1943
g57
(g78
g59
NtRp1944
(dp1945
g62
(dp1946
g82
g83
ssg71
g1940
sg64
(lp1947
S'function'
p1948
asbag57
(g78
g59
NtRp1949
(dp1950
g62
(dp1951
g89
g90
ssg71
g1940
sg64
(lp1952
S':'
asbag57
(g78
g59
NtRp1953
(dp1954
g62
(dp1955
sg71
g1940
sg64
(lp1956
g57
(g58
g59
NtRp1957
(dp1958
g62
(dp1959
g70
I5
ssg71
g1953
sg64
(lp1960
S'roles'
p1961
asbasbasbag57
(g73
g59
NtRp1962
(dp1963
g62
(dp1964
sg71
g67
sg64
(lp1965
g57
(g78
g59
NtRp1966
(dp1967
g62
(dp1968
g82
g83
ssg71
g1962
sg64
(lp1969
S'get_vars'
p1970
asbag57
(g78
g59
NtRp1971
(dp1972
g62
(dp1973
g89
g90
ssg71
g1962
sg64
(lp1974
S':'
asbag57
(g78
g59
NtRp1975
(dp1976
g62
(dp1977
sg71
g1962
sg64
(lp1978
g57
(g58
g59
NtRp1979
(dp1980
g62
(dp1981
g70
I5
ssg71
g1975
sg64
(lp1982
g57
(g66
g59
NtRp1983
(dp1984
g62
(dp1985
g70
I4
ssg71
Nsg64
(lp1986
sbasbasbasbag57
(g73
g59
NtRp1987
(dp1988
g62
(dp1989
sg71
g67
sg64
(lp1990
g57
(g78
g59
NtRp1991
(dp1992
g62
(dp1993
g82
g83
ssg71
g1987
sg64
(lp1994
S'global_settings'
p1995
asbag57
(g78
g59
NtRp1996
(dp1997
g62
(dp1998
g89
g90
ssg71
g1987
sg64
(lp1999
S':'
asbag57
(g78
g59
NtRp2000
(dp2001
g62
(dp2002
sg71
g1987
sg64
(lp2003
g57
(g58
g59
NtRp2004
(dp2005
g62
(dp2006
g70
I5
ssg71
g2000
sg64
(lp2007
g57
(g66
g59
NtRp2008
(dp2009
g62
(dp2010
g70
I4
ssg71
Nsg64
(lp2011
g57
(g73
g59
NtRp2012
(dp2013
g62
(dp2014
sg71
g2008
sg64
(lp2015
g57
(g78
g59
NtRp2016
(dp2017
g62
(dp2018
g82
g83
ssg71
g2012
sg64
(lp2019
g871
asbag57
(g78
g59
NtRp2020
(dp2021
g62
(dp2022
g89
g90
ssg71
g2012
sg64
(lp2023
S':'
asbag57
(g78
g59
NtRp2024
(dp2025
g62
(dp2026
sg71
g2012
sg64
(lp2027
g57
(g58
g59
NtRp2028
(dp2029
g62
(dp2030
g70
I4
ssg71
g2024
sg64
(lp2031
S"set(['/home/anil/Downloads/web2py/applications/welcome/', '/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/', '/home/anil/Downloads/web2py/applications/admin/'])"
p2032
asbasbasbag57
(g73
g59
NtRp2033
(dp2034
g62
(dp2035
sg71
g2008
sg64
(lp2036
g57
(g78
g59
NtRp2037
(dp2038
g62
(dp2039
g82
g83
ssg71
g2033
sg64
(lp2040
g893
asbag57
(g78
g59
NtRp2041
(dp2042
g62
(dp2043
g89
g90
ssg71
g2033
sg64
(lp2044
S':'
asbag57
(g78
g59
NtRp2045
(dp2046
g62
(dp2047
sg71
g2033
sg64
(lp2048
g57
(g58
g59
NtRp2049
(dp2050
g62
(dp2051
g70
I4
ssg71
g2045
sg64
(lp2052
g906
asbasbasbag57
(g73
g59
NtRp2053
(dp2054
g62
(dp2055
sg71
g2008
sg64
(lp2056
g57
(g78
g59
NtRp2057
(dp2058
g62
(dp2059
g82
g83
ssg71
g2053
sg64
(lp2060
g915
asbag57
(g78
g59
NtRp2061
(dp2062
g62
(dp2063
g89
g90
ssg71
g2053
sg64
(lp2064
S':'
asbag57
(g78
g59
NtRp2065
(dp2066
g62
(dp2067
sg71
g2053
sg64
(lp2068
g57
(g58
g59
NtRp2069
(dp2070
g62
(dp2071
g70
I4
ssg71
g2065
sg64
(lp2072
g57
(g66
g59
NtRp2073
(dp2074
g62
(dp2075
g70
I3
ssg71
Nsg64
(lp2076
sbasbasbasbag57
(g73
g59
NtRp2077
(dp2078
g62
(dp2079
sg71
g2008
sg64
(lp2080
g57
(g78
g59
NtRp2081
(dp2082
g62
(dp2083
g82
g83
ssg71
g2077
sg64
(lp2084
g940
asbag57
(g78
g59
NtRp2085
(dp2086
g62
(dp2087
g89
g90
ssg71
g2077
sg64
(lp2088
S':'
asbag57
(g78
g59
NtRp2089
(dp2090
g62
(dp2091
sg71
g2077
sg64
(lp2092
g57
(g58
g59
NtRp2093
(dp2094
g62
(dp2095
g70
I4
ssg71
g2089
sg64
(lp2096
S"<Values at 0x8936a4c: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/Downloads/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p2097
asbasbasbag57
(g73
g59
NtRp2098
(dp2099
g62
(dp2100
sg71
g2008
sg64
(lp2101
g57
(g78
g59
NtRp2102
(dp2103
g62
(dp2104
g82
g83
ssg71
g2098
sg64
(lp2105
g962
asbag57
(g78
g59
NtRp2106
(dp2107
g62
(dp2108
g89
g90
ssg71
g2098
sg64
(lp2109
S':'
asbag57
(g78
g59
NtRp2110
(dp2111
g62
(dp2112
sg71
g2098
sg64
(lp2113
g57
(g58
g59
NtRp2114
(dp2115
g62
(dp2116
g70
I4
ssg71
g2110
sg64
(lp2117
S'set([])'
p2118
asbasbasbag57
(g73
g59
NtRp2119
(dp2120
g62
(dp2121
sg71
g2008
sg64
(lp2122
g57
(g78
g59
NtRp2123
(dp2124
g62
(dp2125
g82
g83
ssg71
g2119
sg64
(lp2126
g984
asbag57
(g78
g59
NtRp2127
(dp2128
g62
(dp2129
g89
g90
ssg71
g2119
sg64
(lp2130
S':'
asbag57
(g78
g59
NtRp2131
(dp2132
g62
(dp2133
sg71
g2119
sg64
(lp2134
g57
(g58
g59
NtRp2135
(dp2136
g62
(dp2137
g70
I4
ssg71
g2131
sg64
(lp2138
g100
asbasbasbag57
(g73
g59
NtRp2139
(dp2140
g62
(dp2141
sg71
g2008
sg64
(lp2142
g57
(g78
g59
NtRp2143
(dp2144
g62
(dp2145
g82
g83
ssg71
g2139
sg64
(lp2146
g1005
asbag57
(g78
g59
NtRp2147
(dp2148
g62
(dp2149
g89
g90
ssg71
g2139
sg64
(lp2150
S':'
asbag57
(g78
g59
NtRp2151
(dp2152
g62
(dp2153
sg71
g2139
sg64
(lp2154
g57
(g58
g59
NtRp2155
(dp2156
g62
(dp2157
g70
I4
ssg71
g2151
sg64
(lp2158
g1018
asbasbasbag57
(g73
g59
NtRp2159
(dp2160
g62
(dp2161
sg71
g2008
sg64
(lp2162
g57
(g78
g59
NtRp2163
(dp2164
g62
(dp2165
g82
g83
ssg71
g2159
sg64
(lp2166
g1225
asbag57
(g78
g59
NtRp2167
(dp2168
g62
(dp2169
g89
g90
ssg71
g2159
sg64
(lp2170
S':'
asbag57
(g78
g59
NtRp2171
(dp2172
g62
(dp2173
sg71
g2159
sg64
(lp2174
g57
(g58
g59
NtRp2175
(dp2176
g62
(dp2177
g70
I4
ssg71
g2171
sg64
(lp2178
g100
asbasbasbag57
(g73
g59
NtRp2179
(dp2180
g62
(dp2181
sg71
g2008
sg64
(lp2182
g57
(g78
g59
NtRp2183
(dp2184
g62
(dp2185
g82
g83
ssg71
g2179
sg64
(lp2186
g1246
asbag57
(g78
g59
NtRp2187
(dp2188
g62
(dp2189
g89
g90
ssg71
g2179
sg64
(lp2190
S':'
asbag57
(g78
g59
NtRp2191
(dp2192
g62
(dp2193
sg71
g2179
sg64
(lp2194
g57
(g58
g59
NtRp2195
(dp2196
g62
(dp2197
g70
I4
ssg71
g2191
sg64
(lp2198
g100
asbasbasbag57
(g73
g59
NtRp2199
(dp2200
g62
(dp2201
sg71
g2008
sg64
(lp2202
g57
(g78
g59
NtRp2203
(dp2204
g62
(dp2205
g82
g83
ssg71
g2199
sg64
(lp2206
g1267
asbag57
(g78
g59
NtRp2207
(dp2208
g62
(dp2209
g89
g90
ssg71
g2199
sg64
(lp2210
S':'
asbag57
(g78
g59
NtRp2211
(dp2212
g62
(dp2213
sg71
g2199
sg64
(lp2214
g57
(g58
g59
NtRp2215
(dp2216
g62
(dp2217
g70
I4
ssg71
g2211
sg64
(lp2218
g57
(g66
g59
NtRp2219
(dp2220
g62
(dp2221
g70
I3
ssg71
Nsg64
(lp2222
g57
(g73
g59
NtRp2223
(dp2224
g62
(dp2225
sg71
g2219
sg64
(lp2226
g57
(g78
g59
NtRp2227
(dp2228
g62
(dp2229
sg71
g2223
sg64
(lp2230
g57
(g58
g59
NtRp2231
(dp2232
g62
(dp2233
g70
I3
ssg71
g2227
sg64
(lp2234
g1296
asbasbasbag57
(g73
g59
NtRp2235
(dp2236
g62
(dp2237
sg71
g2219
sg64
(lp2238
g57
(g78
g59
NtRp2239
(dp2240
g62
(dp2241
sg71
g2235
sg64
(lp2242
g57
(g58
g59
NtRp2243
(dp2244
g62
(dp2245
g70
I3
ssg71
g2239
sg64
(lp2246
g1309
asbasbasbag57
(g73
g59
NtRp2247
(dp2248
g62
(dp2249
sg71
g2219
sg64
(lp2250
g57
(g78
g59
NtRp2251
(dp2252
g62
(dp2253
sg71
g2247
sg64
(lp2254
g57
(g58
g59
NtRp2255
(dp2256
g62
(dp2257
g70
I3
ssg71
g2251
sg64
(lp2258
g1322
asbasbasbag57
(g73
g59
NtRp2259
(dp2260
g62
(dp2261
sg71
g2219
sg64
(lp2262
g57
(g78
g59
NtRp2263
(dp2264
g62
(dp2265
sg71
g2259
sg64
(lp2266
g57
(g58
g59
NtRp2267
(dp2268
g62
(dp2269
g70
I3
ssg71
g2263
sg64
(lp2270
g1335
asbasbasbag57
(g73
g59
NtRp2271
(dp2272
g62
(dp2273
sg71
g2219
sg64
(lp2274
g57
(g78
g59
NtRp2275
(dp2276
g62
(dp2277
sg71
g2271
sg64
(lp2278
g57
(g58
g59
NtRp2279
(dp2280
g62
(dp2281
g70
I3
ssg71
g2275
sg64
(lp2282
g1348
asbasbasbasbasbasbasbag57
(g73
g59
NtRp2283
(dp2284
g62
(dp2285
sg71
g2008
sg64
(lp2286
g57
(g78
g59
NtRp2287
(dp2288
g62
(dp2289
g82
g83
ssg71
g2283
sg64
(lp2290
g1616
asbag57
(g78
g59
NtRp2291
(dp2292
g62
(dp2293
g89
g90
ssg71
g2283
sg64
(lp2294
S':'
asbag57
(g78
g59
NtRp2295
(dp2296
g62
(dp2297
sg71
g2283
sg64
(lp2298
g57
(g58
g59
NtRp2299
(dp2300
g62
(dp2301
g70
I4
ssg71
g2295
sg64
(lp2302
g57
(g66
g59
NtRp2303
(dp2304
g62
(dp2305
g70
I3
ssg71
Nsg64
(lp2306
g57
(g73
g59
NtRp2307
(dp2308
g62
(dp2309
sg71
g2303
sg64
(lp2310
g57
(g78
g59
NtRp2311
(dp2312
g62
(dp2313
sg71
g2307
sg64
(lp2314
g57
(g58
g59
NtRp2315
(dp2316
g62
(dp2317
g70
I3
ssg71
g2311
sg64
(lp2318
S'2'
asbasbasbag57
(g73
g59
NtRp2319
(dp2320
g62
(dp2321
sg71
g2303
sg64
(lp2322
g57
(g78
g59
NtRp2323
(dp2324
g62
(dp2325
sg71
g2319
sg64
(lp2326
g57
(g58
g59
NtRp2327
(dp2328
g62
(dp2329
g70
I3
ssg71
g2323
sg64
(lp2330
S'3'
asbasbasbag57
(g73
g59
NtRp2331
(dp2332
g62
(dp2333
sg71
g2303
sg64
(lp2334
g57
(g78
g59
NtRp2335
(dp2336
g62
(dp2337
sg71
g2331
sg64
(lp2338
g57
(g58
g59
NtRp2339
(dp2340
g62
(dp2341
g70
I3
ssg71
g2335
sg64
(lp2342
S'2'
asbasbasbag57
(g73
g59
NtRp2343
(dp2344
g62
(dp2345
sg71
g2303
sg64
(lp2346
g57
(g78
g59
NtRp2347
(dp2348
g62
(dp2349
sg71
g2343
sg64
(lp2350
g57
(g58
g59
NtRp2351
(dp2352
g62
(dp2353
g70
I3
ssg71
g2347
sg64
(lp2354
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p2355
asbasbasbag57
(g73
g59
NtRp2356
(dp2357
g62
(dp2358
sg71
g2303
sg64
(lp2359
g57
(g78
g59
NtRp2360
(dp2361
g62
(dp2362
sg71
g2356
sg64
(lp2363
g57
(g58
g59
NtRp2364
(dp2365
g62
(dp2366
g70
I3
ssg71
g2360
sg64
(lp2367
g1694
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp2368
(dp2369
g62
(dp2370
sg71
g67
sg64
(lp2371
g57
(g78
g59
NtRp2372
(dp2373
g62
(dp2374
g82
g83
ssg71
g2368
sg64
(lp2375
S'is_https'
p2376
asbag57
(g78
g59
NtRp2377
(dp2378
g62
(dp2379
g89
g90
ssg71
g2368
sg64
(lp2380
S':'
asbag57
(g78
g59
NtRp2381
(dp2382
g62
(dp2383
sg71
g2368
sg64
(lp2384
g57
(g58
g59
NtRp2385
(dp2386
g62
(dp2387
g70
I5
ssg71
g2381
sg64
(lp2388
g100
asbasbasbag57
(g73
g59
NtRp2389
(dp2390
g62
(dp2391
sg71
g67
sg64
(lp2392
g57
(g78
g59
NtRp2393
(dp2394
g62
(dp2395
g82
g83
ssg71
g2389
sg64
(lp2396
S'is_local'
p2397
asbag57
(g78
g59
NtRp2398
(dp2399
g62
(dp2400
g89
g90
ssg71
g2389
sg64
(lp2401
S':'
asbag57
(g78
g59
NtRp2402
(dp2403
g62
(dp2404
sg71
g2389
sg64
(lp2405
g57
(g58
g59
NtRp2406
(dp2407
g62
(dp2408
g70
I5
ssg71
g2402
sg64
(lp2409
g1803
asbasbasbag57
(g73
g59
NtRp2410
(dp2411
g62
(dp2412
sg71
g67
sg64
(lp2413
g57
(g78
g59
NtRp2414
(dp2415
g62
(dp2416
g82
g83
ssg71
g2410
sg64
(lp2417
S'is_restful'
p2418
asbag57
(g78
g59
NtRp2419
(dp2420
g62
(dp2421
g89
g90
ssg71
g2410
sg64
(lp2422
S':'
asbag57
(g78
g59
NtRp2423
(dp2424
g62
(dp2425
sg71
g2410
sg64
(lp2426
g57
(g58
g59
NtRp2427
(dp2428
g62
(dp2429
g70
I5
ssg71
g2423
sg64
(lp2430
g100
asbasbasbag57
(g73
g59
NtRp2431
(dp2432
g62
(dp2433
sg71
g67
sg64
(lp2434
g57
(g78
g59
NtRp2435
(dp2436
g62
(dp2437
g82
g83
ssg71
g2431
sg64
(lp2438
S'now'
p2439
asbag57
(g78
g59
NtRp2440
(dp2441
g62
(dp2442
g89
g90
ssg71
g2431
sg64
(lp2443
S':'
asbag57
(g78
g59
NtRp2444
(dp2445
g62
(dp2446
sg71
g2431
sg64
(lp2447
g57
(g58
g59
NtRp2448
(dp2449
g62
(dp2450
g70
I5
ssg71
g2444
sg64
(lp2451
S'datetime.datetime(2013, 3, 4, 15, 55, 52, 23223)'
p2452
asbasbasbag57
(g73
g59
NtRp2453
(dp2454
g62
(dp2455
sg71
g67
sg64
(lp2456
g57
(g78
g59
NtRp2457
(dp2458
g62
(dp2459
g82
g83
ssg71
g2453
sg64
(lp2460
S'post_vars'
p2461
asbag57
(g78
g59
NtRp2462
(dp2463
g62
(dp2464
g89
g90
ssg71
g2453
sg64
(lp2465
S':'
asbag57
(g78
g59
NtRp2466
(dp2467
g62
(dp2468
sg71
g2453
sg64
(lp2469
g57
(g58
g59
NtRp2470
(dp2471
g62
(dp2472
g70
I5
ssg71
g2466
sg64
(lp2473
g57
(g66
g59
NtRp2474
(dp2475
g62
(dp2476
g70
I4
ssg71
Nsg64
(lp2477
sbasbasbasbag57
(g73
g59
NtRp2478
(dp2479
g62
(dp2480
sg71
g67
sg64
(lp2481
g57
(g78
g59
NtRp2482
(dp2483
g62
(dp2484
g82
g83
ssg71
g2478
sg64
(lp2485
S'raw_args'
p2486
asbag57
(g78
g59
NtRp2487
(dp2488
g62
(dp2489
g89
g90
ssg71
g2478
sg64
(lp2490
S':'
asbag57
(g78
g59
NtRp2491
(dp2492
g62
(dp2493
sg71
g2478
sg64
(lp2494
g57
(g58
g59
NtRp2495
(dp2496
g62
(dp2497
g70
I5
ssg71
g2491
sg64
(lp2498
S'5'
asbasbasbag57
(g73
g59
NtRp2499
(dp2500
g62
(dp2501
sg71
g67
sg64
(lp2502
g57
(g78
g59
NtRp2503
(dp2504
g62
(dp2505
g82
g83
ssg71
g2499
sg64
(lp2506
S'raw_extension'
p2507
asbag57
(g78
g59
NtRp2508
(dp2509
g62
(dp2510
g89
g90
ssg71
g2499
sg64
(lp2511
S':'
asbag57
(g78
g59
NtRp2512
(dp2513
g62
(dp2514
sg71
g2499
sg64
(lp2515
g57
(g58
g59
NtRp2516
(dp2517
g62
(dp2518
g70
I5
ssg71
g2512
sg64
(lp2519
S'None'
p2520
asbasbasbag57
(g73
g59
NtRp2521
(dp2522
g62
(dp2523
sg71
g67
sg64
(lp2524
g57
(g78
g59
NtRp2525
(dp2526
g62
(dp2527
g82
g83
ssg71
g2521
sg64
(lp2528
S'url'
p2529
asbag57
(g78
g59
NtRp2530
(dp2531
g62
(dp2532
g89
g90
ssg71
g2521
sg64
(lp2533
S':'
asbag57
(g78
g59
NtRp2534
(dp2535
g62
(dp2536
sg71
g2521
sg64
(lp2537
g57
(g58
g59
NtRp2538
(dp2539
g62
(dp2540
g70
I5
ssg71
g2534
sg64
(lp2541
g1370
asbasbasbag57
(g73
g59
NtRp2542
(dp2543
g62
(dp2544
sg71
g67
sg64
(lp2545
g57
(g78
g59
NtRp2546
(dp2547
g62
(dp2548
g82
g83
ssg71
g2542
sg64
(lp2549
S'utcnow'
p2550
asbag57
(g78
g59
NtRp2551
(dp2552
g62
(dp2553
g89
g90
ssg71
g2542
sg64
(lp2554
S':'
asbag57
(g78
g59
NtRp2555
(dp2556
g62
(dp2557
sg71
g2542
sg64
(lp2558
g57
(g58
g59
NtRp2559
(dp2560
g62
(dp2561
g70
I5
ssg71
g2555
sg64
(lp2562
S'datetime.datetime(2013, 3, 4, 10, 25, 52, 23274)'
p2563
asbasbasbag57
(g73
g59
NtRp2564
(dp2565
g62
(dp2566
sg71
g67
sg64
(lp2567
g57
(g78
g59
NtRp2568
(dp2569
g62
(dp2570
g82
g83
ssg71
g2564
sg64
(lp2571
S'uuid'
p2572
asbag57
(g78
g59
NtRp2573
(dp2574
g62
(dp2575
g89
g90
ssg71
g2564
sg64
(lp2576
S':'
asbag57
(g78
g59
NtRp2577
(dp2578
g62
(dp2579
sg71
g2564
sg64
(lp2580
g57
(g58
g59
NtRp2581
(dp2582
g62
(dp2583
g70
I5
ssg71
g2577
sg64
(lp2584
S'DEV_bootstrap_ch/127.0.0.1.2013-03-04.15-55-52.55ba9dc3-7075-4941-8e41-9f74eacd3585'
p2585
asbasbasbag57
(g73
g59
NtRp2586
(dp2587
g62
(dp2588
sg71
g67
sg64
(lp2589
g57
(g78
g59
NtRp2590
(dp2591
g62
(dp2592
g82
g83
ssg71
g2586
sg64
(lp2593
S'vars'
p2594
asbag57
(g78
g59
NtRp2595
(dp2596
g62
(dp2597
g89
g90
ssg71
g2586
sg64
(lp2598
S':'
asbag57
(g78
g59
NtRp2599
(dp2600
g62
(dp2601
sg71
g2586
sg64
(lp2602
g57
(g58
g59
NtRp2603
(dp2604
g62
(dp2605
g70
I5
ssg71
g2599
sg64
(lp2606
g57
(g66
g59
NtRp2607
(dp2608
g62
(dp2609
g70
I4
ssg71
Nsg64
(lp2610
sbasbasbasbag57
(g73
g59
NtRp2611
(dp2612
g62
(dp2613
sg71
g67
sg64
(lp2614
g57
(g78
g59
NtRp2615
(dp2616
g62
(dp2617
g82
g83
ssg71
g2611
sg64
(lp2618
S'wsgi'
p2619
asbag57
(g78
g59
NtRp2620
(dp2621
g62
(dp2622
g89
g90
ssg71
g2611
sg64
(lp2623
S':'
asbag57
(g78
g59
NtRp2624
(dp2625
g62
(dp2626
sg71
g2611
sg64
(lp2627
g57
(g58
g59
NtRp2628
(dp2629
g62
(dp2630
g70
I5
ssg71
g2624
sg64
(lp2631
g57
(g66
g59
NtRp2632
(dp2633
g62
(dp2634
g70
I4
ssg71
Nsg64
(lp2635
g57
(g73
g59
NtRp2636
(dp2637
g62
(dp2638
sg71
g2632
sg64
(lp2639
g57
(g78
g59
NtRp2640
(dp2641
g62
(dp2642
g82
g83
ssg71
g2636
sg64
(lp2643
S'environ'
p2644
asbag57
(g78
g59
NtRp2645
(dp2646
g62
(dp2647
g89
g90
ssg71
g2636
sg64
(lp2648
S':'
asbag57
(g78
g59
NtRp2649
(dp2650
g62
(dp2651
sg71
g2636
sg64
(lp2652
g57
(g58
g59
NtRp2653
(dp2654
g62
(dp2655
g70
I4
ssg71
g2649
sg64
(lp2656
g57
(g66
g59
NtRp2657
(dp2658
g62
(dp2659
g70
I3
ssg71
Nsg64
(lp2660
g57
(g73
g59
NtRp2661
(dp2662
g62
(dp2663
sg71
g2657
sg64
(lp2664
g57
(g78
g59
NtRp2665
(dp2666
g62
(dp2667
g82
g83
ssg71
g2661
sg64
(lp2668
S'HTTP_ACCEPT'
p2669
asbag57
(g78
g59
NtRp2670
(dp2671
g62
(dp2672
g89
g90
ssg71
g2661
sg64
(lp2673
S':'
asbag57
(g78
g59
NtRp2674
(dp2675
g62
(dp2676
sg71
g2661
sg64
(lp2677
g57
(g58
g59
NtRp2678
(dp2679
g62
(dp2680
g70
I3
ssg71
g2674
sg64
(lp2681
g1040
asbasbasbag57
(g73
g59
NtRp2682
(dp2683
g62
(dp2684
sg71
g2657
sg64
(lp2685
g57
(g78
g59
NtRp2686
(dp2687
g62
(dp2688
g82
g83
ssg71
g2682
sg64
(lp2689
S'HTTP_ACCEPT_CHARSET'
p2690
asbag57
(g78
g59
NtRp2691
(dp2692
g62
(dp2693
g89
g90
ssg71
g2682
sg64
(lp2694
S':'
asbag57
(g78
g59
NtRp2695
(dp2696
g62
(dp2697
sg71
g2682
sg64
(lp2698
g57
(g58
g59
NtRp2699
(dp2700
g62
(dp2701
g70
I3
ssg71
g2695
sg64
(lp2702
g1062
asbasbasbag57
(g73
g59
NtRp2703
(dp2704
g62
(dp2705
sg71
g2657
sg64
(lp2706
g57
(g78
g59
NtRp2707
(dp2708
g62
(dp2709
g82
g83
ssg71
g2703
sg64
(lp2710
S'HTTP_ACCEPT_ENCODING'
p2711
asbag57
(g78
g59
NtRp2712
(dp2713
g62
(dp2714
g89
g90
ssg71
g2703
sg64
(lp2715
S':'
asbag57
(g78
g59
NtRp2716
(dp2717
g62
(dp2718
sg71
g2703
sg64
(lp2719
g57
(g58
g59
NtRp2720
(dp2721
g62
(dp2722
g70
I3
ssg71
g2716
sg64
(lp2723
g1084
asbasbasbag57
(g73
g59
NtRp2724
(dp2725
g62
(dp2726
sg71
g2657
sg64
(lp2727
g57
(g78
g59
NtRp2728
(dp2729
g62
(dp2730
g82
g83
ssg71
g2724
sg64
(lp2731
S'HTTP_ACCEPT_LANGUAGE'
p2732
asbag57
(g78
g59
NtRp2733
(dp2734
g62
(dp2735
g89
g90
ssg71
g2724
sg64
(lp2736
S':'
asbag57
(g78
g59
NtRp2737
(dp2738
g62
(dp2739
sg71
g2724
sg64
(lp2740
g57
(g58
g59
NtRp2741
(dp2742
g62
(dp2743
g70
I3
ssg71
g2737
sg64
(lp2744
g1106
asbasbasbag57
(g73
g59
NtRp2745
(dp2746
g62
(dp2747
sg71
g2657
sg64
(lp2748
g57
(g78
g59
NtRp2749
(dp2750
g62
(dp2751
g82
g83
ssg71
g2745
sg64
(lp2752
S'HTTP_CONNECTION'
p2753
asbag57
(g78
g59
NtRp2754
(dp2755
g62
(dp2756
g89
g90
ssg71
g2745
sg64
(lp2757
S':'
asbag57
(g78
g59
NtRp2758
(dp2759
g62
(dp2760
sg71
g2745
sg64
(lp2761
g57
(g58
g59
NtRp2762
(dp2763
g62
(dp2764
g70
I3
ssg71
g2758
sg64
(lp2765
g1128
asbasbasbag57
(g73
g59
NtRp2766
(dp2767
g62
(dp2768
sg71
g2657
sg64
(lp2769
g57
(g78
g59
NtRp2770
(dp2771
g62
(dp2772
g82
g83
ssg71
g2766
sg64
(lp2773
S'HTTP_COOKIE'
p2774
asbag57
(g78
g59
NtRp2775
(dp2776
g62
(dp2777
g89
g90
ssg71
g2766
sg64
(lp2778
S':'
asbag57
(g78
g59
NtRp2779
(dp2780
g62
(dp2781
sg71
g2766
sg64
(lp2782
g57
(g58
g59
NtRp2783
(dp2784
g62
(dp2785
g70
I3
ssg71
g2779
sg64
(lp2786
g1150
asbasbasbag57
(g73
g59
NtRp2787
(dp2788
g62
(dp2789
sg71
g2657
sg64
(lp2790
g57
(g78
g59
NtRp2791
(dp2792
g62
(dp2793
g82
g83
ssg71
g2787
sg64
(lp2794
S'HTTP_HOST'
p2795
asbag57
(g78
g59
NtRp2796
(dp2797
g62
(dp2798
g89
g90
ssg71
g2787
sg64
(lp2799
S':'
asbag57
(g78
g59
NtRp2800
(dp2801
g62
(dp2802
sg71
g2787
sg64
(lp2803
g57
(g58
g59
NtRp2804
(dp2805
g62
(dp2806
g70
I3
ssg71
g2800
sg64
(lp2807
g1172
asbasbasbag57
(g73
g59
NtRp2808
(dp2809
g62
(dp2810
sg71
g2657
sg64
(lp2811
g57
(g78
g59
NtRp2812
(dp2813
g62
(dp2814
g82
g83
ssg71
g2808
sg64
(lp2815
S'HTTP_REFERER'
p2816
asbag57
(g78
g59
NtRp2817
(dp2818
g62
(dp2819
g89
g90
ssg71
g2808
sg64
(lp2820
S':'
asbag57
(g78
g59
NtRp2821
(dp2822
g62
(dp2823
sg71
g2808
sg64
(lp2824
g57
(g58
g59
NtRp2825
(dp2826
g62
(dp2827
g70
I3
ssg71
g2821
sg64
(lp2828
g1194
asbasbasbag57
(g73
g59
NtRp2829
(dp2830
g62
(dp2831
sg71
g2657
sg64
(lp2832
g57
(g78
g59
NtRp2833
(dp2834
g62
(dp2835
g82
g83
ssg71
g2829
sg64
(lp2836
S'HTTP_USER_AGENT'
p2837
asbag57
(g78
g59
NtRp2838
(dp2839
g62
(dp2840
g89
g90
ssg71
g2829
sg64
(lp2841
S':'
asbag57
(g78
g59
NtRp2842
(dp2843
g62
(dp2844
sg71
g2829
sg64
(lp2845
g57
(g58
g59
NtRp2846
(dp2847
g62
(dp2848
g70
I3
ssg71
g2842
sg64
(lp2849
g1216
asbasbasbag57
(g73
g59
NtRp2850
(dp2851
g62
(dp2852
sg71
g2657
sg64
(lp2853
g57
(g78
g59
NtRp2854
(dp2855
g62
(dp2856
g82
g83
ssg71
g2850
sg64
(lp2857
S'PATH_INFO'
p2858
asbag57
(g78
g59
NtRp2859
(dp2860
g62
(dp2861
g89
g90
ssg71
g2850
sg64
(lp2862
S':'
asbag57
(g78
g59
NtRp2863
(dp2864
g62
(dp2865
sg71
g2850
sg64
(lp2866
g57
(g58
g59
NtRp2867
(dp2868
g62
(dp2869
g70
I3
ssg71
g2863
sg64
(lp2870
g1370
asbasbasbag57
(g73
g59
NtRp2871
(dp2872
g62
(dp2873
sg71
g2657
sg64
(lp2874
g57
(g78
g59
NtRp2875
(dp2876
g62
(dp2877
g82
g83
ssg71
g2871
sg64
(lp2878
S'QUERY_STRING'
p2879
asbag57
(g78
g59
NtRp2880
(dp2881
g62
(dp2882
g89
g90
ssg71
g2871
sg64
(lp2883
S':'
asbag57
(g78
g59
NtRp2884
(dp2885
g62
(dp2886
sg71
g2871
sg64
(lp2887
g57
(g58
g59
NtRp2888
(dp2889
g62
(dp2890
g70
I3
ssg71
g2884
sg64
(lp2891
S''
asbasbasbag57
(g73
g59
NtRp2892
(dp2893
g62
(dp2894
sg71
g2657
sg64
(lp2895
g57
(g78
g59
NtRp2896
(dp2897
g62
(dp2898
g82
g83
ssg71
g2892
sg64
(lp2899
S'REMOTE_ADDR'
p2900
asbag57
(g78
g59
NtRp2901
(dp2902
g62
(dp2903
g89
g90
ssg71
g2892
sg64
(lp2904
S':'
asbag57
(g78
g59
NtRp2905
(dp2906
g62
(dp2907
sg71
g2892
sg64
(lp2908
g57
(g58
g59
NtRp2909
(dp2910
g62
(dp2911
g70
I3
ssg71
g2905
sg64
(lp2912
g224
asbasbasbag57
(g73
g59
NtRp2913
(dp2914
g62
(dp2915
sg71
g2657
sg64
(lp2916
g57
(g78
g59
NtRp2917
(dp2918
g62
(dp2919
g82
g83
ssg71
g2913
sg64
(lp2920
S'REMOTE_PORT'
p2921
asbag57
(g78
g59
NtRp2922
(dp2923
g62
(dp2924
g89
g90
ssg71
g2913
sg64
(lp2925
S':'
asbag57
(g78
g59
NtRp2926
(dp2927
g62
(dp2928
sg71
g2913
sg64
(lp2929
g57
(g58
g59
NtRp2930
(dp2931
g62
(dp2932
g70
I3
ssg71
g2926
sg64
(lp2933
g1434
asbasbasbag57
(g73
g59
NtRp2934
(dp2935
g62
(dp2936
sg71
g2657
sg64
(lp2937
g57
(g78
g59
NtRp2938
(dp2939
g62
(dp2940
g82
g83
ssg71
g2934
sg64
(lp2941
S'REQUEST_METHOD'
p2942
asbag57
(g78
g59
NtRp2943
(dp2944
g62
(dp2945
g89
g90
ssg71
g2934
sg64
(lp2946
S':'
asbag57
(g78
g59
NtRp2947
(dp2948
g62
(dp2949
sg71
g2934
sg64
(lp2950
g57
(g58
g59
NtRp2951
(dp2952
g62
(dp2953
g70
I3
ssg71
g2947
sg64
(lp2954
g1456
asbasbasbag57
(g73
g59
NtRp2955
(dp2956
g62
(dp2957
sg71
g2657
sg64
(lp2958
g57
(g78
g59
NtRp2959
(dp2960
g62
(dp2961
g82
g83
ssg71
g2955
sg64
(lp2962
S'REQUEST_URI'
p2963
asbag57
(g78
g59
NtRp2964
(dp2965
g62
(dp2966
g89
g90
ssg71
g2955
sg64
(lp2967
S':'
asbag57
(g78
g59
NtRp2968
(dp2969
g62
(dp2970
sg71
g2955
sg64
(lp2971
g57
(g58
g59
NtRp2972
(dp2973
g62
(dp2974
g70
I3
ssg71
g2968
sg64
(lp2975
g1370
asbasbasbag57
(g73
g59
NtRp2976
(dp2977
g62
(dp2978
sg71
g2657
sg64
(lp2979
g57
(g78
g59
NtRp2980
(dp2981
g62
(dp2982
g82
g83
ssg71
g2976
sg64
(lp2983
S'SCRIPT_NAME'
p2984
asbag57
(g78
g59
NtRp2985
(dp2986
g62
(dp2987
g89
g90
ssg71
g2976
sg64
(lp2988
S':'
asbag57
(g78
g59
NtRp2989
(dp2990
g62
(dp2991
sg71
g2976
sg64
(lp2992
g57
(g58
g59
NtRp2993
(dp2994
g62
(dp2995
g70
I3
ssg71
g2989
sg64
(lp2996
S''
asbasbasbag57
(g73
g59
NtRp2997
(dp2998
g62
(dp2999
sg71
g2657
sg64
(lp3000
g57
(g78
g59
NtRp3001
(dp3002
g62
(dp3003
g82
g83
ssg71
g2997
sg64
(lp3004
S'SERVER_NAME'
p3005
asbag57
(g78
g59
NtRp3006
(dp3007
g62
(dp3008
g89
g90
ssg71
g2997
sg64
(lp3009
S':'
asbag57
(g78
g59
NtRp3010
(dp3011
g62
(dp3012
sg71
g2997
sg64
(lp3013
g57
(g58
g59
NtRp3014
(dp3015
g62
(dp3016
g70
I3
ssg71
g3010
sg64
(lp3017
g1520
asbasbasbag57
(g73
g59
NtRp3018
(dp3019
g62
(dp3020
sg71
g2657
sg64
(lp3021
g57
(g78
g59
NtRp3022
(dp3023
g62
(dp3024
g82
g83
ssg71
g3018
sg64
(lp3025
S'SERVER_PORT'
p3026
asbag57
(g78
g59
NtRp3027
(dp3028
g62
(dp3029
g89
g90
ssg71
g3018
sg64
(lp3030
S':'
asbag57
(g78
g59
NtRp3031
(dp3032
g62
(dp3033
sg71
g3018
sg64
(lp3034
g57
(g58
g59
NtRp3035
(dp3036
g62
(dp3037
g70
I3
ssg71
g3031
sg64
(lp3038
g1542
asbasbasbag57
(g73
g59
NtRp3039
(dp3040
g62
(dp3041
sg71
g2657
sg64
(lp3042
g57
(g78
g59
NtRp3043
(dp3044
g62
(dp3045
g82
g83
ssg71
g3039
sg64
(lp3046
S'SERVER_PROTOCOL'
p3047
asbag57
(g78
g59
NtRp3048
(dp3049
g62
(dp3050
g89
g90
ssg71
g3039
sg64
(lp3051
S':'
asbag57
(g78
g59
NtRp3052
(dp3053
g62
(dp3054
sg71
g3039
sg64
(lp3055
g57
(g58
g59
NtRp3056
(dp3057
g62
(dp3058
g70
I3
ssg71
g3052
sg64
(lp3059
g1564
asbasbasbag57
(g73
g59
NtRp3060
(dp3061
g62
(dp3062
sg71
g2657
sg64
(lp3063
g57
(g78
g59
NtRp3064
(dp3065
g62
(dp3066
g82
g83
ssg71
g3060
sg64
(lp3067
S'SERVER_SOFTWARE'
p3068
asbag57
(g78
g59
NtRp3069
(dp3070
g62
(dp3071
g89
g90
ssg71
g3060
sg64
(lp3072
S':'
asbag57
(g78
g59
NtRp3073
(dp3074
g62
(dp3075
sg71
g3060
sg64
(lp3076
g57
(g58
g59
NtRp3077
(dp3078
g62
(dp3079
g70
I3
ssg71
g3073
sg64
(lp3080
g1586
asbasbasbag57
(g73
g59
NtRp3081
(dp3082
g62
(dp3083
sg71
g2657
sg64
(lp3084
g57
(g78
g59
NtRp3085
(dp3086
g62
(dp3087
g82
g83
ssg71
g3081
sg64
(lp3088
S'wsgi.errors'
p3089
asbag57
(g78
g59
NtRp3090
(dp3091
g62
(dp3092
g89
g90
ssg71
g3081
sg64
(lp3093
S':'
asbag57
(g78
g59
NtRp3094
(dp3095
g62
(dp3096
sg71
g3081
sg64
(lp3097
g57
(g58
g59
NtRp3098
(dp3099
g62
(dp3100
g70
I3
ssg71
g3094
sg64
(lp3101
S"<open file '<stderr>', mode 'w' at 0xb729e0d0>"
p3102
asbasbasbag57
(g73
g59
NtRp3103
(dp3104
g62
(dp3105
sg71
g2657
sg64
(lp3106
g57
(g78
g59
NtRp3107
(dp3108
g62
(dp3109
g82
g83
ssg71
g3103
sg64
(lp3110
S'wsgi.file_wrapper'
p3111
asbag57
(g78
g59
NtRp3112
(dp3113
g62
(dp3114
g89
g90
ssg71
g3103
sg64
(lp3115
S':'
asbag57
(g78
g59
NtRp3116
(dp3117
g62
(dp3118
sg71
g3103
sg64
(lp3119
g57
(g58
g59
NtRp3120
(dp3121
g62
(dp3122
g70
I3
ssg71
g3116
sg64
(lp3123
S'<class wsgiref.util.FileWrapper at 0x88bfb6c>'
p3124
asbasbasbag57
(g73
g59
NtRp3125
(dp3126
g62
(dp3127
sg71
g2657
sg64
(lp3128
g57
(g78
g59
NtRp3129
(dp3130
g62
(dp3131
g82
g83
ssg71
g3125
sg64
(lp3132
S'wsgi.input'
p3133
asbag57
(g78
g59
NtRp3134
(dp3135
g62
(dp3136
g89
g90
ssg71
g3125
sg64
(lp3137
S':'
asbag57
(g78
g59
NtRp3138
(dp3139
g62
(dp3140
sg71
g3125
sg64
(lp3141
g57
(g58
g59
NtRp3142
(dp3143
g62
(dp3144
g70
I3
ssg71
g3138
sg64
(lp3145
S'<cStringIO.StringO object at 0xad145ba0>'
p3146
asbasbasbag57
(g73
g59
NtRp3147
(dp3148
g62
(dp3149
sg71
g2657
sg64
(lp3150
g57
(g78
g59
NtRp3151
(dp3152
g62
(dp3153
g82
g83
ssg71
g3147
sg64
(lp3154
S'wsgi.multiprocess'
p3155
asbag57
(g78
g59
NtRp3156
(dp3157
g62
(dp3158
g89
g90
ssg71
g3147
sg64
(lp3159
S':'
asbag57
(g78
g59
NtRp3160
(dp3161
g62
(dp3162
sg71
g3147
sg64
(lp3163
g57
(g58
g59
NtRp3164
(dp3165
g62
(dp3166
g70
I3
ssg71
g3160
sg64
(lp3167
g100
asbasbasbag57
(g73
g59
NtRp3168
(dp3169
g62
(dp3170
sg71
g2657
sg64
(lp3171
g57
(g78
g59
NtRp3172
(dp3173
g62
(dp3174
g82
g83
ssg71
g3168
sg64
(lp3175
S'wsgi.multithread'
p3176
asbag57
(g78
g59
NtRp3177
(dp3178
g62
(dp3179
g89
g90
ssg71
g3168
sg64
(lp3180
S':'
asbag57
(g78
g59
NtRp3181
(dp3182
g62
(dp3183
sg71
g3168
sg64
(lp3184
g57
(g58
g59
NtRp3185
(dp3186
g62
(dp3187
g70
I3
ssg71
g3181
sg64
(lp3188
g1803
asbasbasbag57
(g73
g59
NtRp3189
(dp3190
g62
(dp3191
sg71
g2657
sg64
(lp3192
g57
(g78
g59
NtRp3193
(dp3194
g62
(dp3195
g82
g83
ssg71
g3189
sg64
(lp3196
S'wsgi.run_once'
p3197
asbag57
(g78
g59
NtRp3198
(dp3199
g62
(dp3200
g89
g90
ssg71
g3189
sg64
(lp3201
S':'
asbag57
(g78
g59
NtRp3202
(dp3203
g62
(dp3204
sg71
g3189
sg64
(lp3205
g57
(g58
g59
NtRp3206
(dp3207
g62
(dp3208
g70
I3
ssg71
g3202
sg64
(lp3209
g100
asbasbasbag57
(g73
g59
NtRp3210
(dp3211
g62
(dp3212
sg71
g2657
sg64
(lp3213
g57
(g78
g59
NtRp3214
(dp3215
g62
(dp3216
g82
g83
ssg71
g3210
sg64
(lp3217
S'wsgi.url_scheme'
p3218
asbag57
(g78
g59
NtRp3219
(dp3220
g62
(dp3221
g89
g90
ssg71
g3210
sg64
(lp3222
S':'
asbag57
(g78
g59
NtRp3223
(dp3224
g62
(dp3225
sg71
g3210
sg64
(lp3226
g57
(g58
g59
NtRp3227
(dp3228
g62
(dp3229
g70
I3
ssg71
g3223
sg64
(lp3230
g1846
asbasbasbag57
(g73
g59
NtRp3231
(dp3232
g62
(dp3233
sg71
g2657
sg64
(lp3234
g57
(g78
g59
NtRp3235
(dp3236
g62
(dp3237
g82
g83
ssg71
g3231
sg64
(lp3238
S'wsgi.version'
p3239
asbag57
(g78
g59
NtRp3240
(dp3241
g62
(dp3242
g89
g90
ssg71
g3231
sg64
(lp3243
S':'
asbag57
(g78
g59
NtRp3244
(dp3245
g62
(dp3246
sg71
g3231
sg64
(lp3247
g57
(g58
g59
NtRp3248
(dp3249
g62
(dp3250
g70
I3
ssg71
g3244
sg64
(lp3251
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p3252
(lp3253
(dp3254
S'file'
p3255
S'/home/anil/Downloads/web2py/gluon/restricted.py'
p3256
sS'dump'
p3257
(dp3258
S'environment'
p3259
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p3260
sS'ccode'
p3261
S'<code object <module> at 0x8cee800, file "/home/...EV_bootstrap_ch/controllers/default.py", line 16>'
p3262
ssS'lnum'
p3263
I212
sS'lines'
p3264
(dp3265
I207
S'    try:'
p3266
sI208
S'        if isinstance(code, types.CodeType):'
p3267
sI209
S'            ccode = code'
p3268
sI210
S'        else:'
p3269
sI211
S'            ccode = compile2(code, layer)'
p3270
sI212
S'        exec ccode in environment'
p3271
sI213
S'    except HTTP:'
p3272
sI214
S'        raise'
p3273
sI215
S'    except RestrictedError:'
p3274
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p3275
ssS'call'
p3276
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...cals()\\n\\n\\n\\nresponse._vars=response._caller(roles)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}, layer='/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py')"
p3277
sS'func'
p3278
S'restricted'
p3279
sa(dp3280
g3255
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p3281
sg3257
(dp3282
sg3263
I1148
sg3264
(dp3283
I1137
S'   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """'
p3284
sI1138
S'   """ per sample . takes id of the sample as the input """'
p3285
sI1139
S'   sid = request.args(0)'
p3286
sI1140
S'   sample = db(db.sample.id == sid).select().first()'
p3287
sI1141
S'   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)'
p3288
sI1142
S'   form = SQLFORM(db.sample_files)'
p3289
sI1143
S'   form.vars.sample = sid'
p3290
sI1144
S'   return locals()'
p3291
sI1145
S''
sI1146
S''
ssg3276
S'()'
p3292
sg3278
S'<module>'
p3293
sa(dp3294
g3255
S'/home/anil/Downloads/web2py/gluon/globals.py'
p3295
sg3257
(dp3296
S'self'
p3297
S'undefined'
p3298
sS'f'
S'<function roles>'
p3299
ssg3263
I193
sg3264
(dp3300
I192
S'        self._vars = None'
p3301
sI193
S'        self._caller = lambda f: f()'
p3302
sI194
S'        self._view_environment = None'
p3303
sI195
S'        self._custom_commit = None'
p3304
sI196
S'        self._custom_rollback = None'
p3305
sI197
S''
sI188
S'        self.menu = []             # used by the default view layout'
p3306
sI189
S'        self.files = []            # used by web2py_ajax.html'
p3307
sI190
S'        self.generic_patterns = []  # patterns to allow generic views'
p3308
sI191
S"        self.delimiters = ('{{', '}}')"
p3309
ssg3276
S'(f=<function roles>)'
p3310
sg3278
S'<lambda>'
p3311
sa(dp3312
g3255
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p3313
sg3257
(dp3314
S'auth.user.id'
p3315
g3298
sS'global authenticate'
p3316
S'<function authenticate>'
p3317
sS'auth.user'
p3318
S'None'
p3319
sS'pid'
p3320
S"'5'"
p3321
sS'global auth'
p3322
S'<gluon.tools.Auth object>'
p3323
sS'error'
p3324
g3298
ssg3263
I509
sg3264
(dp3325
I512
S'    blocked = db(db.auth_user.id == db.role.user)(db.role.approval_status == 2)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)'
p3326
sI513
S'    return locals()'
p3327
sI504
S"    (T('Project'), False, URL('default','project_viewer',args=request.args),[])"
p3328
sI505
S'    ]'
p3329
sI506
S'    """ complete interface for managing roles for a particular project"""'
p3330
sI507
S'    """ should be accessible to only project co-ordinators """'
p3331
sI508
S'    pid = request.args(0)'
p3332
sI509
S"    error = authenticate(auth.user.id,pid,'roles')"
p3333
sI510
S'    accepted = db(db.auth_user.id == db.role.user)(db.role.approval_status == 1)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)'
p3334
sI511
S'    pending = db(db.auth_user.id == db.role.user)(db.role.approval_status == 0)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)'
p3335
ssg3276
S'()'
p3336
sg3278
S'roles'
p3337
sasS'pyver'
p3338
S'Python 2.7.3: /usr/bin/python'
p3339
sS'session'
p3340
g57
(g58
g59
NtRp3341
(dp3342
g62
(dp3343
sg64
(lp3344
g57
(g66
g59
NtRp3345
(dp3346
g62
(dp3347
g70
I5
ssg71
Nsg64
(lp3348
g57
(g73
g59
NtRp3349
(dp3350
g62
(dp3351
sg71
g3345
sg64
(lp3352
g57
(g78
g59
NtRp3353
(dp3354
g62
(dp3355
g82
g83
ssg71
g3349
sg64
(lp3356
S'flash'
p3357
asbag57
(g78
g59
NtRp3358
(dp3359
g62
(dp3360
g89
g90
ssg71
g3349
sg64
(lp3361
S':'
asbag57
(g78
g59
NtRp3362
(dp3363
g62
(dp3364
sg71
g3349
sg64
(lp3365
g57
(g58
g59
NtRp3366
(dp3367
g62
(dp3368
g70
I5
ssg71
g3362
sg64
(lp3369
S''
asbasbasbasbasbsS'etype'
p3370
S"<type 'exceptions.AttributeError'>"
p3371
sS'date'
p3372
S'Mon Mar  4 15:55:52 2013'
p3373
sS'response'
p3374
g57
(g58
g59
NtRp3375
(dp3376
g62
(dp3377
sg64
(lp3378
g57
(g66
g59
NtRp3379
(dp3380
g62
(dp3381
g70
I5
ssg71
Nsg64
(lp3382
g57
(g73
g59
NtRp3383
(dp3384
g62
(dp3385
sg71
g3379
sg64
(lp3386
g57
(g78
g59
NtRp3387
(dp3388
g62
(dp3389
g82
g83
ssg71
g3383
sg64
(lp3390
g167
asbag57
(g78
g59
NtRp3391
(dp3392
g62
(dp3393
g89
g90
ssg71
g3383
sg64
(lp3394
S':'
asbag57
(g78
g59
NtRp3395
(dp3396
g62
(dp3397
sg71
g3383
sg64
(lp3398
g57
(g58
g59
NtRp3399
(dp3400
g62
(dp3401
g70
I5
ssg71
g3395
sg64
(lp3402
S'<cStringIO.StringO object at 0xadb60800>'
p3403
asbasbasbag57
(g73
g59
NtRp3404
(dp3405
g62
(dp3406
sg71
g3379
sg64
(lp3407
g57
(g78
g59
NtRp3408
(dp3409
g62
(dp3410
g82
g83
ssg71
g3404
sg64
(lp3411
g255
asbag57
(g78
g59
NtRp3412
(dp3413
g62
(dp3414
g89
g90
ssg71
g3404
sg64
(lp3415
S':'
asbag57
(g78
g59
NtRp3416
(dp3417
g62
(dp3418
sg71
g3404
sg64
(lp3419
g57
(g58
g59
NtRp3420
(dp3421
g62
(dp3422
g70
I5
ssg71
g3416
sg64
(lp3423
g57
(g66
g59
NtRp3424
(dp3425
g62
(dp3426
g70
I4
ssg71
Nsg64
(lp3427
g57
(g73
g59
NtRp3428
(dp3429
g62
(dp3430
sg71
g3424
sg64
(lp3431
g57
(g78
g59
NtRp3432
(dp3433
g62
(dp3434
g82
g83
ssg71
g3428
sg64
(lp3435
S'session_id_dev_bootstrap_ch'
p3436
asbag57
(g78
g59
NtRp3437
(dp3438
g62
(dp3439
g89
g90
ssg71
g3428
sg64
(lp3440
S':'
asbag57
(g78
g59
NtRp3441
(dp3442
g62
(dp3443
sg71
g3428
sg64
(lp3444
g57
(g58
g59
NtRp3445
(dp3446
g62
(dp3447
g70
I4
ssg71
g3441
sg64
(lp3448
g487
ag57
(g66
g59
NtRp3449
(dp3450
g62
(dp3451
g70
I3
ssg71
Nsg64
(lp3452
g57
(g73
g59
NtRp3453
(dp3454
g62
(dp3455
sg71
g3449
sg64
(lp3456
g57
(g78
g59
NtRp3457
(dp3458
g62
(dp3459
g82
g83
ssg71
g3453
sg64
(lp3460
g306
asbag57
(g78
g59
NtRp3461
(dp3462
g62
(dp3463
g89
g90
ssg71
g3453
sg64
(lp3464
S':'
asbag57
(g78
g59
NtRp3465
(dp3466
g62
(dp3467
sg71
g3453
sg64
(lp3468
g57
(g58
g59
NtRp3469
(dp3470
g62
(dp3471
g70
I3
ssg71
g3465
sg64
(lp3472
S''
asbasbasbag57
(g73
g59
NtRp3473
(dp3474
g62
(dp3475
sg71
g3449
sg64
(lp3476
g57
(g78
g59
NtRp3477
(dp3478
g62
(dp3479
g82
g83
ssg71
g3473
sg64
(lp3480
g327
asbag57
(g78
g59
NtRp3481
(dp3482
g62
(dp3483
g89
g90
ssg71
g3473
sg64
(lp3484
S':'
asbag57
(g78
g59
NtRp3485
(dp3486
g62
(dp3487
sg71
g3473
sg64
(lp3488
g57
(g58
g59
NtRp3489
(dp3490
g62
(dp3491
g70
I3
ssg71
g3485
sg64
(lp3492
S''
asbasbasbag57
(g73
g59
NtRp3493
(dp3494
g62
(dp3495
sg71
g3449
sg64
(lp3496
g57
(g78
g59
NtRp3497
(dp3498
g62
(dp3499
g82
g83
ssg71
g3493
sg64
(lp3500
g348
asbag57
(g78
g59
NtRp3501
(dp3502
g62
(dp3503
g89
g90
ssg71
g3493
sg64
(lp3504
S':'
asbag57
(g78
g59
NtRp3505
(dp3506
g62
(dp3507
sg71
g3493
sg64
(lp3508
g57
(g58
g59
NtRp3509
(dp3510
g62
(dp3511
g70
I3
ssg71
g3505
sg64
(lp3512
S''
asbasbasbag57
(g73
g59
NtRp3513
(dp3514
g62
(dp3515
sg71
g3449
sg64
(lp3516
g57
(g78
g59
NtRp3517
(dp3518
g62
(dp3519
g82
g83
ssg71
g3513
sg64
(lp3520
g369
asbag57
(g78
g59
NtRp3521
(dp3522
g62
(dp3523
g89
g90
ssg71
g3513
sg64
(lp3524
S':'
asbag57
(g78
g59
NtRp3525
(dp3526
g62
(dp3527
sg71
g3513
sg64
(lp3528
g57
(g58
g59
NtRp3529
(dp3530
g62
(dp3531
g70
I3
ssg71
g3525
sg64
(lp3532
S''
asbasbasbag57
(g73
g59
NtRp3533
(dp3534
g62
(dp3535
sg71
g3449
sg64
(lp3536
g57
(g78
g59
NtRp3537
(dp3538
g62
(dp3539
g82
g83
ssg71
g3533
sg64
(lp3540
g390
asbag57
(g78
g59
NtRp3541
(dp3542
g62
(dp3543
g89
g90
ssg71
g3533
sg64
(lp3544
S':'
asbag57
(g78
g59
NtRp3545
(dp3546
g62
(dp3547
sg71
g3533
sg64
(lp3548
g57
(g58
g59
NtRp3549
(dp3550
g62
(dp3551
g70
I3
ssg71
g3545
sg64
(lp3552
S''
asbasbasbag57
(g73
g59
NtRp3553
(dp3554
g62
(dp3555
sg71
g3449
sg64
(lp3556
g57
(g78
g59
NtRp3557
(dp3558
g62
(dp3559
g82
g83
ssg71
g3553
sg64
(lp3560
g411
asbag57
(g78
g59
NtRp3561
(dp3562
g62
(dp3563
g89
g90
ssg71
g3553
sg64
(lp3564
S':'
asbag57
(g78
g59
NtRp3565
(dp3566
g62
(dp3567
sg71
g3553
sg64
(lp3568
g57
(g58
g59
NtRp3569
(dp3570
g62
(dp3571
g70
I3
ssg71
g3565
sg64
(lp3572
S'/'
asbasbasbag57
(g73
g59
NtRp3573
(dp3574
g62
(dp3575
sg71
g3449
sg64
(lp3576
g57
(g78
g59
NtRp3577
(dp3578
g62
(dp3579
g82
g83
ssg71
g3573
sg64
(lp3580
g432
asbag57
(g78
g59
NtRp3581
(dp3582
g62
(dp3583
g89
g90
ssg71
g3573
sg64
(lp3584
S':'
asbag57
(g78
g59
NtRp3585
(dp3586
g62
(dp3587
sg71
g3573
sg64
(lp3588
g57
(g58
g59
NtRp3589
(dp3590
g62
(dp3591
g70
I3
ssg71
g3585
sg64
(lp3592
S''
asbasbasbag57
(g73
g59
NtRp3593
(dp3594
g62
(dp3595
sg71
g3449
sg64
(lp3596
g57
(g78
g59
NtRp3597
(dp3598
g62
(dp3599
g82
g83
ssg71
g3593
sg64
(lp3600
g453
asbag57
(g78
g59
NtRp3601
(dp3602
g62
(dp3603
g89
g90
ssg71
g3593
sg64
(lp3604
S':'
asbag57
(g78
g59
NtRp3605
(dp3606
g62
(dp3607
sg71
g3593
sg64
(lp3608
g57
(g58
g59
NtRp3609
(dp3610
g62
(dp3611
g70
I3
ssg71
g3605
sg64
(lp3612
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3613
(dp3614
g62
(dp3615
sg71
g3379
sg64
(lp3616
g57
(g78
g59
NtRp3617
(dp3618
g62
(dp3619
g82
g83
ssg71
g3613
sg64
(lp3620
S'delimiters'
p3621
asbag57
(g78
g59
NtRp3622
(dp3623
g62
(dp3624
g89
g90
ssg71
g3613
sg64
(lp3625
S':'
asbag57
(g78
g59
NtRp3626
(dp3627
g62
(dp3628
sg71
g3613
sg64
(lp3629
g57
(g58
g59
NtRp3630
(dp3631
g62
(dp3632
g70
I5
ssg71
g3626
sg64
(lp3633
g57
(g66
g59
NtRp3634
(dp3635
g62
(dp3636
g70
I4
ssg71
Nsg64
(lp3637
g57
(g73
g59
NtRp3638
(dp3639
g62
(dp3640
sg71
g3634
sg64
(lp3641
g57
(g78
g59
NtRp3642
(dp3643
g62
(dp3644
sg71
g3638
sg64
(lp3645
g57
(g58
g59
NtRp3646
(dp3647
g62
(dp3648
g70
I4
ssg71
g3642
sg64
(lp3649
S'{{'
p3650
asbasbasbag57
(g73
g59
NtRp3651
(dp3652
g62
(dp3653
sg71
g3634
sg64
(lp3654
g57
(g78
g59
NtRp3655
(dp3656
g62
(dp3657
sg71
g3651
sg64
(lp3658
g57
(g58
g59
NtRp3659
(dp3660
g62
(dp3661
g70
I4
ssg71
g3655
sg64
(lp3662
S'}}'
p3663
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3664
(dp3665
g62
(dp3666
sg71
g3379
sg64
(lp3667
g57
(g78
g59
NtRp3668
(dp3669
g62
(dp3670
g82
g83
ssg71
g3664
sg64
(lp3671
S'files'
p3672
asbag57
(g78
g59
NtRp3673
(dp3674
g62
(dp3675
g89
g90
ssg71
g3664
sg64
(lp3676
S':'
asbag57
(g78
g59
NtRp3677
(dp3678
g62
(dp3679
sg71
g3664
sg64
(lp3680
g57
(g58
g59
NtRp3681
(dp3682
g62
(dp3683
g70
I5
ssg71
g3677
sg64
(lp3684
g57
(g66
g59
NtRp3685
(dp3686
g62
(dp3687
g70
I4
ssg71
Nsg64
(lp3688
g57
(g73
g59
NtRp3689
(dp3690
g62
(dp3691
sg71
g3685
sg64
(lp3692
g57
(g78
g59
NtRp3693
(dp3694
g62
(dp3695
sg71
g3689
sg64
(lp3696
g57
(g58
g59
NtRp3697
(dp3698
g62
(dp3699
g70
I4
ssg71
g3693
sg64
(lp3700
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/css/redmond/jquery-ui-1.8.5.custom.css'
p3701
asbasbasbag57
(g73
g59
NtRp3702
(dp3703
g62
(dp3704
sg71
g3685
sg64
(lp3705
g57
(g78
g59
NtRp3706
(dp3707
g62
(dp3708
sg71
g3702
sg64
(lp3709
g57
(g58
g59
NtRp3710
(dp3711
g62
(dp3712
g70
I4
ssg71
g3706
sg64
(lp3713
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/js/jquery-ui-1.8.5.custom.min.js'
p3714
asbasbasbag57
(g73
g59
NtRp3715
(dp3716
g62
(dp3717
sg71
g3685
sg64
(lp3718
g57
(g78
g59
NtRp3719
(dp3720
g62
(dp3721
sg71
g3715
sg64
(lp3722
g57
(g58
g59
NtRp3723
(dp3724
g62
(dp3725
g70
I4
ssg71
g3719
sg64
(lp3726
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/ui.jqgrid.css'
p3727
asbasbasbag57
(g73
g59
NtRp3728
(dp3729
g62
(dp3730
sg71
g3685
sg64
(lp3731
g57
(g78
g59
NtRp3732
(dp3733
g62
(dp3734
sg71
g3728
sg64
(lp3735
g57
(g58
g59
NtRp3736
(dp3737
g62
(dp3738
g70
I4
ssg71
g3732
sg64
(lp3739
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/i18n/grid.locale-en.js'
p3740
asbasbasbag57
(g73
g59
NtRp3741
(dp3742
g62
(dp3743
sg71
g3685
sg64
(lp3744
g57
(g78
g59
NtRp3745
(dp3746
g62
(dp3747
sg71
g3741
sg64
(lp3748
g57
(g58
g59
NtRp3749
(dp3750
g62
(dp3751
g70
I4
ssg71
g3745
sg64
(lp3752
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/jquery.jqGrid.min.js'
p3753
asbasbasbag57
(g73
g59
NtRp3754
(dp3755
g62
(dp3756
sg71
g3685
sg64
(lp3757
g57
(g78
g59
NtRp3758
(dp3759
g62
(dp3760
sg71
g3754
sg64
(lp3761
g57
(g58
g59
NtRp3762
(dp3763
g62
(dp3764
g70
I4
ssg71
g3758
sg64
(lp3765
S'/DEV_bootstrap_ch/static/plugin_wiki/slideshow/jquery.cycle.min.js'
p3766
asbasbasbag57
(g73
g59
NtRp3767
(dp3768
g62
(dp3769
sg71
g3685
sg64
(lp3770
g57
(g78
g59
NtRp3771
(dp3772
g62
(dp3773
sg71
g3767
sg64
(lp3774
g57
(g58
g59
NtRp3775
(dp3776
g62
(dp3777
g70
I4
ssg71
g3771
sg64
(lp3778
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.css'
p3779
asbasbasbag57
(g73
g59
NtRp3780
(dp3781
g62
(dp3782
sg71
g3685
sg64
(lp3783
g57
(g78
g59
NtRp3784
(dp3785
g62
(dp3786
sg71
g3780
sg64
(lp3787
g57
(g58
g59
NtRp3788
(dp3789
g62
(dp3790
g70
I4
ssg71
g3784
sg64
(lp3791
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.js'
p3792
asbasbasbag57
(g73
g59
NtRp3793
(dp3794
g62
(dp3795
sg71
g3685
sg64
(lp3796
g57
(g78
g59
NtRp3797
(dp3798
g62
(dp3799
sg71
g3793
sg64
(lp3800
g57
(g58
g59
NtRp3801
(dp3802
g62
(dp3803
g70
I4
ssg71
g3797
sg64
(lp3804
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.css'
p3805
asbasbasbag57
(g73
g59
NtRp3806
(dp3807
g62
(dp3808
sg71
g3685
sg64
(lp3809
g57
(g78
g59
NtRp3810
(dp3811
g62
(dp3812
sg71
g3806
sg64
(lp3813
g57
(g58
g59
NtRp3814
(dp3815
g62
(dp3816
g70
I4
ssg71
g3810
sg64
(lp3817
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.js'
p3818
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3819
(dp3820
g62
(dp3821
sg71
g3379
sg64
(lp3822
g57
(g78
g59
NtRp3823
(dp3824
g62
(dp3825
g82
g83
ssg71
g3819
sg64
(lp3826
S'flash'
p3827
asbag57
(g78
g59
NtRp3828
(dp3829
g62
(dp3830
g89
g90
ssg71
g3819
sg64
(lp3831
S':'
asbag57
(g78
g59
NtRp3832
(dp3833
g62
(dp3834
sg71
g3819
sg64
(lp3835
g57
(g58
g59
NtRp3836
(dp3837
g62
(dp3838
g70
I5
ssg71
g3832
sg64
(lp3839
S''
asbasbasbag57
(g73
g59
NtRp3840
(dp3841
g62
(dp3842
sg71
g3379
sg64
(lp3843
g57
(g78
g59
NtRp3844
(dp3845
g62
(dp3846
g82
g83
ssg71
g3840
sg64
(lp3847
S'generic_patterns'
p3848
asbag57
(g78
g59
NtRp3849
(dp3850
g62
(dp3851
g89
g90
ssg71
g3840
sg64
(lp3852
S':'
asbag57
(g78
g59
NtRp3853
(dp3854
g62
(dp3855
sg71
g3840
sg64
(lp3856
g57
(g58
g59
NtRp3857
(dp3858
g62
(dp3859
g70
I5
ssg71
g3853
sg64
(lp3860
g57
(g66
g59
NtRp3861
(dp3862
g62
(dp3863
g70
I4
ssg71
Nsg64
(lp3864
g57
(g73
g59
NtRp3865
(dp3866
g62
(dp3867
sg71
g3861
sg64
(lp3868
g57
(g78
g59
NtRp3869
(dp3870
g62
(dp3871
sg71
g3865
sg64
(lp3872
g57
(g58
g59
NtRp3873
(dp3874
g62
(dp3875
g70
I4
ssg71
g3869
sg64
(lp3876
S'*'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3877
(dp3878
g62
(dp3879
sg71
g3379
sg64
(lp3880
g57
(g78
g59
NtRp3881
(dp3882
g62
(dp3883
g82
g83
ssg71
g3877
sg64
(lp3884
S'google_analytics_id'
p3885
asbag57
(g78
g59
NtRp3886
(dp3887
g62
(dp3888
g89
g90
ssg71
g3877
sg64
(lp3889
S':'
asbag57
(g78
g59
NtRp3890
(dp3891
g62
(dp3892
sg71
g3877
sg64
(lp3893
g57
(g58
g59
NtRp3894
(dp3895
g62
(dp3896
g70
I5
ssg71
g3890
sg64
(lp3897
S'None'
p3898
asbasbasbag57
(g73
g59
NtRp3899
(dp3900
g62
(dp3901
sg71
g3379
sg64
(lp3902
g57
(g78
g59
NtRp3903
(dp3904
g62
(dp3905
g82
g83
ssg71
g3899
sg64
(lp3906
S'headers'
p3907
asbag57
(g78
g59
NtRp3908
(dp3909
g62
(dp3910
g89
g90
ssg71
g3899
sg64
(lp3911
S':'
asbag57
(g78
g59
NtRp3912
(dp3913
g62
(dp3914
sg71
g3899
sg64
(lp3915
g57
(g58
g59
NtRp3916
(dp3917
g62
(dp3918
g70
I5
ssg71
g3912
sg64
(lp3919
g57
(g66
g59
NtRp3920
(dp3921
g62
(dp3922
g70
I4
ssg71
Nsg64
(lp3923
g57
(g73
g59
NtRp3924
(dp3925
g62
(dp3926
sg71
g3920
sg64
(lp3927
g57
(g78
g59
NtRp3928
(dp3929
g62
(dp3930
g82
g83
ssg71
g3924
sg64
(lp3931
S'X-Powered-By'
p3932
asbag57
(g78
g59
NtRp3933
(dp3934
g62
(dp3935
g89
g90
ssg71
g3924
sg64
(lp3936
S':'
asbag57
(g78
g59
NtRp3937
(dp3938
g62
(dp3939
sg71
g3924
sg64
(lp3940
g57
(g58
g59
NtRp3941
(dp3942
g62
(dp3943
g70
I4
ssg71
g3937
sg64
(lp3944
S'web2py'
p3945
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3946
(dp3947
g62
(dp3948
sg71
g3379
sg64
(lp3949
g57
(g78
g59
NtRp3950
(dp3951
g62
(dp3952
g82
g83
ssg71
g3946
sg64
(lp3953
S'menu'
p3954
asbag57
(g78
g59
NtRp3955
(dp3956
g62
(dp3957
g89
g90
ssg71
g3946
sg64
(lp3958
S':'
asbag57
(g78
g59
NtRp3959
(dp3960
g62
(dp3961
sg71
g3946
sg64
(lp3962
g57
(g58
g59
NtRp3963
(dp3964
g62
(dp3965
g70
I5
ssg71
g3959
sg64
(lp3966
g57
(g66
g59
NtRp3967
(dp3968
g62
(dp3969
g70
I4
ssg71
Nsg64
(lp3970
g57
(g73
g59
NtRp3971
(dp3972
g62
(dp3973
sg71
g3967
sg64
(lp3974
g57
(g78
g59
NtRp3975
(dp3976
g62
(dp3977
sg71
g3971
sg64
(lp3978
g57
(g58
g59
NtRp3979
(dp3980
g62
(dp3981
g70
I4
ssg71
g3975
sg64
(lp3982
g57
(g66
g59
NtRp3983
(dp3984
g62
(dp3985
g70
I3
ssg71
Nsg64
(lp3986
g57
(g73
g59
NtRp3987
(dp3988
g62
(dp3989
sg71
g3983
sg64
(lp3990
g57
(g78
g59
NtRp3991
(dp3992
g62
(dp3993
sg71
g3987
sg64
(lp3994
g57
(g58
g59
NtRp3995
(dp3996
g62
(dp3997
g70
I3
ssg71
g3991
sg64
(lp3998
cgluon.languages
lazyT_unpickle
p3999
(S't\x04\x00\x00\x00Home'
tRp4000
asbasbasbag57
(g73
g59
NtRp4001
(dp4002
g62
(dp4003
sg71
g3983
sg64
(lp4004
g57
(g78
g59
NtRp4005
(dp4006
g62
(dp4007
sg71
g4001
sg64
(lp4008
g57
(g58
g59
NtRp4009
(dp4010
g62
(dp4011
g70
I3
ssg71
g4005
sg64
(lp4012
g100
asbasbasbag57
(g73
g59
NtRp4013
(dp4014
g62
(dp4015
sg71
g3983
sg64
(lp4016
g57
(g78
g59
NtRp4017
(dp4018
g62
(dp4019
sg71
g4013
sg64
(lp4020
g57
(g58
g59
NtRp4021
(dp4022
g62
(dp4023
g70
I3
ssg71
g4017
sg64
(lp4024
S'/DEV_bootstrap_ch/default/list_all_projects'
p4025
asbasbasbag57
(g73
g59
NtRp4026
(dp4027
g62
(dp4028
sg71
g3983
sg64
(lp4029
g57
(g78
g59
NtRp4030
(dp4031
g62
(dp4032
sg71
g4026
sg64
(lp4033
g57
(g58
g59
NtRp4034
(dp4035
g62
(dp4036
g70
I3
ssg71
g4030
sg64
(lp4037
g57
(g66
g59
NtRp4038
(dp4039
g62
(dp4040
g70
I2
ssg71
Nsg64
(lp4041
sbasbasbasbasbasbasbasbag57
(g73
g59
NtRp4042
(dp4043
g62
(dp4044
sg71
g3967
sg64
(lp4045
g57
(g78
g59
NtRp4046
(dp4047
g62
(dp4048
sg71
g4042
sg64
(lp4049
g57
(g58
g59
NtRp4050
(dp4051
g62
(dp4052
g70
I4
ssg71
g4046
sg64
(lp4053
g57
(g66
g59
NtRp4054
(dp4055
g62
(dp4056
g70
I3
ssg71
Nsg64
(lp4057
g57
(g73
g59
NtRp4058
(dp4059
g62
(dp4060
sg71
g4054
sg64
(lp4061
g57
(g78
g59
NtRp4062
(dp4063
g62
(dp4064
sg71
g4058
sg64
(lp4065
g57
(g58
g59
NtRp4066
(dp4067
g62
(dp4068
g70
I3
ssg71
g4062
sg64
(lp4069
g3999
(S't\x07\x00\x00\x00Project'
tRp4070
asbasbasbag57
(g73
g59
NtRp4071
(dp4072
g62
(dp4073
sg71
g4054
sg64
(lp4074
g57
(g78
g59
NtRp4075
(dp4076
g62
(dp4077
sg71
g4071
sg64
(lp4078
g57
(g58
g59
NtRp4079
(dp4080
g62
(dp4081
g70
I3
ssg71
g4075
sg64
(lp4082
g100
asbasbasbag57
(g73
g59
NtRp4083
(dp4084
g62
(dp4085
sg71
g4054
sg64
(lp4086
g57
(g78
g59
NtRp4087
(dp4088
g62
(dp4089
sg71
g4083
sg64
(lp4090
g57
(g58
g59
NtRp4091
(dp4092
g62
(dp4093
g70
I3
ssg71
g4087
sg64
(lp4094
S'/DEV_bootstrap_ch/default/project_viewer/5'
p4095
asbasbasbag57
(g73
g59
NtRp4096
(dp4097
g62
(dp4098
sg71
g4054
sg64
(lp4099
g57
(g78
g59
NtRp4100
(dp4101
g62
(dp4102
sg71
g4096
sg64
(lp4103
g57
(g58
g59
NtRp4104
(dp4105
g62
(dp4106
g70
I3
ssg71
g4100
sg64
(lp4107
g57
(g66
g59
NtRp4108
(dp4109
g62
(dp4110
g70
I2
ssg71
Nsg64
(lp4111
sbasbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp4112
(dp4113
g62
(dp4114
sg71
g3379
sg64
(lp4115
g57
(g78
g59
NtRp4116
(dp4117
g62
(dp4118
g82
g83
ssg71
g4112
sg64
(lp4119
S'meta'
p4120
asbag57
(g78
g59
NtRp4121
(dp4122
g62
(dp4123
g89
g90
ssg71
g4112
sg64
(lp4124
S':'
asbag57
(g78
g59
NtRp4125
(dp4126
g62
(dp4127
sg71
g4112
sg64
(lp4128
g57
(g58
g59
NtRp4129
(dp4130
g62
(dp4131
g70
I5
ssg71
g4125
sg64
(lp4132
g57
(g66
g59
NtRp4133
(dp4134
g62
(dp4135
g70
I4
ssg71
Nsg64
(lp4136
g57
(g73
g59
NtRp4137
(dp4138
g62
(dp4139
sg71
g4133
sg64
(lp4140
g57
(g78
g59
NtRp4141
(dp4142
g62
(dp4143
g82
g83
ssg71
g4137
sg64
(lp4144
S'author'
p4145
asbag57
(g78
g59
NtRp4146
(dp4147
g62
(dp4148
g89
g90
ssg71
g4137
sg64
(lp4149
S':'
asbag57
(g78
g59
NtRp4150
(dp4151
g62
(dp4152
sg71
g4137
sg64
(lp4153
g57
(g58
g59
NtRp4154
(dp4155
g62
(dp4156
g70
I4
ssg71
g4150
sg64
(lp4157
S'Vikram Pudi <vikram@iiit.ac.in>'
p4158
asbasbasbag57
(g73
g59
NtRp4159
(dp4160
g62
(dp4161
sg71
g4133
sg64
(lp4162
g57
(g78
g59
NtRp4163
(dp4164
g62
(dp4165
g82
g83
ssg71
g4159
sg64
(lp4166
S'copyright'
p4167
asbag57
(g78
g59
NtRp4168
(dp4169
g62
(dp4170
g89
g90
ssg71
g4159
sg64
(lp4171
S':'
asbag57
(g78
g59
NtRp4172
(dp4173
g62
(dp4174
sg71
g4159
sg64
(lp4175
g57
(g58
g59
NtRp4176
(dp4177
g62
(dp4178
g70
I4
ssg71
g4172
sg64
(lp4179
S'Copyright 2011'
p4180
asbasbasbag57
(g73
g59
NtRp4181
(dp4182
g62
(dp4183
sg71
g4133
sg64
(lp4184
g57
(g78
g59
NtRp4185
(dp4186
g62
(dp4187
g82
g83
ssg71
g4181
sg64
(lp4188
S'description'
p4189
asbag57
(g78
g59
NtRp4190
(dp4191
g62
(dp4192
g89
g90
ssg71
g4181
sg64
(lp4193
S':'
asbag57
(g78
g59
NtRp4194
(dp4195
g62
(dp4196
sg71
g4181
sg64
(lp4197
g57
(g58
g59
NtRp4198
(dp4199
g62
(dp4200
g70
I4
ssg71
g4194
sg64
(lp4201
S'Computational Core for Plant Metabolomics -- A project sanctioned by DBT, Govt. of India'
p4202
asbasbasbag57
(g73
g59
NtRp4203
(dp4204
g62
(dp4205
sg71
g4133
sg64
(lp4206
g57
(g78
g59
NtRp4207
(dp4208
g62
(dp4209
g82
g83
ssg71
g4203
sg64
(lp4210
S'generator'
p4211
asbag57
(g78
g59
NtRp4212
(dp4213
g62
(dp4214
g89
g90
ssg71
g4203
sg64
(lp4215
S':'
asbag57
(g78
g59
NtRp4216
(dp4217
g62
(dp4218
sg71
g4203
sg64
(lp4219
g57
(g58
g59
NtRp4220
(dp4221
g62
(dp4222
g70
I4
ssg71
g4216
sg64
(lp4223
S'Web2py Web Framework'
p4224
asbasbasbag57
(g73
g59
NtRp4225
(dp4226
g62
(dp4227
sg71
g4133
sg64
(lp4228
g57
(g78
g59
NtRp4229
(dp4230
g62
(dp4231
g82
g83
ssg71
g4225
sg64
(lp4232
S'keywords'
p4233
asbag57
(g78
g59
NtRp4234
(dp4235
g62
(dp4236
g89
g90
ssg71
g4225
sg64
(lp4237
S':'
asbag57
(g78
g59
NtRp4238
(dp4239
g62
(dp4240
sg71
g4225
sg64
(lp4241
g57
(g58
g59
NtRp4242
(dp4243
g62
(dp4244
g70
I4
ssg71
g4238
sg64
(lp4245
S'web2py, python, metabolome, metabolomics'
p4246
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4247
(dp4248
g62
(dp4249
sg71
g3379
sg64
(lp4250
g57
(g78
g59
NtRp4251
(dp4252
g62
(dp4253
g82
g83
ssg71
g4247
sg64
(lp4254
S'models_to_run'
p4255
asbag57
(g78
g59
NtRp4256
(dp4257
g62
(dp4258
g89
g90
ssg71
g4247
sg64
(lp4259
S':'
asbag57
(g78
g59
NtRp4260
(dp4261
g62
(dp4262
sg71
g4247
sg64
(lp4263
g57
(g58
g59
NtRp4264
(dp4265
g62
(dp4266
g70
I5
ssg71
g4260
sg64
(lp4267
g57
(g66
g59
NtRp4268
(dp4269
g62
(dp4270
g70
I4
ssg71
Nsg64
(lp4271
g57
(g73
g59
NtRp4272
(dp4273
g62
(dp4274
sg71
g4268
sg64
(lp4275
g57
(g78
g59
NtRp4276
(dp4277
g62
(dp4278
sg71
g4272
sg64
(lp4279
g57
(g58
g59
NtRp4280
(dp4281
g62
(dp4282
g70
I4
ssg71
g4276
sg64
(lp4283
S'^\\w+\\.py$'
p4284
asbasbasbag57
(g73
g59
NtRp4285
(dp4286
g62
(dp4287
sg71
g4268
sg64
(lp4288
g57
(g78
g59
NtRp4289
(dp4290
g62
(dp4291
sg71
g4285
sg64
(lp4292
g57
(g58
g59
NtRp4293
(dp4294
g62
(dp4295
g70
I4
ssg71
g4289
sg64
(lp4296
S'^default/\\w+\\.py$'
p4297
asbasbasbag57
(g73
g59
NtRp4298
(dp4299
g62
(dp4300
sg71
g4268
sg64
(lp4301
g57
(g78
g59
NtRp4302
(dp4303
g62
(dp4304
sg71
g4298
sg64
(lp4305
g57
(g58
g59
NtRp4306
(dp4307
g62
(dp4308
g70
I4
ssg71
g4302
sg64
(lp4309
S'^default/roles/\\w+\\.py$'
p4310
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4311
(dp4312
g62
(dp4313
sg71
g3379
sg64
(lp4314
g57
(g78
g59
NtRp4315
(dp4316
g62
(dp4317
g82
g83
ssg71
g4311
sg64
(lp4318
S'postprocessing'
p4319
asbag57
(g78
g59
NtRp4320
(dp4321
g62
(dp4322
g89
g90
ssg71
g4311
sg64
(lp4323
S':'
asbag57
(g78
g59
NtRp4324
(dp4325
g62
(dp4326
sg71
g4311
sg64
(lp4327
g57
(g58
g59
NtRp4328
(dp4329
g62
(dp4330
g70
I5
ssg71
g4324
sg64
(lp4331
g57
(g66
g59
NtRp4332
(dp4333
g62
(dp4334
g70
I4
ssg71
Nsg64
(lp4335
sbasbasbasbag57
(g73
g59
NtRp4336
(dp4337
g62
(dp4338
sg71
g3379
sg64
(lp4339
g57
(g78
g59
NtRp4340
(dp4341
g62
(dp4342
g82
g83
ssg71
g4336
sg64
(lp4343
S'session_cookie_expires'
p4344
asbag57
(g78
g59
NtRp4345
(dp4346
g62
(dp4347
g89
g90
ssg71
g4336
sg64
(lp4348
S':'
asbag57
(g78
g59
NtRp4349
(dp4350
g62
(dp4351
sg71
g4336
sg64
(lp4352
g57
(g58
g59
NtRp4353
(dp4354
g62
(dp4355
g70
I5
ssg71
g4349
sg64
(lp4356
S'None'
p4357
asbasbasbag57
(g73
g59
NtRp4358
(dp4359
g62
(dp4360
sg71
g3379
sg64
(lp4361
g57
(g78
g59
NtRp4362
(dp4363
g62
(dp4364
g82
g83
ssg71
g4358
sg64
(lp4365
S'session_data_name'
p4366
asbag57
(g78
g59
NtRp4367
(dp4368
g62
(dp4369
g89
g90
ssg71
g4358
sg64
(lp4370
S':'
asbag57
(g78
g59
NtRp4371
(dp4372
g62
(dp4373
sg71
g4358
sg64
(lp4374
g57
(g58
g59
NtRp4375
(dp4376
g62
(dp4377
g70
I5
ssg71
g4371
sg64
(lp4378
S'session_data_dev_bootstrap_ch'
p4379
asbasbasbag57
(g73
g59
NtRp4380
(dp4381
g62
(dp4382
sg71
g3379
sg64
(lp4383
g57
(g78
g59
NtRp4384
(dp4385
g62
(dp4386
g82
g83
ssg71
g4380
sg64
(lp4387
S'session_file'
p4388
asbag57
(g78
g59
NtRp4389
(dp4390
g62
(dp4391
g89
g90
ssg71
g4380
sg64
(lp4392
S':'
asbag57
(g78
g59
NtRp4393
(dp4394
g62
(dp4395
sg71
g4380
sg64
(lp4396
g57
(g58
g59
NtRp4397
(dp4398
g62
(dp4399
g70
I5
ssg71
g4393
sg64
(lp4400
S"<open file '/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a', mode 'rb+' at 0x8f69e90>"
p4401
asbasbasbag57
(g73
g59
NtRp4402
(dp4403
g62
(dp4404
sg71
g3379
sg64
(lp4405
g57
(g78
g59
NtRp4406
(dp4407
g62
(dp4408
g82
g83
ssg71
g4402
sg64
(lp4409
S'session_filename'
p4410
asbag57
(g78
g59
NtRp4411
(dp4412
g62
(dp4413
g89
g90
ssg71
g4402
sg64
(lp4414
S':'
asbag57
(g78
g59
NtRp4415
(dp4416
g62
(dp4417
sg71
g4402
sg64
(lp4418
g57
(g58
g59
NtRp4419
(dp4420
g62
(dp4421
g70
I5
ssg71
g4415
sg64
(lp4422
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-01de8466-7178-49c5-a040-65d31f60870a'
p4423
asbasbasbag57
(g73
g59
NtRp4424
(dp4425
g62
(dp4426
sg71
g3379
sg64
(lp4427
g57
(g78
g59
NtRp4428
(dp4429
g62
(dp4430
g82
g83
ssg71
g4424
sg64
(lp4431
S'session_id'
p4432
asbag57
(g78
g59
NtRp4433
(dp4434
g62
(dp4435
g89
g90
ssg71
g4424
sg64
(lp4436
S':'
asbag57
(g78
g59
NtRp4437
(dp4438
g62
(dp4439
sg71
g4424
sg64
(lp4440
g57
(g58
g59
NtRp4441
(dp4442
g62
(dp4443
g70
I5
ssg71
g4437
sg64
(lp4444
g487
asbasbasbag57
(g73
g59
NtRp4445
(dp4446
g62
(dp4447
sg71
g3379
sg64
(lp4448
g57
(g78
g59
NtRp4449
(dp4450
g62
(dp4451
g82
g83
ssg71
g4445
sg64
(lp4452
S'session_id_name'
p4453
asbag57
(g78
g59
NtRp4454
(dp4455
g62
(dp4456
g89
g90
ssg71
g4445
sg64
(lp4457
S':'
asbag57
(g78
g59
NtRp4458
(dp4459
g62
(dp4460
sg71
g4445
sg64
(lp4461
g57
(g58
g59
NtRp4462
(dp4463
g62
(dp4464
g70
I5
ssg71
g4458
sg64
(lp4465
g3436
asbasbasbag57
(g73
g59
NtRp4466
(dp4467
g62
(dp4468
sg71
g3379
sg64
(lp4469
g57
(g78
g59
NtRp4470
(dp4471
g62
(dp4472
g82
g83
ssg71
g4466
sg64
(lp4473
S'session_locked'
p4474
asbag57
(g78
g59
NtRp4475
(dp4476
g62
(dp4477
g89
g90
ssg71
g4466
sg64
(lp4478
S':'
asbag57
(g78
g59
NtRp4479
(dp4480
g62
(dp4481
sg71
g4466
sg64
(lp4482
g57
(g58
g59
NtRp4483
(dp4484
g62
(dp4485
g70
I5
ssg71
g4479
sg64
(lp4486
g1803
asbasbasbag57
(g73
g59
NtRp4487
(dp4488
g62
(dp4489
sg71
g3379
sg64
(lp4490
g57
(g78
g59
NtRp4491
(dp4492
g62
(dp4493
g82
g83
ssg71
g4487
sg64
(lp4494
S'session_new'
p4495
asbag57
(g78
g59
NtRp4496
(dp4497
g62
(dp4498
g89
g90
ssg71
g4487
sg64
(lp4499
S':'
asbag57
(g78
g59
NtRp4500
(dp4501
g62
(dp4502
sg71
g4487
sg64
(lp4503
g57
(g58
g59
NtRp4504
(dp4505
g62
(dp4506
g70
I5
ssg71
g4500
sg64
(lp4507
g100
asbasbasbag57
(g73
g59
NtRp4508
(dp4509
g62
(dp4510
sg71
g3379
sg64
(lp4511
g57
(g78
g59
NtRp4512
(dp4513
g62
(dp4514
g82
g83
ssg71
g4508
sg64
(lp4515
S'session_storage_type'
p4516
asbag57
(g78
g59
NtRp4517
(dp4518
g62
(dp4519
g89
g90
ssg71
g4508
sg64
(lp4520
S':'
asbag57
(g78
g59
NtRp4521
(dp4522
g62
(dp4523
sg71
g4508
sg64
(lp4524
g57
(g58
g59
NtRp4525
(dp4526
g62
(dp4527
g70
I5
ssg71
g4521
sg64
(lp4528
g3255
asbasbasbag57
(g73
g59
NtRp4529
(dp4530
g62
(dp4531
sg71
g3379
sg64
(lp4532
g57
(g78
g59
NtRp4533
(dp4534
g62
(dp4535
g82
g83
ssg71
g4529
sg64
(lp4536
S'status'
p4537
asbag57
(g78
g59
NtRp4538
(dp4539
g62
(dp4540
g89
g90
ssg71
g4529
sg64
(lp4541
S':'
asbag57
(g78
g59
NtRp4542
(dp4543
g62
(dp4544
sg71
g4529
sg64
(lp4545
g57
(g58
g59
NtRp4546
(dp4547
g62
(dp4548
g70
I5
ssg71
g4542
sg64
(lp4549
S'200'
p4550
asbasbasbag57
(g73
g59
NtRp4551
(dp4552
g62
(dp4553
sg71
g3379
sg64
(lp4554
g57
(g78
g59
NtRp4555
(dp4556
g62
(dp4557
g82
g83
ssg71
g4551
sg64
(lp4558
S'subtitle'
p4559
asbag57
(g78
g59
NtRp4560
(dp4561
g62
(dp4562
g89
g90
ssg71
g4551
sg64
(lp4563
S':'
asbag57
(g78
g59
NtRp4564
(dp4565
g62
(dp4566
sg71
g4551
sg64
(lp4567
g57
(g58
g59
NtRp4568
(dp4569
g62
(dp4570
g70
I5
ssg71
g4564
sg64
(lp4571
g3999
(S's)\x00\x00\x00Computational Core for Plant Metabolomics'
tRp4572
asbasbasbag57
(g73
g59
NtRp4573
(dp4574
g62
(dp4575
sg71
g3379
sg64
(lp4576
g57
(g78
g59
NtRp4577
(dp4578
g62
(dp4579
g82
g83
ssg71
g4573
sg64
(lp4580
S'title'
p4581
asbag57
(g78
g59
NtRp4582
(dp4583
g62
(dp4584
g89
g90
ssg71
g4573
sg64
(lp4585
S':'
asbag57
(g78
g59
NtRp4586
(dp4587
g62
(dp4588
sg71
g4573
sg64
(lp4589
g57
(g58
g59
NtRp4590
(dp4591
g62
(dp4592
g70
I5
ssg71
g4586
sg64
(lp4593
g122
asbasbasbag57
(g73
g59
NtRp4594
(dp4595
g62
(dp4596
sg71
g3379
sg64
(lp4597
g57
(g78
g59
NtRp4598
(dp4599
g62
(dp4600
g82
g83
ssg71
g4594
sg64
(lp4601
S'view'
p4602
asbag57
(g78
g59
NtRp4603
(dp4604
g62
(dp4605
g89
g90
ssg71
g4594
sg64
(lp4606
S':'
asbag57
(g78
g59
NtRp4607
(dp4608
g62
(dp4609
sg71
g4594
sg64
(lp4610
g57
(g58
g59
NtRp4611
(dp4612
g62
(dp4613
g70
I5
ssg71
g4607
sg64
(lp4614
S'default/roles.html'
p4615
asbasbasbasbasbsS'locals'
p4616
(dp4617
S'pid'
p4618
S"'5'"
p4619
sssS'traceback'
p4620
S'Traceback (most recent call last):\n  File "/home/anil/Downloads/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 1148, in <module>\n  File "/home/anil/Downloads/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 509, in roles\n    error = authenticate(auth.user.id,pid,\'roles\')\nAttributeError: \'NoneType\' object has no attribute \'id\'\n'
p4621
s.