(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> invalid syntax (default.py, line 339)"
p3
sS'layer'
p4
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n########################## Tips\n#http://stackoverflow.com/questions/12354353/duplicate-a-record-and-its-references-in-web2py\n\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL(\'default\',\'list_all_projects\'))\n    #redirect(URL(\'plugin_wiki\',\'page/home\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef authenticate(uid,pid,func):   \n   result = db(db.role.user == uid)(db.role.approval_status==1)(db.role.project == pid).select(db.role.ALL)\n   myroles = [role_list[int(k.role)] for k in result]\n   is_coordinator = db(db.project.project_coordinator == uid).select(db.project.ALL)\n   if func == \'roles\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'You must be a project co-ordinator to manage roles\'\n\treturn error  \n   if func == \'add_project\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'\'\n        return error\n   if func == \'add_sample\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'SignUp for  "Experimentalist Role" in this project to add a sample. Use Browser back button to navigate to Project View.\'\n        return error\n   if func == \'experimentalist\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You must be an experimentalist to add the biosource information of a sample\'\n        return error\n   if func == \'my_samples\':\n\tif  \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You are not authorized to view this page\'\n        return error\n\ndef basic_groups(pid):\n    """ creates the basic groups on general basis or id basis """\n    if not pid:\n        for i in role_list:\n\t   auth.add_group(i,i) \n    else:\n        pid_groups = [str(pid)+\'#\'+i for i in role_list]\n\tfor k in pid_groups:\n\t   auth.add_group(k,k)\n    return locals()\t   \n\n\n@auth.requires_login()\ndef add_project():\n    error = authenticate(auth.user.id,\'\',\'add_project\')\n    form = SQLFORM(db.project,fields=[\'name\',\'code\',\'start_date\',\'project_description\',\'project_literature_reference\',\'project_journal_name\'],showid=False)\n    form.vars.project_coordinator = auth.user.id\n    if form.process().accepted:\n       response.flash =\'accepted\'\n       result = db(db.project.name == form.vars.name).select(db.project.ALL).first()\n       basic_groups(result.id)\n       db.role.insert(user=auth.user.id,project=result.id,role=6,approval_status=1,member_since=now)\n       redirect(URL(\'project_viewer\',args = form.vars.id))\n    elif form.errors:\n       response.flash = \'errors\'\n    return locals()\n\n@auth.requires_login()\ndef remove_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """takes an id and removes the project """ \n    pid  = request.args(0)\n    pid_groups = [str(pid)+\'#\'+i for i in role_list]\n    for z in pid_groups:\n\tpgid = auth.id_group(z)\n\tauth.del_group(pgid)\n    del db.project[pid]\n    return locals()\n\ndef add_experiment():\n    grid = SQLFORM.grid(db.experiment)\n    return locals()\n\ndef new_affiliation():\n    form = SQLFORM(db.affiliation)\n    return locals()\n\ndef edit_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    crud.settings.update_next = URL(\'project_viewer\',args=request.args)\n    form=crud.update(db.project,request.args(0),deletable=False)\n    return locals();\n \n@auth.requires_login()\ndef project_viewer():\n    pid = request.args[-1]\n    project=db(db.project.id==pid).select(db.project.ALL).first()\n    cord = db(db.auth_user.id==project.project_coordinator).select(db.auth_user.ALL).first()\n    \n    if authenticate(auth.user.id,\'\',\'roles\') == \'\':\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'Grant Role\'),False,URL(\'roles\',args=project.id)),\n      (T(\'Edit Project\'),False,URL(\'edit_project\',args=project.id)),\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n    else :\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n      \n    if project.project_status == \'1\':\n      response.menu+= [\n      (T(\'Published Samples\'), False,URL(\'list_all_pub_samples\',args=(pid)),[])\n      ]\n    elif authenticate(auth.user.id,pid,\'add_sample\')==\'\':\n        response.menu+= [\n        (T(\'Samples\'), False,URL(\'my_samples\',args=(pid)),[\n        (T(\'My Samples\'), False,URL(\'my_samples\',args=(pid))),\n        ])\n        ]\n    if len(request.args) == 2:\n        response.flash = \'Project Succesfully \' + request.args[-2]\n       \n    users=db(db.role.approval_status==1)(db.role.project==pid)(db.role.project == db.project.id)(db.role.user==db.auth_user.id).select(db.role.ALL,db.auth_user.ALL)\n    is_coordinator = \'\'\n    myroles = \'\'\n    if auth.user:\n      is_coordinator = db(db.project.id == pid)(db.project.project_coordinator == auth.user.id).select(db.project.ALL).first()\n      result = db(db.role.user == auth.user.id)(db.role.project == pid).select(db.role.ALL)\n      myroles = [role_list[int(k.role)] for k in result]\n      \n    return locals()\n\n\ndef add_sample():\n  """ creates a exp on an project basis and should continue to fill the bio source data """\n  """ available to the experimentalist """ \n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  if \'new\' in request.args:\n   pid = request.args[-3]\n  else:\n   pid = request.args(0)\n  error = authenticate(auth.user.id,pid,\'add_sample\') \n  form = SQLFORM(db.sample,fields=[\'name\',\'code\',\'description\',\'scientific_name\'],showid=False)\n#added a field project in sample table\n#added two more fields in form insert root/replica etc and scientific name\n  if form.validate():\n      i = db.sample.insert(experimentalist=auth.user.id,name=form.vars.name,code=form.vars.code ,description=form.vars.description,experiment=pid,scientific_name=form.vars.scientific_name,working_status=1,publication_status=0)\n      response.flash = \'sample has been created\'\n      redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',pid])) \n      # redirect to the sample creation \n  elif form.errors:\n      response.flash = \'Form has errors\'\n  return locals()\n\ndef sample_viewer():\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   i = request.args[-1]\n   if \'view\' in request.args: \n\tform = SQLFORM(db.sample, i,readonly =True,showid=False)\n   if \'edit\' in request.args: \n\tform = SQLFORM(db.sample, i,showid=False)\n   if form.process().accepted:\n\tresponse.flash = \'form accepted\'\n\tredirect(URL(\'list_all_dev_projects\',args = request.args[0:-3])) \n   elif form.errors:\n\tresponse.flash = \'form has errors\'\n   return dict(form=form)\n\n@auth.requires_login()\ndef list_all_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'index\'), [])\n    #(T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    #(T(\'Project\'), False, URL(\'default\',\'list_all_projects\'), [(T(\'Add Project\'),False,URL(\'default\',\'add_project\'))])\n    ]\n    form=FORM(\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    form.elements(\'input[type=submit]\')[0]["_value"] = "Search"\n    if form.accepts(request,session):\n      redirect(URL(\'grid?keywords=tomato\')) \n    \n    #form=FORM(\'\',INPUT(_name=\'name\') ,INPUT(_type=\'submit\'))\n    #if form.process().accepted:\n      #redirect(URL(\'grid\')) \n    pub_projects = db(db.project.project_status == 1)(db.project.project_coordinator==db.auth_user.id).select(db.project.ALL,db.auth_user.ALL)\n    dev_projects = db(db.project.project_status == 0)(db.project.project_coordinator==db.auth_user.id).select(db.project.ALL,db.auth_user.ALL)\n    authenticated = \'no\'\n    if auth.user:\n     authenticated = authenticate(auth.user.id,\'\',\'add_project\')\n    return locals()\n\ndef grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.sample.id==db.biosource.sample_name))\n   #query=((db.project.project_status==0))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n   grid = SQLFORM.grid(query)\n   return locals() \n\ndef temp():\n   q1 = (db.project.project_status ==  0)\n   q2 = (db.sample.publication_status == True)\n   ck = {}\n   fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n   l1=[lambda row: A(\'View Post\',_href=URL("default","view",args=[row.id]))]\n   links={\'project\':l1}\n   grid = SQLFORM.smartgrid(db.project,ck,fields=fi,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n   return locals() \n\ndef list_all_pub_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    q1 = (db.project.project_status ==  1)\n    q2 = (db.sample.publication_status == True)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n    \trouter()\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=False,deletable=False,create = False,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n    \n    return locals()\n\n@auth.requires_login()\ndef list_all_dev_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    db.sample.experimentalist.default=auth.user.id\n    db.experiment.experimentalist.default=auth.user.id\n    db.sample.experiment.writable = False\n    db.sample.parent.readable = False\n    db.sample.experiment.readable = False\n    db.experiment.experimentalist.writable = False\n    q1 = (db.project.project_status ==  0)\n    q2 = (db.sample.experimentalist == auth.user.id)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.sample.publication_status,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.spectrophotometry.sample_name,db.raw_data_storage_information.sample_name]\n    edit_dict = {\'project\':False}\n    delete_dict = {\'project\':False}\n#Allow only one original sample to be added in an experiment others are replicates\n    addsample = True\n   # if \'sample\' in request.args and \'new\' in request.args:\n   #      count = db(db.sample.experiment==request.args[-3]).count()\n   #      if(count>0):\n   #        db.sample.replica.default = \'replicate\'\n   #       # db.sample.replica.requires=IS_IN_SET([\'replicate\',\'alicot\'])\n   #      else:\n   #        db.sample.replica.default = \'Original\'\n   #        db.sample.replica.writable = False\n           \n    create_dict = {\'project\':False,\'sample\':addsample}\n    orderby_dict ={\'sample\':db.sample.name} \n#Links for replicating samples  \n    args= request.args[0:5]\n    #args1=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],"biosource.sample_name","edit","biosource"]\n    l2=[\'a\',\\\n        \'b\',\\\n        \'c\']\n    l1=[ dict(header=\'name\',body=lambda row: A(\'replicate\',_href=URL("default","duplicate",args=request.args[:]+["replicate"]+[row.id]))),\\\n          lambda row: A(\'aliqout\',_href=URL("default","duplicate",args=request.args[:]+["aliqout"]+[row.id])),\\\n          dict(header=\'Biosource\',body=lambda row: A(\'\'+tes(row.id,\'biosource\'),_href=URL("default","router",args=getargs(row.id,args,"biosource")))),\\\n          dict(header=\'PGC\',body=lambda row: A(\'\'+tes(row.id,\'plant_growth_condition\'),_href=URL("default","router",args=getargs(row.id,args,"plant_growth_condition")))),\\\n          dict(header=\'Treatment\',body=lambda row: A(\'\'+tes(row.id,\'treatments\'),_href=URL("default","router",args=getargs(row.id,args,"treatments")))),\\\n          dict(header=\'Harvest\',body=lambda row: A(\'\'+tes(row.id,\'harvests\'),_href=URL("default","router",args=getargs(row.id,args,"harvests"))),\\\n          dict(header=\'Extraction\',body =lambda row: A(\'\'+tes(row.id,\'extraction_preparation\'),_href=URL("default","router",args=getargs(row.id,args,"extraction_preparation")))),\\\n          dict(header=\'GC\',body=lambda row: A(\'\'+tes(row.id,\'gas_chromatography\'),_href=URL("default","router",args=getargs(row.id,args,"gas_chromatography")))),\\\n          dict(header=\'LC\',body=lambda row: A(\'\'+tes(row.id,\'liquid_chromatography\'),_href=URL("default","router",args=getargs(row.id,args,"liquid_chromatography")))),\\\n          dict(header=\'MS\',body=lambda row: A(\'\'+tes(row.id,\'mass_spectroscopy\'),_href=URL("default","router",args=getargs(row.id,args,"mass_spectroscopy")))),\\\n          lambda row: A(\'\'+tes(row.id,\'spectrophotometry\'),_href=URL("default","router",args=getargs(row.id,args,"spectrophotometry")))]\n    links={\'sample\':l1}\n#customized Views for certain forms using router   \n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n     \trouter()\n    s={\'sample\':lambda ids : redirect(URL(\'default\', \'mapping_multiple\', vars=dict(id=ids)))}\n    \n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,orderby=orderby_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=[\'experiment\',\'sample\',\'raw_data_storage_information\'],selectable = s) \n    return locals()\n\n#gets table name and rowid as input and creates another row with same details as rowid recod has\ndef tes(a,table):\n    if db(db[table].sample_name==a).count()==0:\n     return "add"\n    else:\n        return "edit"\n    return "add"\ndef getargs(a,args,table):\n    row = db(db[table].sample_name==a).select(db[table].id).first()\n    if row:\n        args=args+[table+".sample_name",a,"edit",table,row.id]\n        return args\n    else:\n        args = args+[table+".sample_name",a,"new",table]\n        return args\n\ndef copy(sid):\n    if db(db.template.user==auth.user.id).count() == 0:\n       db.template.insert(user=auth.user.id, sample=sid)\n    else:   \n       db(db.template.user == auth.user.id).update(sample=sid)\n    #redirect(URL(\'list_all_dev_projects\',args=request.args[0:-1]))\n    #Unique fields take care\n    #product.update(sampleid=\'temp\')\n    return() \ndef duplicate():\n    if True:\n        rec = db(db.sample.id==request.args[-1]).select(db.sample.ALL).first()\n        rec.update(parent=rec.id,replica=str(request.args[-2]))\n        in_row = db.sample.insert(**db.sample._filter_fields(rec))\n        for tb in [\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\']:\n            row = db(db[tb].sample_name==request.args[-1]).select(db[tb].ALL).first()\n            if row:\n                row.update(sample_name = in_row.id)\n                db[tb].insert(**db[tb]._filter_fields(row)) \n        redirect(URL(\'list_all_dev_projects\',args=request.args[0:-2]))\n    redirect(URL(\'list_all_dev_projects\',args=[]))\n\n\ndef my_samples():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """ all my samples in the project with permissions to edit delete publish/unpublish samples """\n    error = authenticate(auth.user.id,request.args(0),\'add_sample\') \n    l =  [\'project\',\'experiment.project\',request.args(0)]\n    if error == \'\':\n      redirect(URL(\'list_all_dev_projects\',args=l))\n    return locals()\n\ndef list_all_samples1():\n    proj_id = request.args(0)\n    pub_samples = db((db.sample.working_status == 1)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    dev_samples = db((db.sample.working_status == 0)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    return locals()\n\ndef view_published_samples():\n    proj_id = request.args(0)\n    return locals() \n\ndef router():\n    l=request.args\n    if \'biosource\' in l:\n      redirect(URL(\'insert_biosource\',args = l))\n    elif \'plant_growth_condition\' in l:\n      redirect(URL(\'insert_pgc\',args = l))\n    elif \'treatments\' in l:\n      redirect(URL(\'insert_treatments\',args = l))\n    elif \'harvests\' in l:\n      redirect(URL(\'insert_harvests\',args = l))\n    elif \'extraction_preparation\' in l:\n      redirect(URL(\'insert_ep\',args = l))\n    elif \'gas_chromatography\' in l:\n        redirect(URL(\'insert_gc\',args = l))\n    elif \'liquid_chromatography\' in l:\n        redirect(URL(\'insert_lc\',args = l))\n    elif \'mass_spectroscopy\' in l:\n        redirect(URL(\'insert_ms\',args = l))\n    elif \'raw_data_storage_information\' in l:\n          redirect(URL(\'insert_raw_data\',args = l))\n    elif \'spectrophotometry\' in l:\n          redirect(URL(\'insert_spectrophotometry\',args = l))\n    elif \'sample\' in l and \'new\' in l:\n          samp = db(db.sample.experimentalist==auth.user.id).select().last()\n          if samp:\n           copy(samp.id)\n           return()\n          else: \n           return() \n    elif \'sample\' in l and \'view\' in l:\t\t\n        redirect(URL(\'sample\',args=l))\n    elif \'project\' in l and \'view\' in l and \'experiment\' not in l:\n        redirect(URL(\'project_viewer\',args=l[-1]))\n        \n    else:\n        return()\n\n\'\'\'\telif \'sample\' in l and \'new\' in l:\t\t\n\t  redirect(URL(\'add_sample\',args = l))\n\telif \'sample\' in l:\t\t\n\t  redirect(URL(\'sample_viewer\',args = l))\n\telif \'project\' in l:\n\t  redirect(URL(\'project_viewer\',args=l))\n\telse : \n\t  redirect(URL(\'index\'))\'\'\'\n\ndef list_all_pub_samples():\n#    proj_id = request.args(0)\n#    pub = request.args(1) # if pub == 1 show published samples otherwise non published samples\n#   pub_query = (db.sample.working_status == 1 and db.sample.project == proj_id)\n#   unpub_query = (db.sample.working_status == 0 and db.sample.project == proj_id)\n#   pquery_dict = {\'sample\':pub_query}\n#   nquery_dict = {\'sample\':unpub_query}\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#       router(request.args)\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#     \trouter(request.args)\n    \n    """an argument to display published and non-published samples"""\n    """ request.args(0) - project  , request.args(1) published"""\n\n    redirect(URL(\'list_all_pub_projects\',args=[\'project\',\'experiment.project\',request.args(0)]))\n    \ndef list_all_dev_samples():\n   \n    redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',request.args(0)]))\n    return locals()\n\ndef ajx_role():\n    """ an ajax call back which takes care of insert , update and delete in the roles table """\n    rid = request.args(1)\n    if request.args(0) == \'accept\':\n       row = db(db.role.id == rid).update(approval_status = 1)\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.add_membership(gid,result.user)\n    if request.args(0) == \'unblock\':\n       del db.role[rid] \n    if request.args(0) == \'block\':\n       row = db(db.role.id == rid).update(approval_status = 2)\n    if request.args(0) == \'delete\' or request.args(0) == \'deny\':\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.del_membership(gid,result.user)\n       del db.role[rid] \n    return locals()\n\ndef reg_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ takes an id for the project and registers """\n    import datetime\n    now = datetime.datetime.now()\n    """ already requested """\n    pid = request.args(0)\n    ptitle = db(db.project.id == pid).select(db.project.ALL).first()\n    form = SQLFORM(db.role,fields=[\'role\'],showid=False)\n    if form.validate():\n       requested = db(db.role.user == auth.user.id)(db.role.project == pid)(db.role.approval_status == 0)(db.role.role==form.vars.role).count()\n       if requested == 0: \n        db.role.insert(user=auth.user.id,approval_status=0,project=pid,member_since=now,role=form.vars.role)\n        response.flash = \'wait for Coordinator\\\'s approval\'\n       else:\n        response.flash = \'You already hold the applied role\' \n    return locals() \n\ndef ajx_publish():\n    """ an ajax call back which takes care of publication status """\n    eid = request.args(1)\n    if request.args(0) == \'publish\':\n     row = db(db.project.id == eid).update(project_status = "1",project_publication_date = now)\n     redirect(URL(\'project_viewer\',args = [\'Published\',eid]))\n    elif request.args(0) == \'unpublish\':\n     row = db(db.project.id == eid).update(project_status = "0",project_publication_date= None)\n     redirect(URL(\'project_viewer\',args = [\'Unpublished\',eid]))\n    return locals() \n\ndef roles():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ complete interface for managing roles for a particular project"""\n    """ should be accessible to only project co-ordinators """\n    pid = request.args(0)\n    error = authenticate(auth.user.id,pid,\'roles\')\n    accepted = db(db.auth_user.id == db.role.user)(db.role.approval_status == 1)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    pending = db(db.auth_user.id == db.role.user)(db.role.approval_status == 0)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    blocked = db(db.auth_user.id == db.role.user)(db.role.approval_status == 2)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    return locals()\n   \ndef home_page():\n    """ home page for a user , shows list of projects he is working on and his past work """\n    uid = request.args(0)\n    #my roles \n    \n    roles = db(db.role.user == uid)(db.role.project == db.project.id).select(db.role.ALL,db.project.name) \n    myroles = [role_list[int(p.role.role)] for p in roles]\n    k = {}\n    """\n    is_coordinator = db(db.project.project_coordinator==uid).select(db.project.ALL)\n    coordinating_projects = [row.name for row in is_coordinator]\n    value=\'\'\n    for p in coordinating_projects:\n       value = value + \',\'+ p\n\t  \n    k[6] = value[1:] """\n    for row in roles:\n       if row.role.role not in k:\n          k[row.role.role] = row.project.name\n       else:\n          k[row.role.role] = k[row.role.role] + \',\' + row.project.name\n    com_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    incom_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    pub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == True)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    unpub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == False) (db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    for p in k:\n       list_projects = k[p].split(\',\')\n       proj = \'\' \n       for d in list_projects:\n          res = db(db.project.name == d).select(db.project.ALL).first()\n          cat = \'\'\n          if res:\n             cat = A(res.name,_href=URL(\'project_viewer\',args=res.id))\n          if proj == \'\':\n             proj=SPAN(cat)\n          else:\n           proj = SPAN(proj,\',\',cat)\n       k[p] = proj \n    return locals()\n\ndef download():\n    return response.download(request, db)\n\ndef insert_biosource():\n#prepopulating records  \n   if \'clear\' not in request.args and \'new\' in request.args:    \n    trows = db(db.template.user==auth.user.id).select()\n    count = db(db.template.user==auth.user.id).count()\n    if count > 0:\n     rows = db(db.biosource.sample_name==trows[0].sample).select()\n     count1 = db(db.biosource.sample_name==trows[0].sample).count()\n     if count1 > 0:\n      row = rows[0]      \n      for fieldname in db.biosource.fields:\n       if fieldname!=\'id\': \n        db.biosource[fieldname].default=row[fieldname]\n   elif \'clear\' in request.args: \n    request.args.pop()\n   #result = db(db.sample.id == request.args[-3]).select(db.sample.ALL).first()\n#  error = authenticate(auth.user.id,result.project,\'insert_biosource\')\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   redirect_args = request.args[0:-3]\n   form = SQLFORM(db.biosource)\n   if \'view\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],readonly = True,showid=False)\t  \n   elif \'edit\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],showid=False)\n   elif \'new\' in request.args:\n               db.biosource.sample_name.readable = False \n               hid = {}   \n\t       form=SQLFORM(db.biosource,showid=False)\n\t       form.vars.sample_name = request.args[-3]\n \t       redirect_args = request.args[0:-4]\n   i=1\n   f1=form[0][:i+2]\n   fs1=form[0][i+2:i+7]\n   f2=form[0][i+7:]\n   form[0]=TABLE(TABLE(f1),\n      FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n   if form.process().accepted:\n     redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n     response.flash="Inserted entry"\n   return locals()\n\ndef insert_pgc():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.plant_growth_condition.sample_name==trows[0].sample).select()\n    count1 = db(db.plant_growth_condition.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.plant_growth_condition.fields:\n      if fieldname!=\'id\': \n       db.plant_growth_condition[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.plant_growth_condition) \n  if \'view\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.plant_growth_condition.sample_name.readable = False \n\tform=SQLFORM(db.plant_growth_condition,showid=False)\n        form.vars.sample_name = request.args[-3]\n\tredirect_args = request.args[0:-2]\t \n  i=1\n  fs1=form[0][:i+5]\n  fss1=form[0][i+5:i+9]\n  fss2=form[0][i+9:i+10]\n  fss3=form[0][i+10:i+15]\n  f2=form[0][i+15:i+18]\n  fs2=form[0][i+18:i+21]\n  fs3=form[0][i+21:i+27]\n  f3=form[0][i+27:]\n  t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n  t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n  t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n  t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n  form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n  if form.process().accepted:\n    redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n    response.flash="form accepted"\n# redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  else:\n    response.flsh="form has some errors"\n  return locals()\n\ndef insert_ep():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.extraction_preparation.sample_name==trows[0].sample).select()\n    count1 = db(db.extraction_preparation.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.extraction_preparation.fields:\n      if fieldname!=\'id\': \n       db.extraction_preparation[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.extraction_preparation.sample_name.readable=False\n       form=SQLFORM(db.extraction_preparation,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:i+8]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][i+8:i+12])))))\n  t2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][i+12:])))\n  form[0]=TABLE(FIELDSET(t1,t2))\n  if form.process().accepted:\n       response.flash="Inserted entry"\n       redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_treatments():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.treatments.sample_name==trows[0].sample).select()\n    count1 = db(db.treatments.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.treatments.fields:\n      if fieldname!=\'id\': \n       db.treatments[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.treatments.sample_name.readable=False\n       form=SQLFORM(db.treatments,showid=False)\n       form.vars.sample_name = request.args[-3] \n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n  form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_harvests():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.harvests.sample_name==trows[0].sample).select()\n    count1 = db(db.harvests.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.harvests.fields:\n      if fieldname!=\'id\': \n       db.harvests[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.harvests.sample_name.readable=False\n       form=SQLFORM(db.harvests,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\n  i=1\t \n  t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n  form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\t  \t\ndef insert_gc():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.gas_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.gas_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.gas_chromatography.fields:\n      if fieldname!=\'id\': \n       db.gas_chromatography[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n\tform=SQLFORM(db.gas_chromatography,request.args[-1],readonly = True,pload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n        form=SQLFORM(db.gas_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.gas_chromatography.sample_name.readable=False\n        redirect_args = request.args[0:-2]\t \n        form=SQLFORM(db.gas_chromatography,showid=False)\n        form.vars.sample_name = request.args[-3]\n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n\tresponse.flash="Inserted entry"\n\tredirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#       redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_lc():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.liquid_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.liquid_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.liquid_chromatography.fields:\n      if fieldname!=\'id\': \n       db.liquid_chromatography[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.liquid_chromatography)\n  if \'view\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n      db.liquid_chromatography.sample_name.readable=False\n      redirect_args = request.args[0:-2]\t \n      form=SQLFORM(db.liquid_chromatography,showid=False)\n      form.vars.sample_name = request.args[-3] \n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_ms():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.mass_spectroscopy.sample_name==trows[0].sample).select()\n    count1 = db(db.mass_spectroscopy.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.mass_spectroscopy.fields:\n      if fieldname!=\'id\': \n       db.mass_spectroscopy[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.mass_spectroscopy.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.mass_spectroscopy,showid=False)\n    form.vars.sample_name = request.args[-3]\n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n  t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n  t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n  t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n  form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_raw_data():\n#prepopulating records  \n  if False:    \n    trows = db(db.template.user==auth.user.id).select()\n    count = db(db.template.user==auth.user.id).count()\n    if count > 0:\n      rows = db(db.raw_data_storage_information.sample_name==trows[0].sample).select()\n      count1 = db(db.raw_data_storage_information.sample_name==trows[0].sample).count()\n      if count1 > 0:\n       row = rows[0]\n       for fieldname in db.raw_data_storage_information.fields:\n        if fieldname!=\'id\': \n         db.raw_data_storage_information[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.raw_data_storage_information.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.raw_data_storage_information,showid=False)\n    form.vars.sample_name = request.args[-3]\n    form.vars.email_id_of_person=auth.user.email \n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_spectrophotometry():\n#prepopulating records  \n  if \'clear\' not in request.args and \'new\' in request.args:    \n   trows = db(db.template.user==auth.user.id).select()\n   count = db(db.template.user==auth.user.id).count()\n   if count > 0:\n    rows = db(db.spectrophotometry.sample_name==trows[0].sample).select()\n    count1 = db(db.spectrophotometry.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.spectrophotometry.fields:\n      if fieldname!=\'id\': \n       db.spectrophotometry[fieldname].default=row[fieldname]\n  elif \'clear\' in request.args: \n    request.args.pop()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.spectrophotometry.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.spectrophotometry,showid=False)\n    form.vars.sample_name = request.args[-3]\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n#def drop_tables():\n    #are you sure you want to do this?\n    #for t in [\'auth_user\',\'auth_group\', \'auth_membership\', \'auth_permission\', \'auth_event\',\'sample\',\'biosource\',\'affiliation\',\'project\',\'role\',\'template\',\'experiment\',\'project_meta\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'feedback\',\'sample_files\']:\n    #    db[t].drop()\n    # pass\n    #return \n\ndef show_feedback():\n    grid = SQLFORM.smartgrid(db.feedback)\n    return locals()\n\n \ndef post_feedback():\n    """ allows to post feedback to the table feedback """ \n    past_feeds = db(db.feedback.feedback_on == request.env.http_referer).select(db.feedback.feedback_body,db.feedback.id)\n    form = SQLFORM(db.feedback,fields=[\'feedback_body\'],labels={\'feedback_body\':\'Your feedback about this page\'})\n    feedback_by = \'\'\n    if form.validate():\n\tif auth.user:\n            feedback_by = auth.user.id\n        else:\n\t   feedback_by = \'\'\n\tdb.feedback.insert(feedback_on=request.env.http_referer,feedback_body=form.vars.feedback_body,feedback_by=feedback_by)\n\tresponse.flash = "feedback has been duly noted and will be taken care of "\n    return locals()\n\n\ndef user_viewer():\n   """shows the user details """\n   uid = request.args(0)\n   record = db.auth_user(uid)\n   form = SQLFORM(db.auth_user,record,readonly=True,showid=False,fields=[\'first_name\',\'last_name\',\'email\',\'affiliated_to\',\'phone\',\'mobile\',\'city\'])\n   return locals()\n\n\ndef dict_dump(obj,inp):\n  ans = \'<dl class="dl-horizontal">\'\n  for key in inp.keys():\n     add = \'<dt>\'+str(inp[key])+\'</dt>\'+\'<dd>\'+str(obj[key])+\'</dd>\'\n     ans = ans+add\n  return ans\t\n\n\ndef sample():\n  """gets all the information regarding a sample in a single page """\n  sid = request.args[-1]\n  sample = db(db.sample.id == sid).select(db.sample.ALL).first()\n  user = db(db.auth_user.id == sample.experimentalist).select(db.auth_user.ALL).first()\n  experiment = db(db.experiment.id == sample.experiment).select(db.experiment.ALL).first()\n  biosource = db(db.biosource.sample_name == sid).select(db.biosource.ALL)\n  plant_growth = db(db.plant_growth_condition.sample_name == sid).select(db.plant_growth_condition.ALL)\n  treatment = db(db.treatments.sample_name == sid).select(db.treatments.ALL)\n  harvest = db(db.harvests.sample_name == sid).select(db.harvests.ALL)\n  extraction_preparation = db(db.extraction_preparation.sample_name == sid).select(db.extraction_preparation.ALL)\n  gc = db(db.gas_chromatography.sample_name == sid).select(db.gas_chromatography.ALL)\n  lc = db(db.liquid_chromatography.sample_name == sid).select(db.liquid_chromatography.ALL)\n  ms = db(db.mass_spectroscopy.sample_name == sid).select(db.mass_spectroscopy.ALL)\n  raw_storage = db(db.raw_data_storage_information.sample_name == sid).select(db.raw_data_storage_information.ALL)\n  biosource_forms = [] #a list of forms\n  for each in biosource:\n\tform = SQLFORM(db.biosource,each.id,showid=False,readonly=True)\n\ti=1\n\tf1=form[0][:i+2]\n\tfs1=form[0][i+2:i+7]\n\tf2=form[0][i+7:]\n\tform[0]=TABLE(TABLE(f1),FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n\tbiosource_forms.append(form[0])\n        \n  pgc_forms = []\n  for each in plant_growth:\n     form = SQLFORM(db.plant_growth_condition,each.id,showid=False,readonly=True)\n     i=1\n     fs1=form[0][:i+5]\n     fss1=form[0][i+5:i+9]\n     fss2=form[0][i+9:i+10]\n     fss3=form[0][i+10:i+15]\n     f2=form[0][i+15:i+18]\n     fs2=form[0][i+18:i+21]\n     fs3=form[0][i+21:i+27]\n     f3=form[0][i+27:]\n     t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n     t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n     t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n     t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n     form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n     pgc_forms.append(form[0])\n  \n  treatment_forms = []\n  for each in treatment:\n     form = SQLFORM(db.treatments,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n     form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n\n\n  harvest_forms = []\n  for each in harvest:\n     form = SQLFORM(db.harvests,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n     form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n     harvest_forms.append(form[0])\n\n  gc_forms = []\n  for each in gc:\n     form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n     j=1\n     t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n     t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n     i=15\n     t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n     t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n     t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n     t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n     t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n     t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n     t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n     form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n\n     gc_forms.append(form[0])\n \n  lc_forms = []\n  \n  for each in lc:\n    form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n    j=1\n    t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n    t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n    i=15\n    t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n    t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n    t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n    t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n    t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n    t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n    form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n    lc_forms.append(form[0])\n \n  ms_forms = []\n  for each in ms:\n    form = SQLFORM(db.mass_spectroscopy,each.id,showid=False,readonly=True)\n    i=1\n    t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n    t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n    t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n    t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n    t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n    form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))  \n    ms_forms.append(form[0])\n\n  raw_forms = []\n  for each in raw_storage:\n     form = SQLFORM(db.raw_data_storage_information,each.id,showid=False,readonly=True)\n     raw_forms.append(form[0])\n\n\n  return locals() \n\n#def grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   #query=((db.sample.project==db.project.id)&(db.project.id>0))\n   #query=((db.project.id>0)&(db.sample.project==db.project.id)&((db.sample.id==db.biosource.sample_name)&(db.sample.id==db.plant_growth_condition.sample_name)))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n#   grid = SQLFORM.grid(query)\n#   return locals()\n\n\ndef search():\n    form=FORM(\'Your name:\',\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n      redirect(URL(\'sample\',args=form.vars.name)) \n    return locals()\n    \ndef multiple_files():\n   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """\n   """ per sample . takes id of the sample as the input """\n   sid = request.args(0)\n   sample = db(db.sample.id == sid).select().first() \n   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)\n   form = SQLFORM(db.sample_files)\n   form.vars.sample = sid\n   return locals()\n\n\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__getslice__'
p12
S"<method-wrapper '__getslice__' of exceptions.SyntaxError object>"
p13
sS'text'
p14
S'\'          lambda row: A(\\\'\\\'+tes(row.id,\\\'spectroph...args=getargs(row.id,args,"spectrophotometry")))]\\n\''
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of exceptions.SyntaxError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of exceptions.SyntaxError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of exceptions.SyntaxError object>'
p23
sS'__init__'
p24
S"<method-wrapper '__init__' of exceptions.SyntaxError object>"
p25
sS'__setattr__'
p26
S"<method-wrapper '__setattr__' of exceptions.SyntaxError object>"
p27
sS'__reduce_ex__'
p28
S'<built-in method __reduce_ex__ of exceptions.SyntaxError object>'
p29
sS'__new__'
p30
S'<built-in method __new__ of type object>'
p31
sS'__format__'
p32
S'<built-in method __format__ of exceptions.SyntaxError object>'
p33
sS'__class__'
p34
S"<type 'exceptions.SyntaxError'>"
p35
sS'filename'
p36
S"'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'"
p37
sS'lineno'
p38
S'339'
p39
sS'msg'
p40
S"'invalid syntax'"
p41
sS'__doc__'
p42
S"'Invalid syntax.'"
p43
sS'__getitem__'
p44
S"<method-wrapper '__getitem__' of exceptions.SyntaxError object>"
p45
sS'__setstate__'
p46
S'<built-in method __setstate__ of exceptions.SyntaxError object>'
p47
sS'__getattribute__'
p48
S"<method-wrapper '__getattribute__' of exceptions.SyntaxError object>"
p49
sS'print_file_and_line'
p50
S'None'
p51
sS'args'
p52
S'(\'invalid syntax\', (\'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py\', 339, 136, \'          lambda row: A(\\\'\\\'+tes(row.id,\\\'spectroph...args=getargs(row.id,args,"spectrophotometry")))]\\n\'))'
p53
sS'__subclasshook__'
p54
S'<built-in method __subclasshook__ of type object>'
p55
sS'offset'
p56
S'136'
p57
sS'__unicode__'
p58
S'<built-in method __unicode__ of exceptions.SyntaxError object>'
p59
sS'__delattr__'
p60
S"<method-wrapper '__delattr__' of exceptions.SyntaxError object>"
p61
sS'__repr__'
p62
S"<method-wrapper '__repr__' of exceptions.SyntaxError object>"
p63
sS'__hash__'
p64
S"<method-wrapper '__hash__' of exceptions.SyntaxError object>"
p65
ssS'evalue'
p66
S'invalid syntax (default.py, line 339)'
p67
sS'request'
p68
ccopy_reg
_reconstructor
p69
(cgluon.html
BEAUTIFY
p70
c__builtin__
object
p71
NtRp72
(dp73
S'attributes'
p74
(dp75
sS'components'
p76
(lp77
g69
(cgluon.html
TABLE
p78
g71
NtRp79
(dp80
g74
(dp81
S'level'
p82
I5
ssS'parent'
p83
Nsg76
(lp84
g69
(cgluon.html
TR
p85
g71
NtRp86
(dp87
g74
(dp88
sg83
g79
sg76
(lp89
g69
(cgluon.html
TD
p90
g71
NtRp91
(dp92
g74
(dp93
S'_style'
p94
S'font-weight:bold;vertical-align:top'
p95
ssg83
g86
sg76
(lp96
S'ajax'
p97
asbag69
(g90
g71
NtRp98
(dp99
g74
(dp100
S'_valign'
p101
S'top'
p102
ssg83
g86
sg76
(lp103
S':'
asbag69
(g90
g71
NtRp104
(dp105
g74
(dp106
sg83
g86
sg76
(lp107
g69
(g70
g71
NtRp108
(dp109
g74
(dp110
g82
I5
ssg83
g104
sg76
(lp111
S'False'
p112
asbasbasbag69
(g85
g71
NtRp113
(dp114
g74
(dp115
sg83
g79
sg76
(lp116
g69
(g90
g71
NtRp117
(dp118
g74
(dp119
g94
g95
ssg83
g113
sg76
(lp120
S'application'
p121
asbag69
(g90
g71
NtRp122
(dp123
g74
(dp124
g101
g102
ssg83
g113
sg76
(lp125
S':'
asbag69
(g90
g71
NtRp126
(dp127
g74
(dp128
sg83
g113
sg76
(lp129
g69
(g70
g71
NtRp130
(dp131
g74
(dp132
g82
I5
ssg83
g126
sg76
(lp133
S'DEV_bootstrap_ch'
p134
asbasbasbag69
(g85
g71
NtRp135
(dp136
g74
(dp137
sg83
g79
sg76
(lp138
g69
(g90
g71
NtRp139
(dp140
g74
(dp141
g94
g95
ssg83
g135
sg76
(lp142
g52
asbag69
(g90
g71
NtRp143
(dp144
g74
(dp145
g101
g102
ssg83
g135
sg76
(lp146
S':'
asbag69
(g90
g71
NtRp147
(dp148
g74
(dp149
sg83
g135
sg76
(lp150
g69
(g70
g71
NtRp151
(dp152
g74
(dp153
g82
I5
ssg83
g147
sg76
(lp154
g69
(g78
g71
NtRp155
(dp156
g74
(dp157
g82
I4
ssg83
Nsg76
(lp158
sbasbasbasbag69
(g85
g71
NtRp159
(dp160
g74
(dp161
sg83
g79
sg76
(lp162
g69
(g90
g71
NtRp163
(dp164
g74
(dp165
g94
g95
ssg83
g159
sg76
(lp166
S'body'
p167
asbag69
(g90
g71
NtRp168
(dp169
g74
(dp170
g101
g102
ssg83
g159
sg76
(lp171
S':'
asbag69
(g90
g71
NtRp172
(dp173
g74
(dp174
sg83
g159
sg76
(lp175
g69
(g70
g71
NtRp176
(dp177
g74
(dp178
g82
I5
ssg83
g172
sg76
(lp179
S'<cStringIO.StringO object at 0x9e90460>'
p180
asbasbasbag69
(g85
g71
NtRp181
(dp182
g74
(dp183
sg83
g79
sg76
(lp184
g69
(g90
g71
NtRp185
(dp186
g74
(dp187
g94
g95
ssg83
g181
sg76
(lp188
S'cid'
p189
asbag69
(g90
g71
NtRp190
(dp191
g74
(dp192
g101
g102
ssg83
g181
sg76
(lp193
S':'
asbag69
(g90
g71
NtRp194
(dp195
g74
(dp196
sg83
g181
sg76
(lp197
g69
(g70
g71
NtRp198
(dp199
g74
(dp200
g82
I5
ssg83
g194
sg76
(lp201
S'None'
p202
asbasbasbag69
(g85
g71
NtRp203
(dp204
g74
(dp205
sg83
g79
sg76
(lp206
g69
(g90
g71
NtRp207
(dp208
g74
(dp209
g94
g95
ssg83
g203
sg76
(lp210
S'client'
p211
asbag69
(g90
g71
NtRp212
(dp213
g74
(dp214
g101
g102
ssg83
g203
sg76
(lp215
S':'
asbag69
(g90
g71
NtRp216
(dp217
g74
(dp218
sg83
g203
sg76
(lp219
g69
(g70
g71
NtRp220
(dp221
g74
(dp222
g82
I5
ssg83
g216
sg76
(lp223
S'127.0.0.1'
p224
asbasbasbag69
(g85
g71
NtRp225
(dp226
g74
(dp227
sg83
g79
sg76
(lp228
g69
(g90
g71
NtRp229
(dp230
g74
(dp231
g94
g95
ssg83
g225
sg76
(lp232
S'controller'
p233
asbag69
(g90
g71
NtRp234
(dp235
g74
(dp236
g101
g102
ssg83
g225
sg76
(lp237
S':'
asbag69
(g90
g71
NtRp238
(dp239
g74
(dp240
sg83
g225
sg76
(lp241
g69
(g70
g71
NtRp242
(dp243
g74
(dp244
g82
I5
ssg83
g238
sg76
(lp245
S'default'
p246
asbasbasbag69
(g85
g71
NtRp247
(dp248
g74
(dp249
sg83
g79
sg76
(lp250
g69
(g90
g71
NtRp251
(dp252
g74
(dp253
g94
g95
ssg83
g247
sg76
(lp254
S'cookies'
p255
asbag69
(g90
g71
NtRp256
(dp257
g74
(dp258
g101
g102
ssg83
g247
sg76
(lp259
S':'
asbag69
(g90
g71
NtRp260
(dp261
g74
(dp262
sg83
g247
sg76
(lp263
g69
(g70
g71
NtRp264
(dp265
g74
(dp266
g82
I5
ssg83
g260
sg76
(lp267
g69
(g78
g71
NtRp268
(dp269
g74
(dp270
g82
I4
ssg83
Nsg76
(lp271
g69
(g85
g71
NtRp272
(dp273
g74
(dp274
sg83
g268
sg76
(lp275
g69
(g90
g71
NtRp276
(dp277
g74
(dp278
g94
g95
ssg83
g272
sg76
(lp279
S'session_id_admin'
p280
asbag69
(g90
g71
NtRp281
(dp282
g74
(dp283
g101
g102
ssg83
g272
sg76
(lp284
S':'
asbag69
(g90
g71
NtRp285
(dp286
g74
(dp287
sg83
g272
sg76
(lp288
g69
(g70
g71
NtRp289
(dp290
g74
(dp291
g82
I4
ssg83
g285
sg76
(lp292
S'127.0.0.1-b525fb61-ea08-4c78-87c0-51b0a39c8fc3'
p293
ag69
(g78
g71
NtRp294
(dp295
g74
(dp296
g82
I3
ssg83
Nsg76
(lp297
g69
(g85
g71
NtRp298
(dp299
g74
(dp300
sg83
g294
sg76
(lp301
g69
(g90
g71
NtRp302
(dp303
g74
(dp304
g94
g95
ssg83
g298
sg76
(lp305
S'comment'
p306
asbag69
(g90
g71
NtRp307
(dp308
g74
(dp309
g101
g102
ssg83
g298
sg76
(lp310
S':'
asbag69
(g90
g71
NtRp311
(dp312
g74
(dp313
sg83
g298
sg76
(lp314
g69
(g70
g71
NtRp315
(dp316
g74
(dp317
g82
I3
ssg83
g311
sg76
(lp318
S''
asbasbasbag69
(g85
g71
NtRp319
(dp320
g74
(dp321
sg83
g294
sg76
(lp322
g69
(g90
g71
NtRp323
(dp324
g74
(dp325
g94
g95
ssg83
g319
sg76
(lp326
S'domain'
p327
asbag69
(g90
g71
NtRp328
(dp329
g74
(dp330
g101
g102
ssg83
g319
sg76
(lp331
S':'
asbag69
(g90
g71
NtRp332
(dp333
g74
(dp334
sg83
g319
sg76
(lp335
g69
(g70
g71
NtRp336
(dp337
g74
(dp338
g82
I3
ssg83
g332
sg76
(lp339
S''
asbasbasbag69
(g85
g71
NtRp340
(dp341
g74
(dp342
sg83
g294
sg76
(lp343
g69
(g90
g71
NtRp344
(dp345
g74
(dp346
g94
g95
ssg83
g340
sg76
(lp347
S'expires'
p348
asbag69
(g90
g71
NtRp349
(dp350
g74
(dp351
g101
g102
ssg83
g340
sg76
(lp352
S':'
asbag69
(g90
g71
NtRp353
(dp354
g74
(dp355
sg83
g340
sg76
(lp356
g69
(g70
g71
NtRp357
(dp358
g74
(dp359
g82
I3
ssg83
g353
sg76
(lp360
S''
asbasbasbag69
(g85
g71
NtRp361
(dp362
g74
(dp363
sg83
g294
sg76
(lp364
g69
(g90
g71
NtRp365
(dp366
g74
(dp367
g94
g95
ssg83
g361
sg76
(lp368
S'httponly'
p369
asbag69
(g90
g71
NtRp370
(dp371
g74
(dp372
g101
g102
ssg83
g361
sg76
(lp373
S':'
asbag69
(g90
g71
NtRp374
(dp375
g74
(dp376
sg83
g361
sg76
(lp377
g69
(g70
g71
NtRp378
(dp379
g74
(dp380
g82
I3
ssg83
g374
sg76
(lp381
S''
asbasbasbag69
(g85
g71
NtRp382
(dp383
g74
(dp384
sg83
g294
sg76
(lp385
g69
(g90
g71
NtRp386
(dp387
g74
(dp388
g94
g95
ssg83
g382
sg76
(lp389
S'max-age'
p390
asbag69
(g90
g71
NtRp391
(dp392
g74
(dp393
g101
g102
ssg83
g382
sg76
(lp394
S':'
asbag69
(g90
g71
NtRp395
(dp396
g74
(dp397
sg83
g382
sg76
(lp398
g69
(g70
g71
NtRp399
(dp400
g74
(dp401
g82
I3
ssg83
g395
sg76
(lp402
S''
asbasbasbag69
(g85
g71
NtRp403
(dp404
g74
(dp405
sg83
g294
sg76
(lp406
g69
(g90
g71
NtRp407
(dp408
g74
(dp409
g94
g95
ssg83
g403
sg76
(lp410
S'path'
p411
asbag69
(g90
g71
NtRp412
(dp413
g74
(dp414
g101
g102
ssg83
g403
sg76
(lp415
S':'
asbag69
(g90
g71
NtRp416
(dp417
g74
(dp418
sg83
g403
sg76
(lp419
g69
(g70
g71
NtRp420
(dp421
g74
(dp422
g82
I3
ssg83
g416
sg76
(lp423
S''
asbasbasbag69
(g85
g71
NtRp424
(dp425
g74
(dp426
sg83
g294
sg76
(lp427
g69
(g90
g71
NtRp428
(dp429
g74
(dp430
g94
g95
ssg83
g424
sg76
(lp431
S'secure'
p432
asbag69
(g90
g71
NtRp433
(dp434
g74
(dp435
g101
g102
ssg83
g424
sg76
(lp436
S':'
asbag69
(g90
g71
NtRp437
(dp438
g74
(dp439
sg83
g424
sg76
(lp440
g69
(g70
g71
NtRp441
(dp442
g74
(dp443
g82
I3
ssg83
g437
sg76
(lp444
S''
asbasbasbag69
(g85
g71
NtRp445
(dp446
g74
(dp447
sg83
g294
sg76
(lp448
g69
(g90
g71
NtRp449
(dp450
g74
(dp451
g94
g95
ssg83
g445
sg76
(lp452
S'version'
p453
asbag69
(g90
g71
NtRp454
(dp455
g74
(dp456
g101
g102
ssg83
g445
sg76
(lp457
S':'
asbag69
(g90
g71
NtRp458
(dp459
g74
(dp460
sg83
g445
sg76
(lp461
g69
(g70
g71
NtRp462
(dp463
g74
(dp464
g82
I3
ssg83
g458
sg76
(lp465
S''
asbasbasbasbasbasbasbag69
(g85
g71
NtRp466
(dp467
g74
(dp468
sg83
g268
sg76
(lp469
g69
(g90
g71
NtRp470
(dp471
g74
(dp472
g94
g95
ssg83
g466
sg76
(lp473
S'session_id_dev_bootstrap_ch'
p474
asbag69
(g90
g71
NtRp475
(dp476
g74
(dp477
g101
g102
ssg83
g466
sg76
(lp478
S':'
asbag69
(g90
g71
NtRp479
(dp480
g74
(dp481
sg83
g466
sg76
(lp482
g69
(g70
g71
NtRp483
(dp484
g74
(dp485
g82
I4
ssg83
g479
sg76
(lp486
S'127.0.0.1-0786449f-0f57-4893-b642-5d65efb22480'
p487
ag69
(g78
g71
NtRp488
(dp489
g74
(dp490
g82
I3
ssg83
Nsg76
(lp491
g69
(g85
g71
NtRp492
(dp493
g74
(dp494
sg83
g488
sg76
(lp495
g69
(g90
g71
NtRp496
(dp497
g74
(dp498
g94
g95
ssg83
g492
sg76
(lp499
g306
asbag69
(g90
g71
NtRp500
(dp501
g74
(dp502
g101
g102
ssg83
g492
sg76
(lp503
S':'
asbag69
(g90
g71
NtRp504
(dp505
g74
(dp506
sg83
g492
sg76
(lp507
g69
(g70
g71
NtRp508
(dp509
g74
(dp510
g82
I3
ssg83
g504
sg76
(lp511
S''
asbasbasbag69
(g85
g71
NtRp512
(dp513
g74
(dp514
sg83
g488
sg76
(lp515
g69
(g90
g71
NtRp516
(dp517
g74
(dp518
g94
g95
ssg83
g512
sg76
(lp519
g327
asbag69
(g90
g71
NtRp520
(dp521
g74
(dp522
g101
g102
ssg83
g512
sg76
(lp523
S':'
asbag69
(g90
g71
NtRp524
(dp525
g74
(dp526
sg83
g512
sg76
(lp527
g69
(g70
g71
NtRp528
(dp529
g74
(dp530
g82
I3
ssg83
g524
sg76
(lp531
S''
asbasbasbag69
(g85
g71
NtRp532
(dp533
g74
(dp534
sg83
g488
sg76
(lp535
g69
(g90
g71
NtRp536
(dp537
g74
(dp538
g94
g95
ssg83
g532
sg76
(lp539
g348
asbag69
(g90
g71
NtRp540
(dp541
g74
(dp542
g101
g102
ssg83
g532
sg76
(lp543
S':'
asbag69
(g90
g71
NtRp544
(dp545
g74
(dp546
sg83
g532
sg76
(lp547
g69
(g70
g71
NtRp548
(dp549
g74
(dp550
g82
I3
ssg83
g544
sg76
(lp551
S''
asbasbasbag69
(g85
g71
NtRp552
(dp553
g74
(dp554
sg83
g488
sg76
(lp555
g69
(g90
g71
NtRp556
(dp557
g74
(dp558
g94
g95
ssg83
g552
sg76
(lp559
g369
asbag69
(g90
g71
NtRp560
(dp561
g74
(dp562
g101
g102
ssg83
g552
sg76
(lp563
S':'
asbag69
(g90
g71
NtRp564
(dp565
g74
(dp566
sg83
g552
sg76
(lp567
g69
(g70
g71
NtRp568
(dp569
g74
(dp570
g82
I3
ssg83
g564
sg76
(lp571
S''
asbasbasbag69
(g85
g71
NtRp572
(dp573
g74
(dp574
sg83
g488
sg76
(lp575
g69
(g90
g71
NtRp576
(dp577
g74
(dp578
g94
g95
ssg83
g572
sg76
(lp579
g390
asbag69
(g90
g71
NtRp580
(dp581
g74
(dp582
g101
g102
ssg83
g572
sg76
(lp583
S':'
asbag69
(g90
g71
NtRp584
(dp585
g74
(dp586
sg83
g572
sg76
(lp587
g69
(g70
g71
NtRp588
(dp589
g74
(dp590
g82
I3
ssg83
g584
sg76
(lp591
S''
asbasbasbag69
(g85
g71
NtRp592
(dp593
g74
(dp594
sg83
g488
sg76
(lp595
g69
(g90
g71
NtRp596
(dp597
g74
(dp598
g94
g95
ssg83
g592
sg76
(lp599
g411
asbag69
(g90
g71
NtRp600
(dp601
g74
(dp602
g101
g102
ssg83
g592
sg76
(lp603
S':'
asbag69
(g90
g71
NtRp604
(dp605
g74
(dp606
sg83
g592
sg76
(lp607
g69
(g70
g71
NtRp608
(dp609
g74
(dp610
g82
I3
ssg83
g604
sg76
(lp611
S''
asbasbasbag69
(g85
g71
NtRp612
(dp613
g74
(dp614
sg83
g488
sg76
(lp615
g69
(g90
g71
NtRp616
(dp617
g74
(dp618
g94
g95
ssg83
g612
sg76
(lp619
g432
asbag69
(g90
g71
NtRp620
(dp621
g74
(dp622
g101
g102
ssg83
g612
sg76
(lp623
S':'
asbag69
(g90
g71
NtRp624
(dp625
g74
(dp626
sg83
g612
sg76
(lp627
g69
(g70
g71
NtRp628
(dp629
g74
(dp630
g82
I3
ssg83
g624
sg76
(lp631
S''
asbasbasbag69
(g85
g71
NtRp632
(dp633
g74
(dp634
sg83
g488
sg76
(lp635
g69
(g90
g71
NtRp636
(dp637
g74
(dp638
g94
g95
ssg83
g632
sg76
(lp639
g453
asbag69
(g90
g71
NtRp640
(dp641
g74
(dp642
g101
g102
ssg83
g632
sg76
(lp643
S':'
asbag69
(g90
g71
NtRp644
(dp645
g74
(dp646
sg83
g632
sg76
(lp647
g69
(g70
g71
NtRp648
(dp649
g74
(dp650
g82
I3
ssg83
g644
sg76
(lp651
S''
asbasbasbasbasbasbasbasbasbasbasbag69
(g85
g71
NtRp652
(dp653
g74
(dp654
sg83
g79
sg76
(lp655
g69
(g90
g71
NtRp656
(dp657
g74
(dp658
g94
g95
ssg83
g652
sg76
(lp659
S'env'
p660
asbag69
(g90
g71
NtRp661
(dp662
g74
(dp663
g101
g102
ssg83
g652
sg76
(lp664
S':'
asbag69
(g90
g71
NtRp665
(dp666
g74
(dp667
sg83
g652
sg76
(lp668
g69
(g70
g71
NtRp669
(dp670
g74
(dp671
g82
I5
ssg83
g665
sg76
(lp672
g69
(g78
g71
NtRp673
(dp674
g74
(dp675
g82
I4
ssg83
Nsg76
(lp676
g69
(g85
g71
NtRp677
(dp678
g74
(dp679
sg83
g673
sg76
(lp680
g69
(g90
g71
NtRp681
(dp682
g74
(dp683
g94
g95
ssg83
g677
sg76
(lp684
S'app_folders'
p685
asbag69
(g90
g71
NtRp686
(dp687
g74
(dp688
g101
g102
ssg83
g677
sg76
(lp689
S':'
asbag69
(g90
g71
NtRp690
(dp691
g74
(dp692
sg83
g677
sg76
(lp693
g69
(g70
g71
NtRp694
(dp695
g74
(dp696
g82
I4
ssg83
g690
sg76
(lp697
S"set(['/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/'])"
p698
asbasbasbag69
(g85
g71
NtRp699
(dp700
g74
(dp701
sg83
g673
sg76
(lp702
g69
(g90
g71
NtRp703
(dp704
g74
(dp705
g94
g95
ssg83
g699
sg76
(lp706
S'applications_parent'
p707
asbag69
(g90
g71
NtRp708
(dp709
g74
(dp710
g101
g102
ssg83
g699
sg76
(lp711
S':'
asbag69
(g90
g71
NtRp712
(dp713
g74
(dp714
sg83
g699
sg76
(lp715
g69
(g70
g71
NtRp716
(dp717
g74
(dp718
g82
I4
ssg83
g712
sg76
(lp719
S'/home/anil/Downloads/web2py'
p720
asbasbasbag69
(g85
g71
NtRp721
(dp722
g74
(dp723
sg83
g673
sg76
(lp724
g69
(g90
g71
NtRp725
(dp726
g74
(dp727
g94
g95
ssg83
g721
sg76
(lp728
S'cmd_args'
p729
asbag69
(g90
g71
NtRp730
(dp731
g74
(dp732
g101
g102
ssg83
g721
sg76
(lp733
S':'
asbag69
(g90
g71
NtRp734
(dp735
g74
(dp736
sg83
g721
sg76
(lp737
g69
(g70
g71
NtRp738
(dp739
g74
(dp740
g82
I4
ssg83
g734
sg76
(lp741
g69
(g78
g71
NtRp742
(dp743
g74
(dp744
g82
I3
ssg83
Nsg76
(lp745
sbasbasbasbag69
(g85
g71
NtRp746
(dp747
g74
(dp748
sg83
g673
sg76
(lp749
g69
(g90
g71
NtRp750
(dp751
g74
(dp752
g94
g95
ssg83
g746
sg76
(lp753
S'cmd_options'
p754
asbag69
(g90
g71
NtRp755
(dp756
g74
(dp757
g101
g102
ssg83
g746
sg76
(lp758
S':'
asbag69
(g90
g71
NtRp759
(dp760
g74
(dp761
sg83
g746
sg76
(lp762
g69
(g70
g71
NtRp763
(dp764
g74
(dp765
g82
I4
ssg83
g759
sg76
(lp766
S"<Values at 0x9e1a0cc: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/Downloads/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p767
asbasbasbag69
(g85
g71
NtRp768
(dp769
g74
(dp770
sg83
g673
sg76
(lp771
g69
(g90
g71
NtRp772
(dp773
g74
(dp774
g94
g95
ssg83
g768
sg76
(lp775
S'db_sessions'
p776
asbag69
(g90
g71
NtRp777
(dp778
g74
(dp779
g101
g102
ssg83
g768
sg76
(lp780
S':'
asbag69
(g90
g71
NtRp781
(dp782
g74
(dp783
sg83
g768
sg76
(lp784
g69
(g70
g71
NtRp785
(dp786
g74
(dp787
g82
I4
ssg83
g781
sg76
(lp788
S'set([])'
p789
asbasbasbag69
(g85
g71
NtRp790
(dp791
g74
(dp792
sg83
g673
sg76
(lp793
g69
(g90
g71
NtRp794
(dp795
g74
(dp796
g94
g95
ssg83
g790
sg76
(lp797
S'debugging'
p798
asbag69
(g90
g71
NtRp799
(dp800
g74
(dp801
g101
g102
ssg83
g790
sg76
(lp802
S':'
asbag69
(g90
g71
NtRp803
(dp804
g74
(dp805
sg83
g790
sg76
(lp806
g69
(g70
g71
NtRp807
(dp808
g74
(dp809
g82
I4
ssg83
g803
sg76
(lp810
g112
asbasbasbag69
(g85
g71
NtRp811
(dp812
g74
(dp813
sg83
g673
sg76
(lp814
g69
(g90
g71
NtRp815
(dp816
g74
(dp817
g94
g95
ssg83
g811
sg76
(lp818
S'gluon_parent'
p819
asbag69
(g90
g71
NtRp820
(dp821
g74
(dp822
g101
g102
ssg83
g811
sg76
(lp823
S':'
asbag69
(g90
g71
NtRp824
(dp825
g74
(dp826
sg83
g811
sg76
(lp827
g69
(g70
g71
NtRp828
(dp829
g74
(dp830
g82
I4
ssg83
g824
sg76
(lp831
S'/home/anil/Downloads/web2py'
p832
asbasbasbag69
(g85
g71
NtRp833
(dp834
g74
(dp835
sg83
g673
sg76
(lp836
g69
(g90
g71
NtRp837
(dp838
g74
(dp839
g94
g95
ssg83
g833
sg76
(lp840
S'http_accept'
p841
asbag69
(g90
g71
NtRp842
(dp843
g74
(dp844
g101
g102
ssg83
g833
sg76
(lp845
S':'
asbag69
(g90
g71
NtRp846
(dp847
g74
(dp848
sg83
g833
sg76
(lp849
g69
(g70
g71
NtRp850
(dp851
g74
(dp852
g82
I4
ssg83
g846
sg76
(lp853
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p854
asbasbasbag69
(g85
g71
NtRp855
(dp856
g74
(dp857
sg83
g673
sg76
(lp858
g69
(g90
g71
NtRp859
(dp860
g74
(dp861
g94
g95
ssg83
g855
sg76
(lp862
S'http_accept_charset'
p863
asbag69
(g90
g71
NtRp864
(dp865
g74
(dp866
g101
g102
ssg83
g855
sg76
(lp867
S':'
asbag69
(g90
g71
NtRp868
(dp869
g74
(dp870
sg83
g855
sg76
(lp871
g69
(g70
g71
NtRp872
(dp873
g74
(dp874
g82
I4
ssg83
g868
sg76
(lp875
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p876
asbasbasbag69
(g85
g71
NtRp877
(dp878
g74
(dp879
sg83
g673
sg76
(lp880
g69
(g90
g71
NtRp881
(dp882
g74
(dp883
g94
g95
ssg83
g877
sg76
(lp884
S'http_accept_encoding'
p885
asbag69
(g90
g71
NtRp886
(dp887
g74
(dp888
g101
g102
ssg83
g877
sg76
(lp889
S':'
asbag69
(g90
g71
NtRp890
(dp891
g74
(dp892
sg83
g877
sg76
(lp893
g69
(g70
g71
NtRp894
(dp895
g74
(dp896
g82
I4
ssg83
g890
sg76
(lp897
S'gzip,deflate,sdch'
p898
asbasbasbag69
(g85
g71
NtRp899
(dp900
g74
(dp901
sg83
g673
sg76
(lp902
g69
(g90
g71
NtRp903
(dp904
g74
(dp905
g94
g95
ssg83
g899
sg76
(lp906
S'http_accept_language'
p907
asbag69
(g90
g71
NtRp908
(dp909
g74
(dp910
g101
g102
ssg83
g899
sg76
(lp911
S':'
asbag69
(g90
g71
NtRp912
(dp913
g74
(dp914
sg83
g899
sg76
(lp915
g69
(g70
g71
NtRp916
(dp917
g74
(dp918
g82
I4
ssg83
g912
sg76
(lp919
S'en-US,en;q=0.8'
p920
asbasbasbag69
(g85
g71
NtRp921
(dp922
g74
(dp923
sg83
g673
sg76
(lp924
g69
(g90
g71
NtRp925
(dp926
g74
(dp927
g94
g95
ssg83
g921
sg76
(lp928
S'http_connection'
p929
asbag69
(g90
g71
NtRp930
(dp931
g74
(dp932
g101
g102
ssg83
g921
sg76
(lp933
S':'
asbag69
(g90
g71
NtRp934
(dp935
g74
(dp936
sg83
g921
sg76
(lp937
g69
(g70
g71
NtRp938
(dp939
g74
(dp940
g82
I4
ssg83
g934
sg76
(lp941
S'keep-alive'
p942
asbasbasbag69
(g85
g71
NtRp943
(dp944
g74
(dp945
sg83
g673
sg76
(lp946
g69
(g90
g71
NtRp947
(dp948
g74
(dp949
g94
g95
ssg83
g943
sg76
(lp950
S'http_cookie'
p951
asbag69
(g90
g71
NtRp952
(dp953
g74
(dp954
g101
g102
ssg83
g943
sg76
(lp955
S':'
asbag69
(g90
g71
NtRp956
(dp957
g74
(dp958
sg83
g943
sg76
(lp959
g69
(g70
g71
NtRp960
(dp961
g74
(dp962
g82
I4
ssg83
g956
sg76
(lp963
S'session_id_dev_bootstrap_ch=127.0.0.1-0786449f-0f57-4893-b642-5d65efb22480; session_id_admin=127.0.0.1-b525fb61-ea08-4c78-87c0-51b0a39c8fc3'
p964
asbasbasbag69
(g85
g71
NtRp965
(dp966
g74
(dp967
sg83
g673
sg76
(lp968
g69
(g90
g71
NtRp969
(dp970
g74
(dp971
g94
g95
ssg83
g965
sg76
(lp972
S'http_host'
p973
asbag69
(g90
g71
NtRp974
(dp975
g74
(dp976
g101
g102
ssg83
g965
sg76
(lp977
S':'
asbag69
(g90
g71
NtRp978
(dp979
g74
(dp980
sg83
g965
sg76
(lp981
g69
(g70
g71
NtRp982
(dp983
g74
(dp984
g82
I4
ssg83
g978
sg76
(lp985
S'127.0.0.1:8000'
p986
asbasbasbag69
(g85
g71
NtRp987
(dp988
g74
(dp989
sg83
g673
sg76
(lp990
g69
(g90
g71
NtRp991
(dp992
g74
(dp993
g94
g95
ssg83
g987
sg76
(lp994
S'http_user_agent'
p995
asbag69
(g90
g71
NtRp996
(dp997
g74
(dp998
g101
g102
ssg83
g987
sg76
(lp999
S':'
asbag69
(g90
g71
NtRp1000
(dp1001
g74
(dp1002
sg83
g987
sg76
(lp1003
g69
(g70
g71
NtRp1004
(dp1005
g74
(dp1006
g82
I4
ssg83
g1000
sg76
(lp1007
S'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.10 Safari/537.31'
p1008
asbasbasbag69
(g85
g71
NtRp1009
(dp1010
g74
(dp1011
sg83
g673
sg76
(lp1012
g69
(g90
g71
NtRp1013
(dp1014
g74
(dp1015
g94
g95
ssg83
g1009
sg76
(lp1016
S'is_jython'
p1017
asbag69
(g90
g71
NtRp1018
(dp1019
g74
(dp1020
g101
g102
ssg83
g1009
sg76
(lp1021
S':'
asbag69
(g90
g71
NtRp1022
(dp1023
g74
(dp1024
sg83
g1009
sg76
(lp1025
g69
(g70
g71
NtRp1026
(dp1027
g74
(dp1028
g82
I4
ssg83
g1022
sg76
(lp1029
g112
asbasbasbag69
(g85
g71
NtRp1030
(dp1031
g74
(dp1032
sg83
g673
sg76
(lp1033
g69
(g90
g71
NtRp1034
(dp1035
g74
(dp1036
g94
g95
ssg83
g1030
sg76
(lp1037
S'is_pypy'
p1038
asbag69
(g90
g71
NtRp1039
(dp1040
g74
(dp1041
g101
g102
ssg83
g1030
sg76
(lp1042
S':'
asbag69
(g90
g71
NtRp1043
(dp1044
g74
(dp1045
sg83
g1030
sg76
(lp1046
g69
(g70
g71
NtRp1047
(dp1048
g74
(dp1049
g82
I4
ssg83
g1043
sg76
(lp1050
g112
asbasbasbag69
(g85
g71
NtRp1051
(dp1052
g74
(dp1053
sg83
g673
sg76
(lp1054
g69
(g90
g71
NtRp1055
(dp1056
g74
(dp1057
g94
g95
ssg83
g1051
sg76
(lp1058
S'path_info'
p1059
asbag69
(g90
g71
NtRp1060
(dp1061
g74
(dp1062
g101
g102
ssg83
g1051
sg76
(lp1063
S':'
asbag69
(g90
g71
NtRp1064
(dp1065
g74
(dp1066
sg83
g1051
sg76
(lp1067
g69
(g70
g71
NtRp1068
(dp1069
g74
(dp1070
g82
I4
ssg83
g1064
sg76
(lp1071
S'/DEV_bootstrap_ch/'
p1072
asbasbasbag69
(g85
g71
NtRp1073
(dp1074
g74
(dp1075
sg83
g673
sg76
(lp1076
g69
(g90
g71
NtRp1077
(dp1078
g74
(dp1079
g94
g95
ssg83
g1073
sg76
(lp1080
S'query_string'
p1081
asbag69
(g90
g71
NtRp1082
(dp1083
g74
(dp1084
g101
g102
ssg83
g1073
sg76
(lp1085
S':'
asbag69
(g90
g71
NtRp1086
(dp1087
g74
(dp1088
sg83
g1073
sg76
(lp1089
g69
(g70
g71
NtRp1090
(dp1091
g74
(dp1092
g82
I4
ssg83
g1086
sg76
(lp1093
S''
asbasbasbag69
(g85
g71
NtRp1094
(dp1095
g74
(dp1096
sg83
g673
sg76
(lp1097
g69
(g90
g71
NtRp1098
(dp1099
g74
(dp1100
g94
g95
ssg83
g1094
sg76
(lp1101
S'remote_addr'
p1102
asbag69
(g90
g71
NtRp1103
(dp1104
g74
(dp1105
g101
g102
ssg83
g1094
sg76
(lp1106
S':'
asbag69
(g90
g71
NtRp1107
(dp1108
g74
(dp1109
sg83
g1094
sg76
(lp1110
g69
(g70
g71
NtRp1111
(dp1112
g74
(dp1113
g82
I4
ssg83
g1107
sg76
(lp1114
g224
asbasbasbag69
(g85
g71
NtRp1115
(dp1116
g74
(dp1117
sg83
g673
sg76
(lp1118
g69
(g90
g71
NtRp1119
(dp1120
g74
(dp1121
g94
g95
ssg83
g1115
sg76
(lp1122
S'remote_port'
p1123
asbag69
(g90
g71
NtRp1124
(dp1125
g74
(dp1126
g101
g102
ssg83
g1115
sg76
(lp1127
S':'
asbag69
(g90
g71
NtRp1128
(dp1129
g74
(dp1130
sg83
g1115
sg76
(lp1131
g69
(g70
g71
NtRp1132
(dp1133
g74
(dp1134
g82
I4
ssg83
g1128
sg76
(lp1135
S'51648'
p1136
asbasbasbag69
(g85
g71
NtRp1137
(dp1138
g74
(dp1139
sg83
g673
sg76
(lp1140
g69
(g90
g71
NtRp1141
(dp1142
g74
(dp1143
g94
g95
ssg83
g1137
sg76
(lp1144
S'request_method'
p1145
asbag69
(g90
g71
NtRp1146
(dp1147
g74
(dp1148
g101
g102
ssg83
g1137
sg76
(lp1149
S':'
asbag69
(g90
g71
NtRp1150
(dp1151
g74
(dp1152
sg83
g1137
sg76
(lp1153
g69
(g70
g71
NtRp1154
(dp1155
g74
(dp1156
g82
I4
ssg83
g1150
sg76
(lp1157
S'GET'
p1158
asbasbasbag69
(g85
g71
NtRp1159
(dp1160
g74
(dp1161
sg83
g673
sg76
(lp1162
g69
(g90
g71
NtRp1163
(dp1164
g74
(dp1165
g94
g95
ssg83
g1159
sg76
(lp1166
S'request_uri'
p1167
asbag69
(g90
g71
NtRp1168
(dp1169
g74
(dp1170
g101
g102
ssg83
g1159
sg76
(lp1171
S':'
asbag69
(g90
g71
NtRp1172
(dp1173
g74
(dp1174
sg83
g1159
sg76
(lp1175
g69
(g70
g71
NtRp1176
(dp1177
g74
(dp1178
g82
I4
ssg83
g1172
sg76
(lp1179
g1072
asbasbasbag69
(g85
g71
NtRp1180
(dp1181
g74
(dp1182
sg83
g673
sg76
(lp1183
g69
(g90
g71
NtRp1184
(dp1185
g74
(dp1186
g94
g95
ssg83
g1180
sg76
(lp1187
S'script_name'
p1188
asbag69
(g90
g71
NtRp1189
(dp1190
g74
(dp1191
g101
g102
ssg83
g1180
sg76
(lp1192
S':'
asbag69
(g90
g71
NtRp1193
(dp1194
g74
(dp1195
sg83
g1180
sg76
(lp1196
g69
(g70
g71
NtRp1197
(dp1198
g74
(dp1199
g82
I4
ssg83
g1193
sg76
(lp1200
S''
asbasbasbag69
(g85
g71
NtRp1201
(dp1202
g74
(dp1203
sg83
g673
sg76
(lp1204
g69
(g90
g71
NtRp1205
(dp1206
g74
(dp1207
g94
g95
ssg83
g1201
sg76
(lp1208
S'server_name'
p1209
asbag69
(g90
g71
NtRp1210
(dp1211
g74
(dp1212
g101
g102
ssg83
g1201
sg76
(lp1213
S':'
asbag69
(g90
g71
NtRp1214
(dp1215
g74
(dp1216
sg83
g1201
sg76
(lp1217
g69
(g70
g71
NtRp1218
(dp1219
g74
(dp1220
g82
I4
ssg83
g1214
sg76
(lp1221
S'anil-Inspiron-1525'
p1222
asbasbasbag69
(g85
g71
NtRp1223
(dp1224
g74
(dp1225
sg83
g673
sg76
(lp1226
g69
(g90
g71
NtRp1227
(dp1228
g74
(dp1229
g94
g95
ssg83
g1223
sg76
(lp1230
S'server_port'
p1231
asbag69
(g90
g71
NtRp1232
(dp1233
g74
(dp1234
g101
g102
ssg83
g1223
sg76
(lp1235
S':'
asbag69
(g90
g71
NtRp1236
(dp1237
g74
(dp1238
sg83
g1223
sg76
(lp1239
g69
(g70
g71
NtRp1240
(dp1241
g74
(dp1242
g82
I4
ssg83
g1236
sg76
(lp1243
S'8000'
p1244
asbasbasbag69
(g85
g71
NtRp1245
(dp1246
g74
(dp1247
sg83
g673
sg76
(lp1248
g69
(g90
g71
NtRp1249
(dp1250
g74
(dp1251
g94
g95
ssg83
g1245
sg76
(lp1252
S'server_protocol'
p1253
asbag69
(g90
g71
NtRp1254
(dp1255
g74
(dp1256
g101
g102
ssg83
g1245
sg76
(lp1257
S':'
asbag69
(g90
g71
NtRp1258
(dp1259
g74
(dp1260
sg83
g1245
sg76
(lp1261
g69
(g70
g71
NtRp1262
(dp1263
g74
(dp1264
g82
I4
ssg83
g1258
sg76
(lp1265
S'HTTP/1.1'
p1266
asbasbasbag69
(g85
g71
NtRp1267
(dp1268
g74
(dp1269
sg83
g673
sg76
(lp1270
g69
(g90
g71
NtRp1271
(dp1272
g74
(dp1273
g94
g95
ssg83
g1267
sg76
(lp1274
S'server_software'
p1275
asbag69
(g90
g71
NtRp1276
(dp1277
g74
(dp1278
g101
g102
ssg83
g1267
sg76
(lp1279
S':'
asbag69
(g90
g71
NtRp1280
(dp1281
g74
(dp1282
sg83
g1267
sg76
(lp1283
g69
(g70
g71
NtRp1284
(dp1285
g74
(dp1286
g82
I4
ssg83
g1280
sg76
(lp1287
S'Rocket 1.2.6'
p1288
asbasbasbag69
(g85
g71
NtRp1289
(dp1290
g74
(dp1291
sg83
g673
sg76
(lp1292
g69
(g90
g71
NtRp1293
(dp1294
g74
(dp1295
g94
g95
ssg83
g1289
sg76
(lp1296
S'web2py_path'
p1297
asbag69
(g90
g71
NtRp1298
(dp1299
g74
(dp1300
g101
g102
ssg83
g1289
sg76
(lp1301
S':'
asbag69
(g90
g71
NtRp1302
(dp1303
g74
(dp1304
sg83
g1289
sg76
(lp1305
g69
(g70
g71
NtRp1306
(dp1307
g74
(dp1308
g82
I4
ssg83
g1302
sg76
(lp1309
g720
asbasbasbag69
(g85
g71
NtRp1310
(dp1311
g74
(dp1312
sg83
g673
sg76
(lp1313
g69
(g90
g71
NtRp1314
(dp1315
g74
(dp1316
g94
g95
ssg83
g1310
sg76
(lp1317
S'web2py_version'
p1318
asbag69
(g90
g71
NtRp1319
(dp1320
g74
(dp1321
g101
g102
ssg83
g1310
sg76
(lp1322
S':'
asbag69
(g90
g71
NtRp1323
(dp1324
g74
(dp1325
sg83
g1310
sg76
(lp1326
g69
(g70
g71
NtRp1327
(dp1328
g74
(dp1329
g82
I4
ssg83
g1323
sg76
(lp1330
g69
(g78
g71
NtRp1331
(dp1332
g74
(dp1333
g82
I3
ssg83
Nsg76
(lp1334
g69
(g85
g71
NtRp1335
(dp1336
g74
(dp1337
sg83
g1331
sg76
(lp1338
g69
(g90
g71
NtRp1339
(dp1340
g74
(dp1341
sg83
g1335
sg76
(lp1342
g69
(g70
g71
NtRp1343
(dp1344
g74
(dp1345
g82
I3
ssg83
g1339
sg76
(lp1346
S'2'
asbasbasbag69
(g85
g71
NtRp1347
(dp1348
g74
(dp1349
sg83
g1331
sg76
(lp1350
g69
(g90
g71
NtRp1351
(dp1352
g74
(dp1353
sg83
g1347
sg76
(lp1354
g69
(g70
g71
NtRp1355
(dp1356
g74
(dp1357
g82
I3
ssg83
g1351
sg76
(lp1358
S'3'
asbasbasbag69
(g85
g71
NtRp1359
(dp1360
g74
(dp1361
sg83
g1331
sg76
(lp1362
g69
(g90
g71
NtRp1363
(dp1364
g74
(dp1365
sg83
g1359
sg76
(lp1366
g69
(g70
g71
NtRp1367
(dp1368
g74
(dp1369
g82
I3
ssg83
g1363
sg76
(lp1370
S'2'
asbasbasbag69
(g85
g71
NtRp1371
(dp1372
g74
(dp1373
sg83
g1331
sg76
(lp1374
g69
(g90
g71
NtRp1375
(dp1376
g74
(dp1377
sg83
g1371
sg76
(lp1378
g69
(g70
g71
NtRp1379
(dp1380
g74
(dp1381
g82
I3
ssg83
g1375
sg76
(lp1382
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p1383
asbasbasbag69
(g85
g71
NtRp1384
(dp1385
g74
(dp1386
sg83
g1331
sg76
(lp1387
g69
(g90
g71
NtRp1388
(dp1389
g74
(dp1390
sg83
g1384
sg76
(lp1391
g69
(g70
g71
NtRp1392
(dp1393
g74
(dp1394
g82
I3
ssg83
g1388
sg76
(lp1395
S'stable'
p1396
asbasbasbasbasbasbasbag69
(g85
g71
NtRp1397
(dp1398
g74
(dp1399
sg83
g673
sg76
(lp1400
g69
(g90
g71
NtRp1401
(dp1402
g74
(dp1403
g94
g95
ssg83
g1397
sg76
(lp1404
S'wsgi_errors'
p1405
asbag69
(g90
g71
NtRp1406
(dp1407
g74
(dp1408
g101
g102
ssg83
g1397
sg76
(lp1409
S':'
asbag69
(g90
g71
NtRp1410
(dp1411
g74
(dp1412
sg83
g1397
sg76
(lp1413
g69
(g70
g71
NtRp1414
(dp1415
g74
(dp1416
g82
I4
ssg83
g1410
sg76
(lp1417
S"<open file '<stderr>', mode 'w' at 0xb73110d0>"
p1418
asbasbasbag69
(g85
g71
NtRp1419
(dp1420
g74
(dp1421
sg83
g673
sg76
(lp1422
g69
(g90
g71
NtRp1423
(dp1424
g74
(dp1425
g94
g95
ssg83
g1419
sg76
(lp1426
S'wsgi_file_wrapper'
p1427
asbag69
(g90
g71
NtRp1428
(dp1429
g74
(dp1430
g101
g102
ssg83
g1419
sg76
(lp1431
S':'
asbag69
(g90
g71
NtRp1432
(dp1433
g74
(dp1434
sg83
g1419
sg76
(lp1435
g69
(g70
g71
NtRp1436
(dp1437
g74
(dp1438
g82
I4
ssg83
g1432
sg76
(lp1439
S'<class wsgiref.util.FileWrapper at 0x9da3b9c>'
p1440
asbasbasbag69
(g85
g71
NtRp1441
(dp1442
g74
(dp1443
sg83
g673
sg76
(lp1444
g69
(g90
g71
NtRp1445
(dp1446
g74
(dp1447
g94
g95
ssg83
g1441
sg76
(lp1448
S'wsgi_input'
p1449
asbag69
(g90
g71
NtRp1450
(dp1451
g74
(dp1452
g101
g102
ssg83
g1441
sg76
(lp1453
S':'
asbag69
(g90
g71
NtRp1454
(dp1455
g74
(dp1456
sg83
g1441
sg76
(lp1457
g69
(g70
g71
NtRp1458
(dp1459
g74
(dp1460
g82
I4
ssg83
g1454
sg76
(lp1461
S'<socket._fileobject object at 0x9e80a6c>'
p1462
asbasbasbag69
(g85
g71
NtRp1463
(dp1464
g74
(dp1465
sg83
g673
sg76
(lp1466
g69
(g90
g71
NtRp1467
(dp1468
g74
(dp1469
g94
g95
ssg83
g1463
sg76
(lp1470
S'wsgi_multiprocess'
p1471
asbag69
(g90
g71
NtRp1472
(dp1473
g74
(dp1474
g101
g102
ssg83
g1463
sg76
(lp1475
S':'
asbag69
(g90
g71
NtRp1476
(dp1477
g74
(dp1478
sg83
g1463
sg76
(lp1479
g69
(g70
g71
NtRp1480
(dp1481
g74
(dp1482
g82
I4
ssg83
g1476
sg76
(lp1483
g112
asbasbasbag69
(g85
g71
NtRp1484
(dp1485
g74
(dp1486
sg83
g673
sg76
(lp1487
g69
(g90
g71
NtRp1488
(dp1489
g74
(dp1490
g94
g95
ssg83
g1484
sg76
(lp1491
S'wsgi_multithread'
p1492
asbag69
(g90
g71
NtRp1493
(dp1494
g74
(dp1495
g101
g102
ssg83
g1484
sg76
(lp1496
S':'
asbag69
(g90
g71
NtRp1497
(dp1498
g74
(dp1499
sg83
g1484
sg76
(lp1500
g69
(g70
g71
NtRp1501
(dp1502
g74
(dp1503
g82
I4
ssg83
g1497
sg76
(lp1504
S'True'
p1505
asbasbasbag69
(g85
g71
NtRp1506
(dp1507
g74
(dp1508
sg83
g673
sg76
(lp1509
g69
(g90
g71
NtRp1510
(dp1511
g74
(dp1512
g94
g95
ssg83
g1506
sg76
(lp1513
S'wsgi_run_once'
p1514
asbag69
(g90
g71
NtRp1515
(dp1516
g74
(dp1517
g101
g102
ssg83
g1506
sg76
(lp1518
S':'
asbag69
(g90
g71
NtRp1519
(dp1520
g74
(dp1521
sg83
g1506
sg76
(lp1522
g69
(g70
g71
NtRp1523
(dp1524
g74
(dp1525
g82
I4
ssg83
g1519
sg76
(lp1526
g112
asbasbasbag69
(g85
g71
NtRp1527
(dp1528
g74
(dp1529
sg83
g673
sg76
(lp1530
g69
(g90
g71
NtRp1531
(dp1532
g74
(dp1533
g94
g95
ssg83
g1527
sg76
(lp1534
S'wsgi_url_scheme'
p1535
asbag69
(g90
g71
NtRp1536
(dp1537
g74
(dp1538
g101
g102
ssg83
g1527
sg76
(lp1539
S':'
asbag69
(g90
g71
NtRp1540
(dp1541
g74
(dp1542
sg83
g1527
sg76
(lp1543
g69
(g70
g71
NtRp1544
(dp1545
g74
(dp1546
g82
I4
ssg83
g1540
sg76
(lp1547
S'http'
p1548
asbasbasbag69
(g85
g71
NtRp1549
(dp1550
g74
(dp1551
sg83
g673
sg76
(lp1552
g69
(g90
g71
NtRp1553
(dp1554
g74
(dp1555
g94
g95
ssg83
g1549
sg76
(lp1556
S'wsgi_version'
p1557
asbag69
(g90
g71
NtRp1558
(dp1559
g74
(dp1560
g101
g102
ssg83
g1549
sg76
(lp1561
S':'
asbag69
(g90
g71
NtRp1562
(dp1563
g74
(dp1564
sg83
g1549
sg76
(lp1565
g69
(g70
g71
NtRp1566
(dp1567
g74
(dp1568
g82
I4
ssg83
g1562
sg76
(lp1569
g69
(g78
g71
NtRp1570
(dp1571
g74
(dp1572
g82
I3
ssg83
Nsg76
(lp1573
g69
(g85
g71
NtRp1574
(dp1575
g74
(dp1576
sg83
g1570
sg76
(lp1577
g69
(g90
g71
NtRp1578
(dp1579
g74
(dp1580
sg83
g1574
sg76
(lp1581
g69
(g70
g71
NtRp1582
(dp1583
g74
(dp1584
g82
I3
ssg83
g1578
sg76
(lp1585
S'1'
asbasbasbag69
(g85
g71
NtRp1586
(dp1587
g74
(dp1588
sg83
g1570
sg76
(lp1589
g69
(g90
g71
NtRp1590
(dp1591
g74
(dp1592
sg83
g1586
sg76
(lp1593
g69
(g70
g71
NtRp1594
(dp1595
g74
(dp1596
g82
I3
ssg83
g1590
sg76
(lp1597
S'0'
asbasbasbasbasbasbasbasbasbasbasbag69
(g85
g71
NtRp1598
(dp1599
g74
(dp1600
sg83
g79
sg76
(lp1601
g69
(g90
g71
NtRp1602
(dp1603
g74
(dp1604
g94
g95
ssg83
g1598
sg76
(lp1605
S'extension'
p1606
asbag69
(g90
g71
NtRp1607
(dp1608
g74
(dp1609
g101
g102
ssg83
g1598
sg76
(lp1610
S':'
asbag69
(g90
g71
NtRp1611
(dp1612
g74
(dp1613
sg83
g1598
sg76
(lp1614
g69
(g70
g71
NtRp1615
(dp1616
g74
(dp1617
g82
I5
ssg83
g1611
sg76
(lp1618
S'html'
p1619
asbasbasbag69
(g85
g71
NtRp1620
(dp1621
g74
(dp1622
sg83
g79
sg76
(lp1623
g69
(g90
g71
NtRp1624
(dp1625
g74
(dp1626
g94
g95
ssg83
g1620
sg76
(lp1627
S'folder'
p1628
asbag69
(g90
g71
NtRp1629
(dp1630
g74
(dp1631
g101
g102
ssg83
g1620
sg76
(lp1632
S':'
asbag69
(g90
g71
NtRp1633
(dp1634
g74
(dp1635
sg83
g1620
sg76
(lp1636
g69
(g70
g71
NtRp1637
(dp1638
g74
(dp1639
g82
I5
ssg83
g1633
sg76
(lp1640
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/'
p1641
asbasbasbag69
(g85
g71
NtRp1642
(dp1643
g74
(dp1644
sg83
g79
sg76
(lp1645
g69
(g90
g71
NtRp1646
(dp1647
g74
(dp1648
g94
g95
ssg83
g1642
sg76
(lp1649
S'function'
p1650
asbag69
(g90
g71
NtRp1651
(dp1652
g74
(dp1653
g101
g102
ssg83
g1642
sg76
(lp1654
S':'
asbag69
(g90
g71
NtRp1655
(dp1656
g74
(dp1657
sg83
g1642
sg76
(lp1658
g69
(g70
g71
NtRp1659
(dp1660
g74
(dp1661
g82
I5
ssg83
g1655
sg76
(lp1662
S'index'
p1663
asbasbasbag69
(g85
g71
NtRp1664
(dp1665
g74
(dp1666
sg83
g79
sg76
(lp1667
g69
(g90
g71
NtRp1668
(dp1669
g74
(dp1670
g94
g95
ssg83
g1664
sg76
(lp1671
S'get_vars'
p1672
asbag69
(g90
g71
NtRp1673
(dp1674
g74
(dp1675
g101
g102
ssg83
g1664
sg76
(lp1676
S':'
asbag69
(g90
g71
NtRp1677
(dp1678
g74
(dp1679
sg83
g1664
sg76
(lp1680
g69
(g70
g71
NtRp1681
(dp1682
g74
(dp1683
g82
I5
ssg83
g1677
sg76
(lp1684
g69
(g78
g71
NtRp1685
(dp1686
g74
(dp1687
g82
I4
ssg83
Nsg76
(lp1688
sbasbasbasbag69
(g85
g71
NtRp1689
(dp1690
g74
(dp1691
sg83
g79
sg76
(lp1692
g69
(g90
g71
NtRp1693
(dp1694
g74
(dp1695
g94
g95
ssg83
g1689
sg76
(lp1696
S'global_settings'
p1697
asbag69
(g90
g71
NtRp1698
(dp1699
g74
(dp1700
g101
g102
ssg83
g1689
sg76
(lp1701
S':'
asbag69
(g90
g71
NtRp1702
(dp1703
g74
(dp1704
sg83
g1689
sg76
(lp1705
g69
(g70
g71
NtRp1706
(dp1707
g74
(dp1708
g82
I5
ssg83
g1702
sg76
(lp1709
g69
(g78
g71
NtRp1710
(dp1711
g74
(dp1712
g82
I4
ssg83
Nsg76
(lp1713
g69
(g85
g71
NtRp1714
(dp1715
g74
(dp1716
sg83
g1710
sg76
(lp1717
g69
(g90
g71
NtRp1718
(dp1719
g74
(dp1720
g94
g95
ssg83
g1714
sg76
(lp1721
g685
asbag69
(g90
g71
NtRp1722
(dp1723
g74
(dp1724
g101
g102
ssg83
g1714
sg76
(lp1725
S':'
asbag69
(g90
g71
NtRp1726
(dp1727
g74
(dp1728
sg83
g1714
sg76
(lp1729
g69
(g70
g71
NtRp1730
(dp1731
g74
(dp1732
g82
I4
ssg83
g1726
sg76
(lp1733
S"set(['/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/'])"
p1734
asbasbasbag69
(g85
g71
NtRp1735
(dp1736
g74
(dp1737
sg83
g1710
sg76
(lp1738
g69
(g90
g71
NtRp1739
(dp1740
g74
(dp1741
g94
g95
ssg83
g1735
sg76
(lp1742
g707
asbag69
(g90
g71
NtRp1743
(dp1744
g74
(dp1745
g101
g102
ssg83
g1735
sg76
(lp1746
S':'
asbag69
(g90
g71
NtRp1747
(dp1748
g74
(dp1749
sg83
g1735
sg76
(lp1750
g69
(g70
g71
NtRp1751
(dp1752
g74
(dp1753
g82
I4
ssg83
g1747
sg76
(lp1754
g720
asbasbasbag69
(g85
g71
NtRp1755
(dp1756
g74
(dp1757
sg83
g1710
sg76
(lp1758
g69
(g90
g71
NtRp1759
(dp1760
g74
(dp1761
g94
g95
ssg83
g1755
sg76
(lp1762
g729
asbag69
(g90
g71
NtRp1763
(dp1764
g74
(dp1765
g101
g102
ssg83
g1755
sg76
(lp1766
S':'
asbag69
(g90
g71
NtRp1767
(dp1768
g74
(dp1769
sg83
g1755
sg76
(lp1770
g69
(g70
g71
NtRp1771
(dp1772
g74
(dp1773
g82
I4
ssg83
g1767
sg76
(lp1774
g69
(g78
g71
NtRp1775
(dp1776
g74
(dp1777
g82
I3
ssg83
Nsg76
(lp1778
sbasbasbasbag69
(g85
g71
NtRp1779
(dp1780
g74
(dp1781
sg83
g1710
sg76
(lp1782
g69
(g90
g71
NtRp1783
(dp1784
g74
(dp1785
g94
g95
ssg83
g1779
sg76
(lp1786
g754
asbag69
(g90
g71
NtRp1787
(dp1788
g74
(dp1789
g101
g102
ssg83
g1779
sg76
(lp1790
S':'
asbag69
(g90
g71
NtRp1791
(dp1792
g74
(dp1793
sg83
g1779
sg76
(lp1794
g69
(g70
g71
NtRp1795
(dp1796
g74
(dp1797
g82
I4
ssg83
g1791
sg76
(lp1798
S"<Values at 0x9e1a0cc: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/Downloads/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1799
asbasbasbag69
(g85
g71
NtRp1800
(dp1801
g74
(dp1802
sg83
g1710
sg76
(lp1803
g69
(g90
g71
NtRp1804
(dp1805
g74
(dp1806
g94
g95
ssg83
g1800
sg76
(lp1807
g776
asbag69
(g90
g71
NtRp1808
(dp1809
g74
(dp1810
g101
g102
ssg83
g1800
sg76
(lp1811
S':'
asbag69
(g90
g71
NtRp1812
(dp1813
g74
(dp1814
sg83
g1800
sg76
(lp1815
g69
(g70
g71
NtRp1816
(dp1817
g74
(dp1818
g82
I4
ssg83
g1812
sg76
(lp1819
S'set([])'
p1820
asbasbasbag69
(g85
g71
NtRp1821
(dp1822
g74
(dp1823
sg83
g1710
sg76
(lp1824
g69
(g90
g71
NtRp1825
(dp1826
g74
(dp1827
g94
g95
ssg83
g1821
sg76
(lp1828
g798
asbag69
(g90
g71
NtRp1829
(dp1830
g74
(dp1831
g101
g102
ssg83
g1821
sg76
(lp1832
S':'
asbag69
(g90
g71
NtRp1833
(dp1834
g74
(dp1835
sg83
g1821
sg76
(lp1836
g69
(g70
g71
NtRp1837
(dp1838
g74
(dp1839
g82
I4
ssg83
g1833
sg76
(lp1840
g112
asbasbasbag69
(g85
g71
NtRp1841
(dp1842
g74
(dp1843
sg83
g1710
sg76
(lp1844
g69
(g90
g71
NtRp1845
(dp1846
g74
(dp1847
g94
g95
ssg83
g1841
sg76
(lp1848
g819
asbag69
(g90
g71
NtRp1849
(dp1850
g74
(dp1851
g101
g102
ssg83
g1841
sg76
(lp1852
S':'
asbag69
(g90
g71
NtRp1853
(dp1854
g74
(dp1855
sg83
g1841
sg76
(lp1856
g69
(g70
g71
NtRp1857
(dp1858
g74
(dp1859
g82
I4
ssg83
g1853
sg76
(lp1860
g832
asbasbasbag69
(g85
g71
NtRp1861
(dp1862
g74
(dp1863
sg83
g1710
sg76
(lp1864
g69
(g90
g71
NtRp1865
(dp1866
g74
(dp1867
g94
g95
ssg83
g1861
sg76
(lp1868
g1017
asbag69
(g90
g71
NtRp1869
(dp1870
g74
(dp1871
g101
g102
ssg83
g1861
sg76
(lp1872
S':'
asbag69
(g90
g71
NtRp1873
(dp1874
g74
(dp1875
sg83
g1861
sg76
(lp1876
g69
(g70
g71
NtRp1877
(dp1878
g74
(dp1879
g82
I4
ssg83
g1873
sg76
(lp1880
g112
asbasbasbag69
(g85
g71
NtRp1881
(dp1882
g74
(dp1883
sg83
g1710
sg76
(lp1884
g69
(g90
g71
NtRp1885
(dp1886
g74
(dp1887
g94
g95
ssg83
g1881
sg76
(lp1888
g1038
asbag69
(g90
g71
NtRp1889
(dp1890
g74
(dp1891
g101
g102
ssg83
g1881
sg76
(lp1892
S':'
asbag69
(g90
g71
NtRp1893
(dp1894
g74
(dp1895
sg83
g1881
sg76
(lp1896
g69
(g70
g71
NtRp1897
(dp1898
g74
(dp1899
g82
I4
ssg83
g1893
sg76
(lp1900
g112
asbasbasbag69
(g85
g71
NtRp1901
(dp1902
g74
(dp1903
sg83
g1710
sg76
(lp1904
g69
(g90
g71
NtRp1905
(dp1906
g74
(dp1907
g94
g95
ssg83
g1901
sg76
(lp1908
S'local_hosts'
p1909
asbag69
(g90
g71
NtRp1910
(dp1911
g74
(dp1912
g101
g102
ssg83
g1901
sg76
(lp1913
S':'
asbag69
(g90
g71
NtRp1914
(dp1915
g74
(dp1916
sg83
g1901
sg76
(lp1917
g69
(g70
g71
NtRp1918
(dp1919
g74
(dp1920
g82
I4
ssg83
g1914
sg76
(lp1921
g69
(g78
g71
NtRp1922
(dp1923
g74
(dp1924
g82
I3
ssg83
Nsg76
(lp1925
g69
(g85
g71
NtRp1926
(dp1927
g74
(dp1928
sg83
g1922
sg76
(lp1929
g69
(g90
g71
NtRp1930
(dp1931
g74
(dp1932
sg83
g1926
sg76
(lp1933
g69
(g70
g71
NtRp1934
(dp1935
g74
(dp1936
g82
I3
ssg83
g1930
sg76
(lp1937
S'::1'
p1938
asbasbasbag69
(g85
g71
NtRp1939
(dp1940
g74
(dp1941
sg83
g1922
sg76
(lp1942
g69
(g90
g71
NtRp1943
(dp1944
g74
(dp1945
sg83
g1939
sg76
(lp1946
g69
(g70
g71
NtRp1947
(dp1948
g74
(dp1949
g82
I3
ssg83
g1943
sg76
(lp1950
S'127.0.1.1'
p1951
asbasbasbag69
(g85
g71
NtRp1952
(dp1953
g74
(dp1954
sg83
g1922
sg76
(lp1955
g69
(g90
g71
NtRp1956
(dp1957
g74
(dp1958
sg83
g1952
sg76
(lp1959
g69
(g70
g71
NtRp1960
(dp1961
g74
(dp1962
g82
I3
ssg83
g1956
sg76
(lp1963
S'::ffff:127.0.0.1'
p1964
asbasbasbag69
(g85
g71
NtRp1965
(dp1966
g74
(dp1967
sg83
g1922
sg76
(lp1968
g69
(g90
g71
NtRp1969
(dp1970
g74
(dp1971
sg83
g1965
sg76
(lp1972
g69
(g70
g71
NtRp1973
(dp1974
g74
(dp1975
g82
I3
ssg83
g1969
sg76
(lp1976
S'127.0.0.1'
p1977
asbasbasbag69
(g85
g71
NtRp1978
(dp1979
g74
(dp1980
sg83
g1922
sg76
(lp1981
g69
(g90
g71
NtRp1982
(dp1983
g74
(dp1984
sg83
g1978
sg76
(lp1985
g69
(g70
g71
NtRp1986
(dp1987
g74
(dp1988
g82
I3
ssg83
g1982
sg76
(lp1989
S'anil-Inspiron-1525'
p1990
asbasbasbasbasbasbasbag69
(g85
g71
NtRp1991
(dp1992
g74
(dp1993
sg83
g1710
sg76
(lp1994
g69
(g90
g71
NtRp1995
(dp1996
g74
(dp1997
g94
g95
ssg83
g1991
sg76
(lp1998
g1318
asbag69
(g90
g71
NtRp1999
(dp2000
g74
(dp2001
g101
g102
ssg83
g1991
sg76
(lp2002
S':'
asbag69
(g90
g71
NtRp2003
(dp2004
g74
(dp2005
sg83
g1991
sg76
(lp2006
g69
(g70
g71
NtRp2007
(dp2008
g74
(dp2009
g82
I4
ssg83
g2003
sg76
(lp2010
g69
(g78
g71
NtRp2011
(dp2012
g74
(dp2013
g82
I3
ssg83
Nsg76
(lp2014
g69
(g85
g71
NtRp2015
(dp2016
g74
(dp2017
sg83
g2011
sg76
(lp2018
g69
(g90
g71
NtRp2019
(dp2020
g74
(dp2021
sg83
g2015
sg76
(lp2022
g69
(g70
g71
NtRp2023
(dp2024
g74
(dp2025
g82
I3
ssg83
g2019
sg76
(lp2026
S'2'
asbasbasbag69
(g85
g71
NtRp2027
(dp2028
g74
(dp2029
sg83
g2011
sg76
(lp2030
g69
(g90
g71
NtRp2031
(dp2032
g74
(dp2033
sg83
g2027
sg76
(lp2034
g69
(g70
g71
NtRp2035
(dp2036
g74
(dp2037
g82
I3
ssg83
g2031
sg76
(lp2038
S'3'
asbasbasbag69
(g85
g71
NtRp2039
(dp2040
g74
(dp2041
sg83
g2011
sg76
(lp2042
g69
(g90
g71
NtRp2043
(dp2044
g74
(dp2045
sg83
g2039
sg76
(lp2046
g69
(g70
g71
NtRp2047
(dp2048
g74
(dp2049
g82
I3
ssg83
g2043
sg76
(lp2050
S'2'
asbasbasbag69
(g85
g71
NtRp2051
(dp2052
g74
(dp2053
sg83
g2011
sg76
(lp2054
g69
(g90
g71
NtRp2055
(dp2056
g74
(dp2057
sg83
g2051
sg76
(lp2058
g69
(g70
g71
NtRp2059
(dp2060
g74
(dp2061
g82
I3
ssg83
g2055
sg76
(lp2062
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p2063
asbasbasbag69
(g85
g71
NtRp2064
(dp2065
g74
(dp2066
sg83
g2011
sg76
(lp2067
g69
(g90
g71
NtRp2068
(dp2069
g74
(dp2070
sg83
g2064
sg76
(lp2071
g69
(g70
g71
NtRp2072
(dp2073
g74
(dp2074
g82
I3
ssg83
g2068
sg76
(lp2075
g1396
asbasbasbasbasbasbasbasbasbasbasbag69
(g85
g71
NtRp2076
(dp2077
g74
(dp2078
sg83
g79
sg76
(lp2079
g69
(g90
g71
NtRp2080
(dp2081
g74
(dp2082
g94
g95
ssg83
g2076
sg76
(lp2083
S'is_https'
p2084
asbag69
(g90
g71
NtRp2085
(dp2086
g74
(dp2087
g101
g102
ssg83
g2076
sg76
(lp2088
S':'
asbag69
(g90
g71
NtRp2089
(dp2090
g74
(dp2091
sg83
g2076
sg76
(lp2092
g69
(g70
g71
NtRp2093
(dp2094
g74
(dp2095
g82
I5
ssg83
g2089
sg76
(lp2096
g112
asbasbasbag69
(g85
g71
NtRp2097
(dp2098
g74
(dp2099
sg83
g79
sg76
(lp2100
g69
(g90
g71
NtRp2101
(dp2102
g74
(dp2103
g94
g95
ssg83
g2097
sg76
(lp2104
S'is_local'
p2105
asbag69
(g90
g71
NtRp2106
(dp2107
g74
(dp2108
g101
g102
ssg83
g2097
sg76
(lp2109
S':'
asbag69
(g90
g71
NtRp2110
(dp2111
g74
(dp2112
sg83
g2097
sg76
(lp2113
g69
(g70
g71
NtRp2114
(dp2115
g74
(dp2116
g82
I5
ssg83
g2110
sg76
(lp2117
g1505
asbasbasbag69
(g85
g71
NtRp2118
(dp2119
g74
(dp2120
sg83
g79
sg76
(lp2121
g69
(g90
g71
NtRp2122
(dp2123
g74
(dp2124
g94
g95
ssg83
g2118
sg76
(lp2125
S'is_restful'
p2126
asbag69
(g90
g71
NtRp2127
(dp2128
g74
(dp2129
g101
g102
ssg83
g2118
sg76
(lp2130
S':'
asbag69
(g90
g71
NtRp2131
(dp2132
g74
(dp2133
sg83
g2118
sg76
(lp2134
g69
(g70
g71
NtRp2135
(dp2136
g74
(dp2137
g82
I5
ssg83
g2131
sg76
(lp2138
g112
asbasbasbag69
(g85
g71
NtRp2139
(dp2140
g74
(dp2141
sg83
g79
sg76
(lp2142
g69
(g90
g71
NtRp2143
(dp2144
g74
(dp2145
g94
g95
ssg83
g2139
sg76
(lp2146
S'now'
p2147
asbag69
(g90
g71
NtRp2148
(dp2149
g74
(dp2150
g101
g102
ssg83
g2139
sg76
(lp2151
S':'
asbag69
(g90
g71
NtRp2152
(dp2153
g74
(dp2154
sg83
g2139
sg76
(lp2155
g69
(g70
g71
NtRp2156
(dp2157
g74
(dp2158
g82
I5
ssg83
g2152
sg76
(lp2159
S'datetime.datetime(2013, 3, 9, 13, 32, 1, 630850)'
p2160
asbasbasbag69
(g85
g71
NtRp2161
(dp2162
g74
(dp2163
sg83
g79
sg76
(lp2164
g69
(g90
g71
NtRp2165
(dp2166
g74
(dp2167
g94
g95
ssg83
g2161
sg76
(lp2168
S'post_vars'
p2169
asbag69
(g90
g71
NtRp2170
(dp2171
g74
(dp2172
g101
g102
ssg83
g2161
sg76
(lp2173
S':'
asbag69
(g90
g71
NtRp2174
(dp2175
g74
(dp2176
sg83
g2161
sg76
(lp2177
g69
(g70
g71
NtRp2178
(dp2179
g74
(dp2180
g82
I5
ssg83
g2174
sg76
(lp2181
g69
(g78
g71
NtRp2182
(dp2183
g74
(dp2184
g82
I4
ssg83
Nsg76
(lp2185
sbasbasbasbag69
(g85
g71
NtRp2186
(dp2187
g74
(dp2188
sg83
g79
sg76
(lp2189
g69
(g90
g71
NtRp2190
(dp2191
g74
(dp2192
g94
g95
ssg83
g2186
sg76
(lp2193
S'raw_args'
p2194
asbag69
(g90
g71
NtRp2195
(dp2196
g74
(dp2197
g101
g102
ssg83
g2186
sg76
(lp2198
S':'
asbag69
(g90
g71
NtRp2199
(dp2200
g74
(dp2201
sg83
g2186
sg76
(lp2202
g69
(g70
g71
NtRp2203
(dp2204
g74
(dp2205
g82
I5
ssg83
g2199
sg76
(lp2206
S''
asbasbasbag69
(g85
g71
NtRp2207
(dp2208
g74
(dp2209
sg83
g79
sg76
(lp2210
g69
(g90
g71
NtRp2211
(dp2212
g74
(dp2213
g94
g95
ssg83
g2207
sg76
(lp2214
S'raw_extension'
p2215
asbag69
(g90
g71
NtRp2216
(dp2217
g74
(dp2218
g101
g102
ssg83
g2207
sg76
(lp2219
S':'
asbag69
(g90
g71
NtRp2220
(dp2221
g74
(dp2222
sg83
g2207
sg76
(lp2223
g69
(g70
g71
NtRp2224
(dp2225
g74
(dp2226
g82
I5
ssg83
g2220
sg76
(lp2227
S'None'
p2228
asbasbasbag69
(g85
g71
NtRp2229
(dp2230
g74
(dp2231
sg83
g79
sg76
(lp2232
g69
(g90
g71
NtRp2233
(dp2234
g74
(dp2235
g94
g95
ssg83
g2229
sg76
(lp2236
S'url'
p2237
asbag69
(g90
g71
NtRp2238
(dp2239
g74
(dp2240
g101
g102
ssg83
g2229
sg76
(lp2241
S':'
asbag69
(g90
g71
NtRp2242
(dp2243
g74
(dp2244
sg83
g2229
sg76
(lp2245
g69
(g70
g71
NtRp2246
(dp2247
g74
(dp2248
g82
I5
ssg83
g2242
sg76
(lp2249
g1072
asbasbasbag69
(g85
g71
NtRp2250
(dp2251
g74
(dp2252
sg83
g79
sg76
(lp2253
g69
(g90
g71
NtRp2254
(dp2255
g74
(dp2256
g94
g95
ssg83
g2250
sg76
(lp2257
S'utcnow'
p2258
asbag69
(g90
g71
NtRp2259
(dp2260
g74
(dp2261
g101
g102
ssg83
g2250
sg76
(lp2262
S':'
asbag69
(g90
g71
NtRp2263
(dp2264
g74
(dp2265
sg83
g2250
sg76
(lp2266
g69
(g70
g71
NtRp2267
(dp2268
g74
(dp2269
g82
I5
ssg83
g2263
sg76
(lp2270
S'datetime.datetime(2013, 3, 9, 8, 2, 1, 630894)'
p2271
asbasbasbag69
(g85
g71
NtRp2272
(dp2273
g74
(dp2274
sg83
g79
sg76
(lp2275
g69
(g90
g71
NtRp2276
(dp2277
g74
(dp2278
g94
g95
ssg83
g2272
sg76
(lp2279
S'uuid'
p2280
asbag69
(g90
g71
NtRp2281
(dp2282
g74
(dp2283
g101
g102
ssg83
g2272
sg76
(lp2284
S':'
asbag69
(g90
g71
NtRp2285
(dp2286
g74
(dp2287
sg83
g2272
sg76
(lp2288
g69
(g70
g71
NtRp2289
(dp2290
g74
(dp2291
g82
I5
ssg83
g2285
sg76
(lp2292
S'DEV_bootstrap_ch/127.0.0.1.2013-03-09.13-32-01.81145c90-0cdc-4583-b8bd-478ef5e2bd01'
p2293
asbasbasbag69
(g85
g71
NtRp2294
(dp2295
g74
(dp2296
sg83
g79
sg76
(lp2297
g69
(g90
g71
NtRp2298
(dp2299
g74
(dp2300
g94
g95
ssg83
g2294
sg76
(lp2301
S'vars'
p2302
asbag69
(g90
g71
NtRp2303
(dp2304
g74
(dp2305
g101
g102
ssg83
g2294
sg76
(lp2306
S':'
asbag69
(g90
g71
NtRp2307
(dp2308
g74
(dp2309
sg83
g2294
sg76
(lp2310
g69
(g70
g71
NtRp2311
(dp2312
g74
(dp2313
g82
I5
ssg83
g2307
sg76
(lp2314
g69
(g78
g71
NtRp2315
(dp2316
g74
(dp2317
g82
I4
ssg83
Nsg76
(lp2318
sbasbasbasbag69
(g85
g71
NtRp2319
(dp2320
g74
(dp2321
sg83
g79
sg76
(lp2322
g69
(g90
g71
NtRp2323
(dp2324
g74
(dp2325
g94
g95
ssg83
g2319
sg76
(lp2326
S'wsgi'
p2327
asbag69
(g90
g71
NtRp2328
(dp2329
g74
(dp2330
g101
g102
ssg83
g2319
sg76
(lp2331
S':'
asbag69
(g90
g71
NtRp2332
(dp2333
g74
(dp2334
sg83
g2319
sg76
(lp2335
g69
(g70
g71
NtRp2336
(dp2337
g74
(dp2338
g82
I5
ssg83
g2332
sg76
(lp2339
g69
(g78
g71
NtRp2340
(dp2341
g74
(dp2342
g82
I4
ssg83
Nsg76
(lp2343
g69
(g85
g71
NtRp2344
(dp2345
g74
(dp2346
sg83
g2340
sg76
(lp2347
g69
(g90
g71
NtRp2348
(dp2349
g74
(dp2350
g94
g95
ssg83
g2344
sg76
(lp2351
S'environ'
p2352
asbag69
(g90
g71
NtRp2353
(dp2354
g74
(dp2355
g101
g102
ssg83
g2344
sg76
(lp2356
S':'
asbag69
(g90
g71
NtRp2357
(dp2358
g74
(dp2359
sg83
g2344
sg76
(lp2360
g69
(g70
g71
NtRp2361
(dp2362
g74
(dp2363
g82
I4
ssg83
g2357
sg76
(lp2364
g69
(g78
g71
NtRp2365
(dp2366
g74
(dp2367
g82
I3
ssg83
Nsg76
(lp2368
g69
(g85
g71
NtRp2369
(dp2370
g74
(dp2371
sg83
g2365
sg76
(lp2372
g69
(g90
g71
NtRp2373
(dp2374
g74
(dp2375
g94
g95
ssg83
g2369
sg76
(lp2376
S'HTTP_ACCEPT'
p2377
asbag69
(g90
g71
NtRp2378
(dp2379
g74
(dp2380
g101
g102
ssg83
g2369
sg76
(lp2381
S':'
asbag69
(g90
g71
NtRp2382
(dp2383
g74
(dp2384
sg83
g2369
sg76
(lp2385
g69
(g70
g71
NtRp2386
(dp2387
g74
(dp2388
g82
I3
ssg83
g2382
sg76
(lp2389
g854
asbasbasbag69
(g85
g71
NtRp2390
(dp2391
g74
(dp2392
sg83
g2365
sg76
(lp2393
g69
(g90
g71
NtRp2394
(dp2395
g74
(dp2396
g94
g95
ssg83
g2390
sg76
(lp2397
S'HTTP_ACCEPT_CHARSET'
p2398
asbag69
(g90
g71
NtRp2399
(dp2400
g74
(dp2401
g101
g102
ssg83
g2390
sg76
(lp2402
S':'
asbag69
(g90
g71
NtRp2403
(dp2404
g74
(dp2405
sg83
g2390
sg76
(lp2406
g69
(g70
g71
NtRp2407
(dp2408
g74
(dp2409
g82
I3
ssg83
g2403
sg76
(lp2410
g876
asbasbasbag69
(g85
g71
NtRp2411
(dp2412
g74
(dp2413
sg83
g2365
sg76
(lp2414
g69
(g90
g71
NtRp2415
(dp2416
g74
(dp2417
g94
g95
ssg83
g2411
sg76
(lp2418
S'HTTP_ACCEPT_ENCODING'
p2419
asbag69
(g90
g71
NtRp2420
(dp2421
g74
(dp2422
g101
g102
ssg83
g2411
sg76
(lp2423
S':'
asbag69
(g90
g71
NtRp2424
(dp2425
g74
(dp2426
sg83
g2411
sg76
(lp2427
g69
(g70
g71
NtRp2428
(dp2429
g74
(dp2430
g82
I3
ssg83
g2424
sg76
(lp2431
g898
asbasbasbag69
(g85
g71
NtRp2432
(dp2433
g74
(dp2434
sg83
g2365
sg76
(lp2435
g69
(g90
g71
NtRp2436
(dp2437
g74
(dp2438
g94
g95
ssg83
g2432
sg76
(lp2439
S'HTTP_ACCEPT_LANGUAGE'
p2440
asbag69
(g90
g71
NtRp2441
(dp2442
g74
(dp2443
g101
g102
ssg83
g2432
sg76
(lp2444
S':'
asbag69
(g90
g71
NtRp2445
(dp2446
g74
(dp2447
sg83
g2432
sg76
(lp2448
g69
(g70
g71
NtRp2449
(dp2450
g74
(dp2451
g82
I3
ssg83
g2445
sg76
(lp2452
g920
asbasbasbag69
(g85
g71
NtRp2453
(dp2454
g74
(dp2455
sg83
g2365
sg76
(lp2456
g69
(g90
g71
NtRp2457
(dp2458
g74
(dp2459
g94
g95
ssg83
g2453
sg76
(lp2460
S'HTTP_CONNECTION'
p2461
asbag69
(g90
g71
NtRp2462
(dp2463
g74
(dp2464
g101
g102
ssg83
g2453
sg76
(lp2465
S':'
asbag69
(g90
g71
NtRp2466
(dp2467
g74
(dp2468
sg83
g2453
sg76
(lp2469
g69
(g70
g71
NtRp2470
(dp2471
g74
(dp2472
g82
I3
ssg83
g2466
sg76
(lp2473
g942
asbasbasbag69
(g85
g71
NtRp2474
(dp2475
g74
(dp2476
sg83
g2365
sg76
(lp2477
g69
(g90
g71
NtRp2478
(dp2479
g74
(dp2480
g94
g95
ssg83
g2474
sg76
(lp2481
S'HTTP_COOKIE'
p2482
asbag69
(g90
g71
NtRp2483
(dp2484
g74
(dp2485
g101
g102
ssg83
g2474
sg76
(lp2486
S':'
asbag69
(g90
g71
NtRp2487
(dp2488
g74
(dp2489
sg83
g2474
sg76
(lp2490
g69
(g70
g71
NtRp2491
(dp2492
g74
(dp2493
g82
I3
ssg83
g2487
sg76
(lp2494
g964
asbasbasbag69
(g85
g71
NtRp2495
(dp2496
g74
(dp2497
sg83
g2365
sg76
(lp2498
g69
(g90
g71
NtRp2499
(dp2500
g74
(dp2501
g94
g95
ssg83
g2495
sg76
(lp2502
S'HTTP_HOST'
p2503
asbag69
(g90
g71
NtRp2504
(dp2505
g74
(dp2506
g101
g102
ssg83
g2495
sg76
(lp2507
S':'
asbag69
(g90
g71
NtRp2508
(dp2509
g74
(dp2510
sg83
g2495
sg76
(lp2511
g69
(g70
g71
NtRp2512
(dp2513
g74
(dp2514
g82
I3
ssg83
g2508
sg76
(lp2515
g986
asbasbasbag69
(g85
g71
NtRp2516
(dp2517
g74
(dp2518
sg83
g2365
sg76
(lp2519
g69
(g90
g71
NtRp2520
(dp2521
g74
(dp2522
g94
g95
ssg83
g2516
sg76
(lp2523
S'HTTP_USER_AGENT'
p2524
asbag69
(g90
g71
NtRp2525
(dp2526
g74
(dp2527
g101
g102
ssg83
g2516
sg76
(lp2528
S':'
asbag69
(g90
g71
NtRp2529
(dp2530
g74
(dp2531
sg83
g2516
sg76
(lp2532
g69
(g70
g71
NtRp2533
(dp2534
g74
(dp2535
g82
I3
ssg83
g2529
sg76
(lp2536
g1008
asbasbasbag69
(g85
g71
NtRp2537
(dp2538
g74
(dp2539
sg83
g2365
sg76
(lp2540
g69
(g90
g71
NtRp2541
(dp2542
g74
(dp2543
g94
g95
ssg83
g2537
sg76
(lp2544
S'PATH_INFO'
p2545
asbag69
(g90
g71
NtRp2546
(dp2547
g74
(dp2548
g101
g102
ssg83
g2537
sg76
(lp2549
S':'
asbag69
(g90
g71
NtRp2550
(dp2551
g74
(dp2552
sg83
g2537
sg76
(lp2553
g69
(g70
g71
NtRp2554
(dp2555
g74
(dp2556
g82
I3
ssg83
g2550
sg76
(lp2557
g1072
asbasbasbag69
(g85
g71
NtRp2558
(dp2559
g74
(dp2560
sg83
g2365
sg76
(lp2561
g69
(g90
g71
NtRp2562
(dp2563
g74
(dp2564
g94
g95
ssg83
g2558
sg76
(lp2565
S'QUERY_STRING'
p2566
asbag69
(g90
g71
NtRp2567
(dp2568
g74
(dp2569
g101
g102
ssg83
g2558
sg76
(lp2570
S':'
asbag69
(g90
g71
NtRp2571
(dp2572
g74
(dp2573
sg83
g2558
sg76
(lp2574
g69
(g70
g71
NtRp2575
(dp2576
g74
(dp2577
g82
I3
ssg83
g2571
sg76
(lp2578
S''
asbasbasbag69
(g85
g71
NtRp2579
(dp2580
g74
(dp2581
sg83
g2365
sg76
(lp2582
g69
(g90
g71
NtRp2583
(dp2584
g74
(dp2585
g94
g95
ssg83
g2579
sg76
(lp2586
S'REMOTE_ADDR'
p2587
asbag69
(g90
g71
NtRp2588
(dp2589
g74
(dp2590
g101
g102
ssg83
g2579
sg76
(lp2591
S':'
asbag69
(g90
g71
NtRp2592
(dp2593
g74
(dp2594
sg83
g2579
sg76
(lp2595
g69
(g70
g71
NtRp2596
(dp2597
g74
(dp2598
g82
I3
ssg83
g2592
sg76
(lp2599
g224
asbasbasbag69
(g85
g71
NtRp2600
(dp2601
g74
(dp2602
sg83
g2365
sg76
(lp2603
g69
(g90
g71
NtRp2604
(dp2605
g74
(dp2606
g94
g95
ssg83
g2600
sg76
(lp2607
S'REMOTE_PORT'
p2608
asbag69
(g90
g71
NtRp2609
(dp2610
g74
(dp2611
g101
g102
ssg83
g2600
sg76
(lp2612
S':'
asbag69
(g90
g71
NtRp2613
(dp2614
g74
(dp2615
sg83
g2600
sg76
(lp2616
g69
(g70
g71
NtRp2617
(dp2618
g74
(dp2619
g82
I3
ssg83
g2613
sg76
(lp2620
g1136
asbasbasbag69
(g85
g71
NtRp2621
(dp2622
g74
(dp2623
sg83
g2365
sg76
(lp2624
g69
(g90
g71
NtRp2625
(dp2626
g74
(dp2627
g94
g95
ssg83
g2621
sg76
(lp2628
S'REQUEST_METHOD'
p2629
asbag69
(g90
g71
NtRp2630
(dp2631
g74
(dp2632
g101
g102
ssg83
g2621
sg76
(lp2633
S':'
asbag69
(g90
g71
NtRp2634
(dp2635
g74
(dp2636
sg83
g2621
sg76
(lp2637
g69
(g70
g71
NtRp2638
(dp2639
g74
(dp2640
g82
I3
ssg83
g2634
sg76
(lp2641
g1158
asbasbasbag69
(g85
g71
NtRp2642
(dp2643
g74
(dp2644
sg83
g2365
sg76
(lp2645
g69
(g90
g71
NtRp2646
(dp2647
g74
(dp2648
g94
g95
ssg83
g2642
sg76
(lp2649
S'REQUEST_URI'
p2650
asbag69
(g90
g71
NtRp2651
(dp2652
g74
(dp2653
g101
g102
ssg83
g2642
sg76
(lp2654
S':'
asbag69
(g90
g71
NtRp2655
(dp2656
g74
(dp2657
sg83
g2642
sg76
(lp2658
g69
(g70
g71
NtRp2659
(dp2660
g74
(dp2661
g82
I3
ssg83
g2655
sg76
(lp2662
g1072
asbasbasbag69
(g85
g71
NtRp2663
(dp2664
g74
(dp2665
sg83
g2365
sg76
(lp2666
g69
(g90
g71
NtRp2667
(dp2668
g74
(dp2669
g94
g95
ssg83
g2663
sg76
(lp2670
S'SCRIPT_NAME'
p2671
asbag69
(g90
g71
NtRp2672
(dp2673
g74
(dp2674
g101
g102
ssg83
g2663
sg76
(lp2675
S':'
asbag69
(g90
g71
NtRp2676
(dp2677
g74
(dp2678
sg83
g2663
sg76
(lp2679
g69
(g70
g71
NtRp2680
(dp2681
g74
(dp2682
g82
I3
ssg83
g2676
sg76
(lp2683
S''
asbasbasbag69
(g85
g71
NtRp2684
(dp2685
g74
(dp2686
sg83
g2365
sg76
(lp2687
g69
(g90
g71
NtRp2688
(dp2689
g74
(dp2690
g94
g95
ssg83
g2684
sg76
(lp2691
S'SERVER_NAME'
p2692
asbag69
(g90
g71
NtRp2693
(dp2694
g74
(dp2695
g101
g102
ssg83
g2684
sg76
(lp2696
S':'
asbag69
(g90
g71
NtRp2697
(dp2698
g74
(dp2699
sg83
g2684
sg76
(lp2700
g69
(g70
g71
NtRp2701
(dp2702
g74
(dp2703
g82
I3
ssg83
g2697
sg76
(lp2704
g1222
asbasbasbag69
(g85
g71
NtRp2705
(dp2706
g74
(dp2707
sg83
g2365
sg76
(lp2708
g69
(g90
g71
NtRp2709
(dp2710
g74
(dp2711
g94
g95
ssg83
g2705
sg76
(lp2712
S'SERVER_PORT'
p2713
asbag69
(g90
g71
NtRp2714
(dp2715
g74
(dp2716
g101
g102
ssg83
g2705
sg76
(lp2717
S':'
asbag69
(g90
g71
NtRp2718
(dp2719
g74
(dp2720
sg83
g2705
sg76
(lp2721
g69
(g70
g71
NtRp2722
(dp2723
g74
(dp2724
g82
I3
ssg83
g2718
sg76
(lp2725
g1244
asbasbasbag69
(g85
g71
NtRp2726
(dp2727
g74
(dp2728
sg83
g2365
sg76
(lp2729
g69
(g90
g71
NtRp2730
(dp2731
g74
(dp2732
g94
g95
ssg83
g2726
sg76
(lp2733
S'SERVER_PROTOCOL'
p2734
asbag69
(g90
g71
NtRp2735
(dp2736
g74
(dp2737
g101
g102
ssg83
g2726
sg76
(lp2738
S':'
asbag69
(g90
g71
NtRp2739
(dp2740
g74
(dp2741
sg83
g2726
sg76
(lp2742
g69
(g70
g71
NtRp2743
(dp2744
g74
(dp2745
g82
I3
ssg83
g2739
sg76
(lp2746
g1266
asbasbasbag69
(g85
g71
NtRp2747
(dp2748
g74
(dp2749
sg83
g2365
sg76
(lp2750
g69
(g90
g71
NtRp2751
(dp2752
g74
(dp2753
g94
g95
ssg83
g2747
sg76
(lp2754
S'SERVER_SOFTWARE'
p2755
asbag69
(g90
g71
NtRp2756
(dp2757
g74
(dp2758
g101
g102
ssg83
g2747
sg76
(lp2759
S':'
asbag69
(g90
g71
NtRp2760
(dp2761
g74
(dp2762
sg83
g2747
sg76
(lp2763
g69
(g70
g71
NtRp2764
(dp2765
g74
(dp2766
g82
I3
ssg83
g2760
sg76
(lp2767
g1288
asbasbasbag69
(g85
g71
NtRp2768
(dp2769
g74
(dp2770
sg83
g2365
sg76
(lp2771
g69
(g90
g71
NtRp2772
(dp2773
g74
(dp2774
g94
g95
ssg83
g2768
sg76
(lp2775
S'wsgi.errors'
p2776
asbag69
(g90
g71
NtRp2777
(dp2778
g74
(dp2779
g101
g102
ssg83
g2768
sg76
(lp2780
S':'
asbag69
(g90
g71
NtRp2781
(dp2782
g74
(dp2783
sg83
g2768
sg76
(lp2784
g69
(g70
g71
NtRp2785
(dp2786
g74
(dp2787
g82
I3
ssg83
g2781
sg76
(lp2788
S"<open file '<stderr>', mode 'w' at 0xb73110d0>"
p2789
asbasbasbag69
(g85
g71
NtRp2790
(dp2791
g74
(dp2792
sg83
g2365
sg76
(lp2793
g69
(g90
g71
NtRp2794
(dp2795
g74
(dp2796
g94
g95
ssg83
g2790
sg76
(lp2797
S'wsgi.file_wrapper'
p2798
asbag69
(g90
g71
NtRp2799
(dp2800
g74
(dp2801
g101
g102
ssg83
g2790
sg76
(lp2802
S':'
asbag69
(g90
g71
NtRp2803
(dp2804
g74
(dp2805
sg83
g2790
sg76
(lp2806
g69
(g70
g71
NtRp2807
(dp2808
g74
(dp2809
g82
I3
ssg83
g2803
sg76
(lp2810
S'<class wsgiref.util.FileWrapper at 0x9da3b9c>'
p2811
asbasbasbag69
(g85
g71
NtRp2812
(dp2813
g74
(dp2814
sg83
g2365
sg76
(lp2815
g69
(g90
g71
NtRp2816
(dp2817
g74
(dp2818
g94
g95
ssg83
g2812
sg76
(lp2819
S'wsgi.input'
p2820
asbag69
(g90
g71
NtRp2821
(dp2822
g74
(dp2823
g101
g102
ssg83
g2812
sg76
(lp2824
S':'
asbag69
(g90
g71
NtRp2825
(dp2826
g74
(dp2827
sg83
g2812
sg76
(lp2828
g69
(g70
g71
NtRp2829
(dp2830
g74
(dp2831
g82
I3
ssg83
g2825
sg76
(lp2832
S'<cStringIO.StringO object at 0x9e90460>'
p2833
asbasbasbag69
(g85
g71
NtRp2834
(dp2835
g74
(dp2836
sg83
g2365
sg76
(lp2837
g69
(g90
g71
NtRp2838
(dp2839
g74
(dp2840
g94
g95
ssg83
g2834
sg76
(lp2841
S'wsgi.multiprocess'
p2842
asbag69
(g90
g71
NtRp2843
(dp2844
g74
(dp2845
g101
g102
ssg83
g2834
sg76
(lp2846
S':'
asbag69
(g90
g71
NtRp2847
(dp2848
g74
(dp2849
sg83
g2834
sg76
(lp2850
g69
(g70
g71
NtRp2851
(dp2852
g74
(dp2853
g82
I3
ssg83
g2847
sg76
(lp2854
g112
asbasbasbag69
(g85
g71
NtRp2855
(dp2856
g74
(dp2857
sg83
g2365
sg76
(lp2858
g69
(g90
g71
NtRp2859
(dp2860
g74
(dp2861
g94
g95
ssg83
g2855
sg76
(lp2862
S'wsgi.multithread'
p2863
asbag69
(g90
g71
NtRp2864
(dp2865
g74
(dp2866
g101
g102
ssg83
g2855
sg76
(lp2867
S':'
asbag69
(g90
g71
NtRp2868
(dp2869
g74
(dp2870
sg83
g2855
sg76
(lp2871
g69
(g70
g71
NtRp2872
(dp2873
g74
(dp2874
g82
I3
ssg83
g2868
sg76
(lp2875
g1505
asbasbasbag69
(g85
g71
NtRp2876
(dp2877
g74
(dp2878
sg83
g2365
sg76
(lp2879
g69
(g90
g71
NtRp2880
(dp2881
g74
(dp2882
g94
g95
ssg83
g2876
sg76
(lp2883
S'wsgi.run_once'
p2884
asbag69
(g90
g71
NtRp2885
(dp2886
g74
(dp2887
g101
g102
ssg83
g2876
sg76
(lp2888
S':'
asbag69
(g90
g71
NtRp2889
(dp2890
g74
(dp2891
sg83
g2876
sg76
(lp2892
g69
(g70
g71
NtRp2893
(dp2894
g74
(dp2895
g82
I3
ssg83
g2889
sg76
(lp2896
g112
asbasbasbag69
(g85
g71
NtRp2897
(dp2898
g74
(dp2899
sg83
g2365
sg76
(lp2900
g69
(g90
g71
NtRp2901
(dp2902
g74
(dp2903
g94
g95
ssg83
g2897
sg76
(lp2904
S'wsgi.url_scheme'
p2905
asbag69
(g90
g71
NtRp2906
(dp2907
g74
(dp2908
g101
g102
ssg83
g2897
sg76
(lp2909
S':'
asbag69
(g90
g71
NtRp2910
(dp2911
g74
(dp2912
sg83
g2897
sg76
(lp2913
g69
(g70
g71
NtRp2914
(dp2915
g74
(dp2916
g82
I3
ssg83
g2910
sg76
(lp2917
g1548
asbasbasbag69
(g85
g71
NtRp2918
(dp2919
g74
(dp2920
sg83
g2365
sg76
(lp2921
g69
(g90
g71
NtRp2922
(dp2923
g74
(dp2924
g94
g95
ssg83
g2918
sg76
(lp2925
S'wsgi.version'
p2926
asbag69
(g90
g71
NtRp2927
(dp2928
g74
(dp2929
g101
g102
ssg83
g2918
sg76
(lp2930
S':'
asbag69
(g90
g71
NtRp2931
(dp2932
g74
(dp2933
sg83
g2918
sg76
(lp2934
g69
(g70
g71
NtRp2935
(dp2936
g74
(dp2937
g82
I3
ssg83
g2931
sg76
(lp2938
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p2939
(lp2940
(dp2941
S'file'
p2942
S'/home/anil/Downloads/web2py/gluon/restricted.py'
p2943
sS'dump'
p2944
(dp2945
S'code'
p2946
S"'# -*- coding: utf-8 -*-\\n# this file is released ...cals()\\n\\n\\n\\nresponse._vars=response._caller(index)\\n'"
p2947
sS'layer'
p2948
S"'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'"
p2949
sS'global compile2'
p2950
S'<function compile2>'
p2951
sS'ccode'
p2952
S'undefined'
p2953
ssS'lnum'
p2954
I211
sS'lines'
p2955
(dp2956
I206
S"    environment['__name__'] = '__restricted__'"
p2957
sI207
S'    try:'
p2958
sI208
S'        if isinstance(code, types.CodeType):'
p2959
sI209
S'            ccode = code'
p2960
sI210
S'        else:'
p2961
sI211
S'            ccode = compile2(code, layer)'
p2962
sI212
S'        exec ccode in environment'
p2963
sI213
S'    except HTTP:'
p2964
sI214
S'        raise'
p2965
sI215
S'    except RestrictedError:'
p2966
ssS'call'
p2967
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...cals()\\n\\n\\n\\nresponse._vars=response._caller(index)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}, layer='/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py')"
p2968
sS'func'
p2969
S'restricted'
p2970
sa(dp2971
g2942
S'/home/anil/Downloads/web2py/gluon/restricted.py'
p2972
sg2944
(dp2973
S'builtincompile'
p2974
S'<built-in function compile>'
p2975
sS'code'
p2976
S"'# -*- coding: utf-8 -*-\\n# this file is released ...cals()\\n\\n\\n\\nresponse._vars=response._caller(index)\\n'"
p2977
sS'code.rstrip'
p2978
S'<built-in method rstrip of str object>'
p2979
sS').replace'
p2980
g2953
sS'layer'
p2981
S"'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'"
p2982
ssg2954
I194
sg2955
(dp2983
I192
S"    The +'\\n' is necessary else compile fails when code ends in a comment."
p2984
sI193
S'    """'
p2985
sI194
S"    return compile(code.rstrip().replace('\\r\\n', '\\n') + '\\n', layer, 'exec')"
p2986
sI195
S''
sI196
S''
sI197
S"def restricted(code, environment=None, layer='Unknown'):"
p2987
sI198
S'    """'
p2988
sI189
S''
sI190
S'def compile2(code, layer):'
p2989
sI191
S'    """'
p2990
ssg2967
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...cals()\\n\\n\\n\\nresponse._vars=response._caller(index)\\n', layer='/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py')"
p2991
sg2969
S'compile2'
p2992
sasS'pyver'
p2993
S'Python 2.7.3: /usr/bin/python'
p2994
sS'session'
p2995
g69
(g70
g71
NtRp2996
(dp2997
g74
(dp2998
sg76
(lp2999
g69
(g78
g71
NtRp3000
(dp3001
g74
(dp3002
g82
I5
ssg83
Nsg76
(lp3003
g69
(g85
g71
NtRp3004
(dp3005
g74
(dp3006
sg83
g3000
sg76
(lp3007
g69
(g90
g71
NtRp3008
(dp3009
g74
(dp3010
g94
g95
ssg83
g3004
sg76
(lp3011
S'flash'
p3012
asbag69
(g90
g71
NtRp3013
(dp3014
g74
(dp3015
g101
g102
ssg83
g3004
sg76
(lp3016
S':'
asbag69
(g90
g71
NtRp3017
(dp3018
g74
(dp3019
sg83
g3004
sg76
(lp3020
g69
(g70
g71
NtRp3021
(dp3022
g74
(dp3023
g82
I5
ssg83
g3017
sg76
(lp3024
S'None'
p3025
asbasbasbag69
(g85
g71
NtRp3026
(dp3027
g74
(dp3028
sg83
g3000
sg76
(lp3029
g69
(g90
g71
NtRp3030
(dp3031
g74
(dp3032
g94
g95
ssg83
g3026
sg76
(lp3033
S'last_orderby'
p3034
asbag69
(g90
g71
NtRp3035
(dp3036
g74
(dp3037
g101
g102
ssg83
g3026
sg76
(lp3038
S':'
asbag69
(g90
g71
NtRp3039
(dp3040
g74
(dp3041
sg83
g3026
sg76
(lp3042
g69
(g70
g71
NtRp3043
(dp3044
g74
(dp3045
g82
I5
ssg83
g3039
sg76
(lp3046
S'None'
p3047
asbasbasbag69
(g85
g71
NtRp3048
(dp3049
g74
(dp3050
sg83
g3000
sg76
(lp3051
g69
(g90
g71
NtRp3052
(dp3053
g74
(dp3054
g94
g95
ssg83
g3048
sg76
(lp3055
S'last_query'
p3056
asbag69
(g90
g71
NtRp3057
(dp3058
g74
(dp3059
g101
g102
ssg83
g3048
sg76
(lp3060
S':'
asbag69
(g90
g71
NtRp3061
(dp3062
g74
(dp3063
sg83
g3048
sg76
(lp3064
g69
(g70
g71
NtRp3065
(dp3066
g74
(dp3067
g82
I5
ssg83
g3061
sg76
(lp3068
S'db.project.id>0'
p3069
asbasbasbasbasbsS'etype'
p3070
S"<type 'exceptions.SyntaxError'>"
p3071
sS'date'
p3072
S'Sat Mar  9 13:32:02 2013'
p3073
sS'response'
p3074
g69
(g70
g71
NtRp3075
(dp3076
g74
(dp3077
sg76
(lp3078
g69
(g78
g71
NtRp3079
(dp3080
g74
(dp3081
g82
I5
ssg83
Nsg76
(lp3082
g69
(g85
g71
NtRp3083
(dp3084
g74
(dp3085
sg83
g3079
sg76
(lp3086
g69
(g90
g71
NtRp3087
(dp3088
g74
(dp3089
g94
g95
ssg83
g3083
sg76
(lp3090
g167
asbag69
(g90
g71
NtRp3091
(dp3092
g74
(dp3093
g101
g102
ssg83
g3083
sg76
(lp3094
S':'
asbag69
(g90
g71
NtRp3095
(dp3096
g74
(dp3097
sg83
g3083
sg76
(lp3098
g69
(g70
g71
NtRp3099
(dp3100
g74
(dp3101
g82
I5
ssg83
g3095
sg76
(lp3102
S'<cStringIO.StringO object at 0x9e90e20>'
p3103
asbasbasbag69
(g85
g71
NtRp3104
(dp3105
g74
(dp3106
sg83
g3079
sg76
(lp3107
g69
(g90
g71
NtRp3108
(dp3109
g74
(dp3110
g94
g95
ssg83
g3104
sg76
(lp3111
g255
asbag69
(g90
g71
NtRp3112
(dp3113
g74
(dp3114
g101
g102
ssg83
g3104
sg76
(lp3115
S':'
asbag69
(g90
g71
NtRp3116
(dp3117
g74
(dp3118
sg83
g3104
sg76
(lp3119
g69
(g70
g71
NtRp3120
(dp3121
g74
(dp3122
g82
I5
ssg83
g3116
sg76
(lp3123
g69
(g78
g71
NtRp3124
(dp3125
g74
(dp3126
g82
I4
ssg83
Nsg76
(lp3127
g69
(g85
g71
NtRp3128
(dp3129
g74
(dp3130
sg83
g3124
sg76
(lp3131
g69
(g90
g71
NtRp3132
(dp3133
g74
(dp3134
g94
g95
ssg83
g3128
sg76
(lp3135
S'session_id_dev_bootstrap_ch'
p3136
asbag69
(g90
g71
NtRp3137
(dp3138
g74
(dp3139
g101
g102
ssg83
g3128
sg76
(lp3140
S':'
asbag69
(g90
g71
NtRp3141
(dp3142
g74
(dp3143
sg83
g3128
sg76
(lp3144
g69
(g70
g71
NtRp3145
(dp3146
g74
(dp3147
g82
I4
ssg83
g3141
sg76
(lp3148
g487
ag69
(g78
g71
NtRp3149
(dp3150
g74
(dp3151
g82
I3
ssg83
Nsg76
(lp3152
g69
(g85
g71
NtRp3153
(dp3154
g74
(dp3155
sg83
g3149
sg76
(lp3156
g69
(g90
g71
NtRp3157
(dp3158
g74
(dp3159
g94
g95
ssg83
g3153
sg76
(lp3160
g306
asbag69
(g90
g71
NtRp3161
(dp3162
g74
(dp3163
g101
g102
ssg83
g3153
sg76
(lp3164
S':'
asbag69
(g90
g71
NtRp3165
(dp3166
g74
(dp3167
sg83
g3153
sg76
(lp3168
g69
(g70
g71
NtRp3169
(dp3170
g74
(dp3171
g82
I3
ssg83
g3165
sg76
(lp3172
S''
asbasbasbag69
(g85
g71
NtRp3173
(dp3174
g74
(dp3175
sg83
g3149
sg76
(lp3176
g69
(g90
g71
NtRp3177
(dp3178
g74
(dp3179
g94
g95
ssg83
g3173
sg76
(lp3180
g327
asbag69
(g90
g71
NtRp3181
(dp3182
g74
(dp3183
g101
g102
ssg83
g3173
sg76
(lp3184
S':'
asbag69
(g90
g71
NtRp3185
(dp3186
g74
(dp3187
sg83
g3173
sg76
(lp3188
g69
(g70
g71
NtRp3189
(dp3190
g74
(dp3191
g82
I3
ssg83
g3185
sg76
(lp3192
S''
asbasbasbag69
(g85
g71
NtRp3193
(dp3194
g74
(dp3195
sg83
g3149
sg76
(lp3196
g69
(g90
g71
NtRp3197
(dp3198
g74
(dp3199
g94
g95
ssg83
g3193
sg76
(lp3200
g348
asbag69
(g90
g71
NtRp3201
(dp3202
g74
(dp3203
g101
g102
ssg83
g3193
sg76
(lp3204
S':'
asbag69
(g90
g71
NtRp3205
(dp3206
g74
(dp3207
sg83
g3193
sg76
(lp3208
g69
(g70
g71
NtRp3209
(dp3210
g74
(dp3211
g82
I3
ssg83
g3205
sg76
(lp3212
S''
asbasbasbag69
(g85
g71
NtRp3213
(dp3214
g74
(dp3215
sg83
g3149
sg76
(lp3216
g69
(g90
g71
NtRp3217
(dp3218
g74
(dp3219
g94
g95
ssg83
g3213
sg76
(lp3220
g369
asbag69
(g90
g71
NtRp3221
(dp3222
g74
(dp3223
g101
g102
ssg83
g3213
sg76
(lp3224
S':'
asbag69
(g90
g71
NtRp3225
(dp3226
g74
(dp3227
sg83
g3213
sg76
(lp3228
g69
(g70
g71
NtRp3229
(dp3230
g74
(dp3231
g82
I3
ssg83
g3225
sg76
(lp3232
S''
asbasbasbag69
(g85
g71
NtRp3233
(dp3234
g74
(dp3235
sg83
g3149
sg76
(lp3236
g69
(g90
g71
NtRp3237
(dp3238
g74
(dp3239
g94
g95
ssg83
g3233
sg76
(lp3240
g390
asbag69
(g90
g71
NtRp3241
(dp3242
g74
(dp3243
g101
g102
ssg83
g3233
sg76
(lp3244
S':'
asbag69
(g90
g71
NtRp3245
(dp3246
g74
(dp3247
sg83
g3233
sg76
(lp3248
g69
(g70
g71
NtRp3249
(dp3250
g74
(dp3251
g82
I3
ssg83
g3245
sg76
(lp3252
S''
asbasbasbag69
(g85
g71
NtRp3253
(dp3254
g74
(dp3255
sg83
g3149
sg76
(lp3256
g69
(g90
g71
NtRp3257
(dp3258
g74
(dp3259
g94
g95
ssg83
g3253
sg76
(lp3260
g411
asbag69
(g90
g71
NtRp3261
(dp3262
g74
(dp3263
g101
g102
ssg83
g3253
sg76
(lp3264
S':'
asbag69
(g90
g71
NtRp3265
(dp3266
g74
(dp3267
sg83
g3253
sg76
(lp3268
g69
(g70
g71
NtRp3269
(dp3270
g74
(dp3271
g82
I3
ssg83
g3265
sg76
(lp3272
S'/'
asbasbasbag69
(g85
g71
NtRp3273
(dp3274
g74
(dp3275
sg83
g3149
sg76
(lp3276
g69
(g90
g71
NtRp3277
(dp3278
g74
(dp3279
g94
g95
ssg83
g3273
sg76
(lp3280
g432
asbag69
(g90
g71
NtRp3281
(dp3282
g74
(dp3283
g101
g102
ssg83
g3273
sg76
(lp3284
S':'
asbag69
(g90
g71
NtRp3285
(dp3286
g74
(dp3287
sg83
g3273
sg76
(lp3288
g69
(g70
g71
NtRp3289
(dp3290
g74
(dp3291
g82
I3
ssg83
g3285
sg76
(lp3292
S''
asbasbasbag69
(g85
g71
NtRp3293
(dp3294
g74
(dp3295
sg83
g3149
sg76
(lp3296
g69
(g90
g71
NtRp3297
(dp3298
g74
(dp3299
g94
g95
ssg83
g3293
sg76
(lp3300
g453
asbag69
(g90
g71
NtRp3301
(dp3302
g74
(dp3303
g101
g102
ssg83
g3293
sg76
(lp3304
S':'
asbag69
(g90
g71
NtRp3305
(dp3306
g74
(dp3307
sg83
g3293
sg76
(lp3308
g69
(g70
g71
NtRp3309
(dp3310
g74
(dp3311
g82
I3
ssg83
g3305
sg76
(lp3312
S''
asbasbasbasbasbasbasbasbasbasbasbag69
(g85
g71
NtRp3313
(dp3314
g74
(dp3315
sg83
g3079
sg76
(lp3316
g69
(g90
g71
NtRp3317
(dp3318
g74
(dp3319
g94
g95
ssg83
g3313
sg76
(lp3320
S'delimiters'
p3321
asbag69
(g90
g71
NtRp3322
(dp3323
g74
(dp3324
g101
g102
ssg83
g3313
sg76
(lp3325
S':'
asbag69
(g90
g71
NtRp3326
(dp3327
g74
(dp3328
sg83
g3313
sg76
(lp3329
g69
(g70
g71
NtRp3330
(dp3331
g74
(dp3332
g82
I5
ssg83
g3326
sg76
(lp3333
g69
(g78
g71
NtRp3334
(dp3335
g74
(dp3336
g82
I4
ssg83
Nsg76
(lp3337
g69
(g85
g71
NtRp3338
(dp3339
g74
(dp3340
sg83
g3334
sg76
(lp3341
g69
(g90
g71
NtRp3342
(dp3343
g74
(dp3344
sg83
g3338
sg76
(lp3345
g69
(g70
g71
NtRp3346
(dp3347
g74
(dp3348
g82
I4
ssg83
g3342
sg76
(lp3349
S'{{'
p3350
asbasbasbag69
(g85
g71
NtRp3351
(dp3352
g74
(dp3353
sg83
g3334
sg76
(lp3354
g69
(g90
g71
NtRp3355
(dp3356
g74
(dp3357
sg83
g3351
sg76
(lp3358
g69
(g70
g71
NtRp3359
(dp3360
g74
(dp3361
g82
I4
ssg83
g3355
sg76
(lp3362
S'}}'
p3363
asbasbasbasbasbasbasbag69
(g85
g71
NtRp3364
(dp3365
g74
(dp3366
sg83
g3079
sg76
(lp3367
g69
(g90
g71
NtRp3368
(dp3369
g74
(dp3370
g94
g95
ssg83
g3364
sg76
(lp3371
S'files'
p3372
asbag69
(g90
g71
NtRp3373
(dp3374
g74
(dp3375
g101
g102
ssg83
g3364
sg76
(lp3376
S':'
asbag69
(g90
g71
NtRp3377
(dp3378
g74
(dp3379
sg83
g3364
sg76
(lp3380
g69
(g70
g71
NtRp3381
(dp3382
g74
(dp3383
g82
I5
ssg83
g3377
sg76
(lp3384
g69
(g78
g71
NtRp3385
(dp3386
g74
(dp3387
g82
I4
ssg83
Nsg76
(lp3388
g69
(g85
g71
NtRp3389
(dp3390
g74
(dp3391
sg83
g3385
sg76
(lp3392
g69
(g90
g71
NtRp3393
(dp3394
g74
(dp3395
sg83
g3389
sg76
(lp3396
g69
(g70
g71
NtRp3397
(dp3398
g74
(dp3399
g82
I4
ssg83
g3393
sg76
(lp3400
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/css/redmond/jquery-ui-1.8.5.custom.css'
p3401
asbasbasbag69
(g85
g71
NtRp3402
(dp3403
g74
(dp3404
sg83
g3385
sg76
(lp3405
g69
(g90
g71
NtRp3406
(dp3407
g74
(dp3408
sg83
g3402
sg76
(lp3409
g69
(g70
g71
NtRp3410
(dp3411
g74
(dp3412
g82
I4
ssg83
g3406
sg76
(lp3413
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/js/jquery-ui-1.8.5.custom.min.js'
p3414
asbasbasbag69
(g85
g71
NtRp3415
(dp3416
g74
(dp3417
sg83
g3385
sg76
(lp3418
g69
(g90
g71
NtRp3419
(dp3420
g74
(dp3421
sg83
g3415
sg76
(lp3422
g69
(g70
g71
NtRp3423
(dp3424
g74
(dp3425
g82
I4
ssg83
g3419
sg76
(lp3426
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/ui.jqgrid.css'
p3427
asbasbasbag69
(g85
g71
NtRp3428
(dp3429
g74
(dp3430
sg83
g3385
sg76
(lp3431
g69
(g90
g71
NtRp3432
(dp3433
g74
(dp3434
sg83
g3428
sg76
(lp3435
g69
(g70
g71
NtRp3436
(dp3437
g74
(dp3438
g82
I4
ssg83
g3432
sg76
(lp3439
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/i18n/grid.locale-en.js'
p3440
asbasbasbag69
(g85
g71
NtRp3441
(dp3442
g74
(dp3443
sg83
g3385
sg76
(lp3444
g69
(g90
g71
NtRp3445
(dp3446
g74
(dp3447
sg83
g3441
sg76
(lp3448
g69
(g70
g71
NtRp3449
(dp3450
g74
(dp3451
g82
I4
ssg83
g3445
sg76
(lp3452
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/jquery.jqGrid.min.js'
p3453
asbasbasbag69
(g85
g71
NtRp3454
(dp3455
g74
(dp3456
sg83
g3385
sg76
(lp3457
g69
(g90
g71
NtRp3458
(dp3459
g74
(dp3460
sg83
g3454
sg76
(lp3461
g69
(g70
g71
NtRp3462
(dp3463
g74
(dp3464
g82
I4
ssg83
g3458
sg76
(lp3465
S'/DEV_bootstrap_ch/static/plugin_wiki/slideshow/jquery.cycle.min.js'
p3466
asbasbasbag69
(g85
g71
NtRp3467
(dp3468
g74
(dp3469
sg83
g3385
sg76
(lp3470
g69
(g90
g71
NtRp3471
(dp3472
g74
(dp3473
sg83
g3467
sg76
(lp3474
g69
(g70
g71
NtRp3475
(dp3476
g74
(dp3477
g82
I4
ssg83
g3471
sg76
(lp3478
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.css'
p3479
asbasbasbag69
(g85
g71
NtRp3480
(dp3481
g74
(dp3482
sg83
g3385
sg76
(lp3483
g69
(g90
g71
NtRp3484
(dp3485
g74
(dp3486
sg83
g3480
sg76
(lp3487
g69
(g70
g71
NtRp3488
(dp3489
g74
(dp3490
g82
I4
ssg83
g3484
sg76
(lp3491
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.js'
p3492
asbasbasbag69
(g85
g71
NtRp3493
(dp3494
g74
(dp3495
sg83
g3385
sg76
(lp3496
g69
(g90
g71
NtRp3497
(dp3498
g74
(dp3499
sg83
g3493
sg76
(lp3500
g69
(g70
g71
NtRp3501
(dp3502
g74
(dp3503
g82
I4
ssg83
g3497
sg76
(lp3504
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.css'
p3505
asbasbasbag69
(g85
g71
NtRp3506
(dp3507
g74
(dp3508
sg83
g3385
sg76
(lp3509
g69
(g90
g71
NtRp3510
(dp3511
g74
(dp3512
sg83
g3506
sg76
(lp3513
g69
(g70
g71
NtRp3514
(dp3515
g74
(dp3516
g82
I4
ssg83
g3510
sg76
(lp3517
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.js'
p3518
asbasbasbasbasbasbasbag69
(g85
g71
NtRp3519
(dp3520
g74
(dp3521
sg83
g3079
sg76
(lp3522
g69
(g90
g71
NtRp3523
(dp3524
g74
(dp3525
g94
g95
ssg83
g3519
sg76
(lp3526
S'flash'
p3527
asbag69
(g90
g71
NtRp3528
(dp3529
g74
(dp3530
g101
g102
ssg83
g3519
sg76
(lp3531
S':'
asbag69
(g90
g71
NtRp3532
(dp3533
g74
(dp3534
sg83
g3519
sg76
(lp3535
g69
(g70
g71
NtRp3536
(dp3537
g74
(dp3538
g82
I5
ssg83
g3532
sg76
(lp3539
S''
asbasbasbag69
(g85
g71
NtRp3540
(dp3541
g74
(dp3542
sg83
g3079
sg76
(lp3543
g69
(g90
g71
NtRp3544
(dp3545
g74
(dp3546
g94
g95
ssg83
g3540
sg76
(lp3547
S'generic_patterns'
p3548
asbag69
(g90
g71
NtRp3549
(dp3550
g74
(dp3551
g101
g102
ssg83
g3540
sg76
(lp3552
S':'
asbag69
(g90
g71
NtRp3553
(dp3554
g74
(dp3555
sg83
g3540
sg76
(lp3556
g69
(g70
g71
NtRp3557
(dp3558
g74
(dp3559
g82
I5
ssg83
g3553
sg76
(lp3560
g69
(g78
g71
NtRp3561
(dp3562
g74
(dp3563
g82
I4
ssg83
Nsg76
(lp3564
g69
(g85
g71
NtRp3565
(dp3566
g74
(dp3567
sg83
g3561
sg76
(lp3568
g69
(g90
g71
NtRp3569
(dp3570
g74
(dp3571
sg83
g3565
sg76
(lp3572
g69
(g70
g71
NtRp3573
(dp3574
g74
(dp3575
g82
I4
ssg83
g3569
sg76
(lp3576
S'*'
asbasbasbasbasbasbasbag69
(g85
g71
NtRp3577
(dp3578
g74
(dp3579
sg83
g3079
sg76
(lp3580
g69
(g90
g71
NtRp3581
(dp3582
g74
(dp3583
g94
g95
ssg83
g3577
sg76
(lp3584
S'google_analytics_id'
p3585
asbag69
(g90
g71
NtRp3586
(dp3587
g74
(dp3588
g101
g102
ssg83
g3577
sg76
(lp3589
S':'
asbag69
(g90
g71
NtRp3590
(dp3591
g74
(dp3592
sg83
g3577
sg76
(lp3593
g69
(g70
g71
NtRp3594
(dp3595
g74
(dp3596
g82
I5
ssg83
g3590
sg76
(lp3597
S'None'
p3598
asbasbasbag69
(g85
g71
NtRp3599
(dp3600
g74
(dp3601
sg83
g3079
sg76
(lp3602
g69
(g90
g71
NtRp3603
(dp3604
g74
(dp3605
g94
g95
ssg83
g3599
sg76
(lp3606
S'headers'
p3607
asbag69
(g90
g71
NtRp3608
(dp3609
g74
(dp3610
g101
g102
ssg83
g3599
sg76
(lp3611
S':'
asbag69
(g90
g71
NtRp3612
(dp3613
g74
(dp3614
sg83
g3599
sg76
(lp3615
g69
(g70
g71
NtRp3616
(dp3617
g74
(dp3618
g82
I5
ssg83
g3612
sg76
(lp3619
g69
(g78
g71
NtRp3620
(dp3621
g74
(dp3622
g82
I4
ssg83
Nsg76
(lp3623
g69
(g85
g71
NtRp3624
(dp3625
g74
(dp3626
sg83
g3620
sg76
(lp3627
g69
(g90
g71
NtRp3628
(dp3629
g74
(dp3630
g94
g95
ssg83
g3624
sg76
(lp3631
S'X-Powered-By'
p3632
asbag69
(g90
g71
NtRp3633
(dp3634
g74
(dp3635
g101
g102
ssg83
g3624
sg76
(lp3636
S':'
asbag69
(g90
g71
NtRp3637
(dp3638
g74
(dp3639
sg83
g3624
sg76
(lp3640
g69
(g70
g71
NtRp3641
(dp3642
g74
(dp3643
g82
I4
ssg83
g3637
sg76
(lp3644
S'web2py'
p3645
asbasbasbasbasbasbasbag69
(g85
g71
NtRp3646
(dp3647
g74
(dp3648
sg83
g3079
sg76
(lp3649
g69
(g90
g71
NtRp3650
(dp3651
g74
(dp3652
g94
g95
ssg83
g3646
sg76
(lp3653
S'menu'
p3654
asbag69
(g90
g71
NtRp3655
(dp3656
g74
(dp3657
g101
g102
ssg83
g3646
sg76
(lp3658
S':'
asbag69
(g90
g71
NtRp3659
(dp3660
g74
(dp3661
sg83
g3646
sg76
(lp3662
g69
(g70
g71
NtRp3663
(dp3664
g74
(dp3665
g82
I5
ssg83
g3659
sg76
(lp3666
g69
(g78
g71
NtRp3667
(dp3668
g74
(dp3669
g82
I4
ssg83
Nsg76
(lp3670
g69
(g85
g71
NtRp3671
(dp3672
g74
(dp3673
sg83
g3667
sg76
(lp3674
g69
(g90
g71
NtRp3675
(dp3676
g74
(dp3677
sg83
g3671
sg76
(lp3678
g69
(g70
g71
NtRp3679
(dp3680
g74
(dp3681
g82
I4
ssg83
g3675
sg76
(lp3682
g69
(g78
g71
NtRp3683
(dp3684
g74
(dp3685
g82
I3
ssg83
Nsg76
(lp3686
g69
(g85
g71
NtRp3687
(dp3688
g74
(dp3689
sg83
g3683
sg76
(lp3690
g69
(g90
g71
NtRp3691
(dp3692
g74
(dp3693
sg83
g3687
sg76
(lp3694
g69
(g70
g71
NtRp3695
(dp3696
g74
(dp3697
g82
I3
ssg83
g3691
sg76
(lp3698
cgluon.languages
lazyT_unpickle
p3699
(S't\x04\x00\x00\x00Home'
tRp3700
asbasbasbag69
(g85
g71
NtRp3701
(dp3702
g74
(dp3703
sg83
g3683
sg76
(lp3704
g69
(g90
g71
NtRp3705
(dp3706
g74
(dp3707
sg83
g3701
sg76
(lp3708
g69
(g70
g71
NtRp3709
(dp3710
g74
(dp3711
g82
I3
ssg83
g3705
sg76
(lp3712
g112
asbasbasbag69
(g85
g71
NtRp3713
(dp3714
g74
(dp3715
sg83
g3683
sg76
(lp3716
g69
(g90
g71
NtRp3717
(dp3718
g74
(dp3719
sg83
g3713
sg76
(lp3720
g69
(g70
g71
NtRp3721
(dp3722
g74
(dp3723
g82
I3
ssg83
g3717
sg76
(lp3724
S'/DEV_bootstrap_ch/default/list_all_projects'
p3725
asbasbasbag69
(g85
g71
NtRp3726
(dp3727
g74
(dp3728
sg83
g3683
sg76
(lp3729
g69
(g90
g71
NtRp3730
(dp3731
g74
(dp3732
sg83
g3726
sg76
(lp3733
g69
(g70
g71
NtRp3734
(dp3735
g74
(dp3736
g82
I3
ssg83
g3730
sg76
(lp3737
g69
(g78
g71
NtRp3738
(dp3739
g74
(dp3740
g82
I2
ssg83
Nsg76
(lp3741
sbasbasbasbasbasbasbasbag69
(g85
g71
NtRp3742
(dp3743
g74
(dp3744
sg83
g3667
sg76
(lp3745
g69
(g90
g71
NtRp3746
(dp3747
g74
(dp3748
sg83
g3742
sg76
(lp3749
g69
(g70
g71
NtRp3750
(dp3751
g74
(dp3752
g82
I4
ssg83
g3746
sg76
(lp3753
g69
(g78
g71
NtRp3754
(dp3755
g74
(dp3756
g82
I3
ssg83
Nsg76
(lp3757
g69
(g85
g71
NtRp3758
(dp3759
g74
(dp3760
sg83
g3754
sg76
(lp3761
g69
(g90
g71
NtRp3762
(dp3763
g74
(dp3764
sg83
g3758
sg76
(lp3765
g69
(g70
g71
NtRp3766
(dp3767
g74
(dp3768
g82
I3
ssg83
g3762
sg76
(lp3769
g3699
(S't\x08\x00\x00\x00Projects'
tRp3770
asbasbasbag69
(g85
g71
NtRp3771
(dp3772
g74
(dp3773
sg83
g3754
sg76
(lp3774
g69
(g90
g71
NtRp3775
(dp3776
g74
(dp3777
sg83
g3771
sg76
(lp3778
g69
(g70
g71
NtRp3779
(dp3780
g74
(dp3781
g82
I3
ssg83
g3775
sg76
(lp3782
g112
asbasbasbag69
(g85
g71
NtRp3783
(dp3784
g74
(dp3785
sg83
g3754
sg76
(lp3786
g69
(g90
g71
NtRp3787
(dp3788
g74
(dp3789
sg83
g3783
sg76
(lp3790
g69
(g70
g71
NtRp3791
(dp3792
g74
(dp3793
g82
I3
ssg83
g3787
sg76
(lp3794
S'/DEV_bootstrap_ch/default/list_all_projects'
p3795
asbasbasbag69
(g85
g71
NtRp3796
(dp3797
g74
(dp3798
sg83
g3754
sg76
(lp3799
g69
(g90
g71
NtRp3800
(dp3801
g74
(dp3802
sg83
g3796
sg76
(lp3803
g69
(g70
g71
NtRp3804
(dp3805
g74
(dp3806
g82
I3
ssg83
g3800
sg76
(lp3807
g69
(g78
g71
NtRp3808
(dp3809
g74
(dp3810
g82
I2
ssg83
Nsg76
(lp3811
sbasbasbasbasbasbasbasbasbasbasbasbag69
(g85
g71
NtRp3812
(dp3813
g74
(dp3814
sg83
g3079
sg76
(lp3815
g69
(g90
g71
NtRp3816
(dp3817
g74
(dp3818
g94
g95
ssg83
g3812
sg76
(lp3819
S'meta'
p3820
asbag69
(g90
g71
NtRp3821
(dp3822
g74
(dp3823
g101
g102
ssg83
g3812
sg76
(lp3824
S':'
asbag69
(g90
g71
NtRp3825
(dp3826
g74
(dp3827
sg83
g3812
sg76
(lp3828
g69
(g70
g71
NtRp3829
(dp3830
g74
(dp3831
g82
I5
ssg83
g3825
sg76
(lp3832
g69
(g78
g71
NtRp3833
(dp3834
g74
(dp3835
g82
I4
ssg83
Nsg76
(lp3836
g69
(g85
g71
NtRp3837
(dp3838
g74
(dp3839
sg83
g3833
sg76
(lp3840
g69
(g90
g71
NtRp3841
(dp3842
g74
(dp3843
g94
g95
ssg83
g3837
sg76
(lp3844
S'author'
p3845
asbag69
(g90
g71
NtRp3846
(dp3847
g74
(dp3848
g101
g102
ssg83
g3837
sg76
(lp3849
S':'
asbag69
(g90
g71
NtRp3850
(dp3851
g74
(dp3852
sg83
g3837
sg76
(lp3853
g69
(g70
g71
NtRp3854
(dp3855
g74
(dp3856
g82
I4
ssg83
g3850
sg76
(lp3857
S'Vikram Pudi <vikram@iiit.ac.in>'
p3858
asbasbasbag69
(g85
g71
NtRp3859
(dp3860
g74
(dp3861
sg83
g3833
sg76
(lp3862
g69
(g90
g71
NtRp3863
(dp3864
g74
(dp3865
g94
g95
ssg83
g3859
sg76
(lp3866
S'copyright'
p3867
asbag69
(g90
g71
NtRp3868
(dp3869
g74
(dp3870
g101
g102
ssg83
g3859
sg76
(lp3871
S':'
asbag69
(g90
g71
NtRp3872
(dp3873
g74
(dp3874
sg83
g3859
sg76
(lp3875
g69
(g70
g71
NtRp3876
(dp3877
g74
(dp3878
g82
I4
ssg83
g3872
sg76
(lp3879
S'Copyright 2011'
p3880
asbasbasbag69
(g85
g71
NtRp3881
(dp3882
g74
(dp3883
sg83
g3833
sg76
(lp3884
g69
(g90
g71
NtRp3885
(dp3886
g74
(dp3887
g94
g95
ssg83
g3881
sg76
(lp3888
S'description'
p3889
asbag69
(g90
g71
NtRp3890
(dp3891
g74
(dp3892
g101
g102
ssg83
g3881
sg76
(lp3893
S':'
asbag69
(g90
g71
NtRp3894
(dp3895
g74
(dp3896
sg83
g3881
sg76
(lp3897
g69
(g70
g71
NtRp3898
(dp3899
g74
(dp3900
g82
I4
ssg83
g3894
sg76
(lp3901
S'Computational Core for Plant Metabolomics -- A project sanctioned by DBT, Govt. of India'
p3902
asbasbasbag69
(g85
g71
NtRp3903
(dp3904
g74
(dp3905
sg83
g3833
sg76
(lp3906
g69
(g90
g71
NtRp3907
(dp3908
g74
(dp3909
g94
g95
ssg83
g3903
sg76
(lp3910
S'generator'
p3911
asbag69
(g90
g71
NtRp3912
(dp3913
g74
(dp3914
g101
g102
ssg83
g3903
sg76
(lp3915
S':'
asbag69
(g90
g71
NtRp3916
(dp3917
g74
(dp3918
sg83
g3903
sg76
(lp3919
g69
(g70
g71
NtRp3920
(dp3921
g74
(dp3922
g82
I4
ssg83
g3916
sg76
(lp3923
S'Web2py Web Framework'
p3924
asbasbasbag69
(g85
g71
NtRp3925
(dp3926
g74
(dp3927
sg83
g3833
sg76
(lp3928
g69
(g90
g71
NtRp3929
(dp3930
g74
(dp3931
g94
g95
ssg83
g3925
sg76
(lp3932
S'keywords'
p3933
asbag69
(g90
g71
NtRp3934
(dp3935
g74
(dp3936
g101
g102
ssg83
g3925
sg76
(lp3937
S':'
asbag69
(g90
g71
NtRp3938
(dp3939
g74
(dp3940
sg83
g3925
sg76
(lp3941
g69
(g70
g71
NtRp3942
(dp3943
g74
(dp3944
g82
I4
ssg83
g3938
sg76
(lp3945
S'web2py, python, metabolome, metabolomics'
p3946
asbasbasbasbasbasbasbag69
(g85
g71
NtRp3947
(dp3948
g74
(dp3949
sg83
g3079
sg76
(lp3950
g69
(g90
g71
NtRp3951
(dp3952
g74
(dp3953
g94
g95
ssg83
g3947
sg76
(lp3954
S'models_to_run'
p3955
asbag69
(g90
g71
NtRp3956
(dp3957
g74
(dp3958
g101
g102
ssg83
g3947
sg76
(lp3959
S':'
asbag69
(g90
g71
NtRp3960
(dp3961
g74
(dp3962
sg83
g3947
sg76
(lp3963
g69
(g70
g71
NtRp3964
(dp3965
g74
(dp3966
g82
I5
ssg83
g3960
sg76
(lp3967
g69
(g78
g71
NtRp3968
(dp3969
g74
(dp3970
g82
I4
ssg83
Nsg76
(lp3971
g69
(g85
g71
NtRp3972
(dp3973
g74
(dp3974
sg83
g3968
sg76
(lp3975
g69
(g90
g71
NtRp3976
(dp3977
g74
(dp3978
sg83
g3972
sg76
(lp3979
g69
(g70
g71
NtRp3980
(dp3981
g74
(dp3982
g82
I4
ssg83
g3976
sg76
(lp3983
S'^\\w+\\.py$'
p3984
asbasbasbag69
(g85
g71
NtRp3985
(dp3986
g74
(dp3987
sg83
g3968
sg76
(lp3988
g69
(g90
g71
NtRp3989
(dp3990
g74
(dp3991
sg83
g3985
sg76
(lp3992
g69
(g70
g71
NtRp3993
(dp3994
g74
(dp3995
g82
I4
ssg83
g3989
sg76
(lp3996
S'^default/\\w+\\.py$'
p3997
asbasbasbag69
(g85
g71
NtRp3998
(dp3999
g74
(dp4000
sg83
g3968
sg76
(lp4001
g69
(g90
g71
NtRp4002
(dp4003
g74
(dp4004
sg83
g3998
sg76
(lp4005
g69
(g70
g71
NtRp4006
(dp4007
g74
(dp4008
g82
I4
ssg83
g4002
sg76
(lp4009
S'^default/index/\\w+\\.py$'
p4010
asbasbasbasbasbasbasbag69
(g85
g71
NtRp4011
(dp4012
g74
(dp4013
sg83
g3079
sg76
(lp4014
g69
(g90
g71
NtRp4015
(dp4016
g74
(dp4017
g94
g95
ssg83
g4011
sg76
(lp4018
S'postprocessing'
p4019
asbag69
(g90
g71
NtRp4020
(dp4021
g74
(dp4022
g101
g102
ssg83
g4011
sg76
(lp4023
S':'
asbag69
(g90
g71
NtRp4024
(dp4025
g74
(dp4026
sg83
g4011
sg76
(lp4027
g69
(g70
g71
NtRp4028
(dp4029
g74
(dp4030
g82
I5
ssg83
g4024
sg76
(lp4031
g69
(g78
g71
NtRp4032
(dp4033
g74
(dp4034
g82
I4
ssg83
Nsg76
(lp4035
sbasbasbasbag69
(g85
g71
NtRp4036
(dp4037
g74
(dp4038
sg83
g3079
sg76
(lp4039
g69
(g90
g71
NtRp4040
(dp4041
g74
(dp4042
g94
g95
ssg83
g4036
sg76
(lp4043
S'session_cookie_expires'
p4044
asbag69
(g90
g71
NtRp4045
(dp4046
g74
(dp4047
g101
g102
ssg83
g4036
sg76
(lp4048
S':'
asbag69
(g90
g71
NtRp4049
(dp4050
g74
(dp4051
sg83
g4036
sg76
(lp4052
g69
(g70
g71
NtRp4053
(dp4054
g74
(dp4055
g82
I5
ssg83
g4049
sg76
(lp4056
S'None'
p4057
asbasbasbag69
(g85
g71
NtRp4058
(dp4059
g74
(dp4060
sg83
g3079
sg76
(lp4061
g69
(g90
g71
NtRp4062
(dp4063
g74
(dp4064
g94
g95
ssg83
g4058
sg76
(lp4065
S'session_data_name'
p4066
asbag69
(g90
g71
NtRp4067
(dp4068
g74
(dp4069
g101
g102
ssg83
g4058
sg76
(lp4070
S':'
asbag69
(g90
g71
NtRp4071
(dp4072
g74
(dp4073
sg83
g4058
sg76
(lp4074
g69
(g70
g71
NtRp4075
(dp4076
g74
(dp4077
g82
I5
ssg83
g4071
sg76
(lp4078
S'session_data_dev_bootstrap_ch'
p4079
asbasbasbag69
(g85
g71
NtRp4080
(dp4081
g74
(dp4082
sg83
g3079
sg76
(lp4083
g69
(g90
g71
NtRp4084
(dp4085
g74
(dp4086
g94
g95
ssg83
g4080
sg76
(lp4087
S'session_file'
p4088
asbag69
(g90
g71
NtRp4089
(dp4090
g74
(dp4091
g101
g102
ssg83
g4080
sg76
(lp4092
S':'
asbag69
(g90
g71
NtRp4093
(dp4094
g74
(dp4095
sg83
g4080
sg76
(lp4096
g69
(g70
g71
NtRp4097
(dp4098
g74
(dp4099
g82
I5
ssg83
g4093
sg76
(lp4100
S"<open file '/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-0786449f-0f57-4893-b642-5d65efb22480', mode 'rb+' at 0x9e20de0>"
p4101
asbasbasbag69
(g85
g71
NtRp4102
(dp4103
g74
(dp4104
sg83
g3079
sg76
(lp4105
g69
(g90
g71
NtRp4106
(dp4107
g74
(dp4108
g94
g95
ssg83
g4102
sg76
(lp4109
S'session_filename'
p4110
asbag69
(g90
g71
NtRp4111
(dp4112
g74
(dp4113
g101
g102
ssg83
g4102
sg76
(lp4114
S':'
asbag69
(g90
g71
NtRp4115
(dp4116
g74
(dp4117
sg83
g4102
sg76
(lp4118
g69
(g70
g71
NtRp4119
(dp4120
g74
(dp4121
g82
I5
ssg83
g4115
sg76
(lp4122
S'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-0786449f-0f57-4893-b642-5d65efb22480'
p4123
asbasbasbag69
(g85
g71
NtRp4124
(dp4125
g74
(dp4126
sg83
g3079
sg76
(lp4127
g69
(g90
g71
NtRp4128
(dp4129
g74
(dp4130
g94
g95
ssg83
g4124
sg76
(lp4131
S'session_id'
p4132
asbag69
(g90
g71
NtRp4133
(dp4134
g74
(dp4135
g101
g102
ssg83
g4124
sg76
(lp4136
S':'
asbag69
(g90
g71
NtRp4137
(dp4138
g74
(dp4139
sg83
g4124
sg76
(lp4140
g69
(g70
g71
NtRp4141
(dp4142
g74
(dp4143
g82
I5
ssg83
g4137
sg76
(lp4144
g487
asbasbasbag69
(g85
g71
NtRp4145
(dp4146
g74
(dp4147
sg83
g3079
sg76
(lp4148
g69
(g90
g71
NtRp4149
(dp4150
g74
(dp4151
g94
g95
ssg83
g4145
sg76
(lp4152
S'session_id_name'
p4153
asbag69
(g90
g71
NtRp4154
(dp4155
g74
(dp4156
g101
g102
ssg83
g4145
sg76
(lp4157
S':'
asbag69
(g90
g71
NtRp4158
(dp4159
g74
(dp4160
sg83
g4145
sg76
(lp4161
g69
(g70
g71
NtRp4162
(dp4163
g74
(dp4164
g82
I5
ssg83
g4158
sg76
(lp4165
g3136
asbasbasbag69
(g85
g71
NtRp4166
(dp4167
g74
(dp4168
sg83
g3079
sg76
(lp4169
g69
(g90
g71
NtRp4170
(dp4171
g74
(dp4172
g94
g95
ssg83
g4166
sg76
(lp4173
S'session_locked'
p4174
asbag69
(g90
g71
NtRp4175
(dp4176
g74
(dp4177
g101
g102
ssg83
g4166
sg76
(lp4178
S':'
asbag69
(g90
g71
NtRp4179
(dp4180
g74
(dp4181
sg83
g4166
sg76
(lp4182
g69
(g70
g71
NtRp4183
(dp4184
g74
(dp4185
g82
I5
ssg83
g4179
sg76
(lp4186
g1505
asbasbasbag69
(g85
g71
NtRp4187
(dp4188
g74
(dp4189
sg83
g3079
sg76
(lp4190
g69
(g90
g71
NtRp4191
(dp4192
g74
(dp4193
g94
g95
ssg83
g4187
sg76
(lp4194
S'session_new'
p4195
asbag69
(g90
g71
NtRp4196
(dp4197
g74
(dp4198
g101
g102
ssg83
g4187
sg76
(lp4199
S':'
asbag69
(g90
g71
NtRp4200
(dp4201
g74
(dp4202
sg83
g4187
sg76
(lp4203
g69
(g70
g71
NtRp4204
(dp4205
g74
(dp4206
g82
I5
ssg83
g4200
sg76
(lp4207
g112
asbasbasbag69
(g85
g71
NtRp4208
(dp4209
g74
(dp4210
sg83
g3079
sg76
(lp4211
g69
(g90
g71
NtRp4212
(dp4213
g74
(dp4214
g94
g95
ssg83
g4208
sg76
(lp4215
S'session_storage_type'
p4216
asbag69
(g90
g71
NtRp4217
(dp4218
g74
(dp4219
g101
g102
ssg83
g4208
sg76
(lp4220
S':'
asbag69
(g90
g71
NtRp4221
(dp4222
g74
(dp4223
sg83
g4208
sg76
(lp4224
g69
(g70
g71
NtRp4225
(dp4226
g74
(dp4227
g82
I5
ssg83
g4221
sg76
(lp4228
g2942
asbasbasbag69
(g85
g71
NtRp4229
(dp4230
g74
(dp4231
sg83
g3079
sg76
(lp4232
g69
(g90
g71
NtRp4233
(dp4234
g74
(dp4235
g94
g95
ssg83
g4229
sg76
(lp4236
S'status'
p4237
asbag69
(g90
g71
NtRp4238
(dp4239
g74
(dp4240
g101
g102
ssg83
g4229
sg76
(lp4241
S':'
asbag69
(g90
g71
NtRp4242
(dp4243
g74
(dp4244
sg83
g4229
sg76
(lp4245
g69
(g70
g71
NtRp4246
(dp4247
g74
(dp4248
g82
I5
ssg83
g4242
sg76
(lp4249
S'200'
p4250
asbasbasbag69
(g85
g71
NtRp4251
(dp4252
g74
(dp4253
sg83
g3079
sg76
(lp4254
g69
(g90
g71
NtRp4255
(dp4256
g74
(dp4257
g94
g95
ssg83
g4251
sg76
(lp4258
S'subtitle'
p4259
asbag69
(g90
g71
NtRp4260
(dp4261
g74
(dp4262
g101
g102
ssg83
g4251
sg76
(lp4263
S':'
asbag69
(g90
g71
NtRp4264
(dp4265
g74
(dp4266
sg83
g4251
sg76
(lp4267
g69
(g70
g71
NtRp4268
(dp4269
g74
(dp4270
g82
I5
ssg83
g4264
sg76
(lp4271
g3699
(S's)\x00\x00\x00Computational Core for Plant Metabolomics'
tRp4272
asbasbasbag69
(g85
g71
NtRp4273
(dp4274
g74
(dp4275
sg83
g3079
sg76
(lp4276
g69
(g90
g71
NtRp4277
(dp4278
g74
(dp4279
g94
g95
ssg83
g4273
sg76
(lp4280
S'title'
p4281
asbag69
(g90
g71
NtRp4282
(dp4283
g74
(dp4284
g101
g102
ssg83
g4273
sg76
(lp4285
S':'
asbag69
(g90
g71
NtRp4286
(dp4287
g74
(dp4288
sg83
g4273
sg76
(lp4289
g69
(g70
g71
NtRp4290
(dp4291
g74
(dp4292
g82
I5
ssg83
g4286
sg76
(lp4293
g134
asbasbasbag69
(g85
g71
NtRp4294
(dp4295
g74
(dp4296
sg83
g3079
sg76
(lp4297
g69
(g90
g71
NtRp4298
(dp4299
g74
(dp4300
g94
g95
ssg83
g4294
sg76
(lp4301
S'view'
p4302
asbag69
(g90
g71
NtRp4303
(dp4304
g74
(dp4305
g101
g102
ssg83
g4294
sg76
(lp4306
S':'
asbag69
(g90
g71
NtRp4307
(dp4308
g74
(dp4309
sg83
g4294
sg76
(lp4310
g69
(g70
g71
NtRp4311
(dp4312
g74
(dp4313
g82
I5
ssg83
g4307
sg76
(lp4314
S'default/index.html'
p4315
asbasbasbasbasbsS'locals'
p4316
(dp4317
g4
S"'/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py'"
p4318
sg6
S"'# -*- coding: utf-8 -*-\\n# this file is released ...cals()\\n\\n\\n\\nresponse._vars=response._caller(index)\\n'"
p4319
sssS'traceback'
p4320
S'Traceback (most recent call last):\n  File "/home/anil/Downloads/web2py/gluon/restricted.py", line 211, in restricted\n    ccode = compile2(code, layer)\n  File "/home/anil/Downloads/web2py/gluon/restricted.py", line 194, in compile2\n    return compile(code.rstrip().replace(\'\\r\\n\', \'\\n\') + \'\\n\', layer, \'exec\')\n  File "/home/anil/Downloads/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 339\n    lambda row: A(\'\'+tes(row.id,\'spectrophotometry\'),_href=URL("default","router",args=getargs(row.id,args,"spectrophotometry")))]\n                                                                                                                                 ^\nSyntaxError: invalid syntax\n'
p4321
s.