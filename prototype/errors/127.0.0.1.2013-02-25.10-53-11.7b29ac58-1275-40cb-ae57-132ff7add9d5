(dp1
S'output'
p2
S'<type \'exceptions.TypeError\'> can only concatenate list (not "int") to list'
p3
sS'layer'
p4
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p5
sS'code'
p6
S'import rpy2.robjects as robjects\n# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n########################## Tips\n#http://stackoverflow.com/questions/12354353/duplicate-a-record-and-its-references-in-web2py\n\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    redirect(URL(\'default\',\'list_all_projects\'))\n    #redirect(URL(\'plugin_wiki\',\'page/home\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\ndef authenticate(uid,pid,func):   \n   result = db(db.role.user == uid)(db.role.project == pid).select(db.role.ALL)\n   myroles = [role_list[int(k.role)] for k in result]\n   is_coordinator = db(db.project.project_coordinator == uid).select(db.project.ALL)\n   if func == \'roles\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'You must be a project co-ordinator to manage roles\'\n\treturn error  \n   if func == \'add_project\':\n\tif len(is_coordinator):\n\t  error = \'\'\n\telse:\n\t   error = \'\'\n        return error\n   if func == \'add_sample\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'SignUp for  "Experimentalist Role" in this project to add a sample. Use Browser back button to navigate to Project View.\'\n        return error\n   if func == \'experimentalist\':\n\tif \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You must be an experimentalist to add the biosource information of a sample\'\n        return error\n   if func == \'my_samples\':\n\tif  \'experimentalist\' in myroles:\n\t  error = \'\'\n\telse:\n\t   error = \'You are not authorized to view this page\'\n        return error\n\ndef basic_groups(pid):\n    """ creates the basic groups on general basis or id basis """\n    if not pid:\n        for i in role_list:\n\t   auth.add_group(i,i) \n    else:\n        pid_groups = [str(pid)+\'#\'+i for i in role_list]\n\tfor k in pid_groups:\n\t   auth.add_group(k,k)\n    return locals()\t   \n\n\ndef add_project():\n    error = authenticate(auth.user.id,\'\',\'add_project\')\n    form = SQLFORM(db.project,fields=[\'name\',\'code\',\'start_date\',\'project_description\',\'project_literature_reference\',\'project_journal_name\',\'project_publication_date\',\'project_pubmed_id\'],showid=False)\n    form.vars.project_coordinator = auth.user.id\n    if form.process().accepted:\n       response.flash =\'accepted\'\n       result = db(db.project.name == form.vars.name).select(db.project.ALL).first()\n       basic_groups(result.id)\n       db.role.insert(user=auth.user.id,project=result.id,role=6,approval_status=1,member_since=now)\n       redirect(URL(\'project_viewer\',args = form.vars.id))\n    elif form.errors:\n       response.flash = \'errors\'\n    return locals()\n\ndef remove_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """takes an id and removes the project """ \n    pid  = request.args(0)\n    pid_groups = [str(pid)+\'#\'+i for i in role_list]\n    for z in pid_groups:\n\tpgid = auth.id_group(z)\n\tauth.del_group(pgid)\n    del db.project[pid]\n    return locals()\n\ndef add_experiment():\n    grid = SQLFORM.grid(db.experiment)\n    return locals()\n\ndef new_affiliation():\n    form = SQLFORM(db.affiliation)\n    return locals()\n\ndef edit_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    crud.settings.update_next = URL(\'project_viewer\',args=request.args)\n    form=crud.update(db.project,request.args(0),deletable=False)\n    return locals();\n \n@auth.requires_login()\ndef project_viewer():\n    pid = request.args[-1]\n    project=db(db.project.id==pid).select(db.project.ALL).first()\n    cord = db(db.auth_user.id==project.project_coordinator).select(db.auth_user.ALL).first()\n    \n    if authenticate(auth.user.id,\'\',\'roles\') == \'\':\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'Grant Role\'),False,URL(\'roles\',args=project.id)),\n      (T(\'Edit Project\'),False,URL(\'edit_project\',args=project.id)),\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n    else :\n      response.menu = [\n      (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n      (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args[-1]),[\n      (T(\'SignUP\'),False,URL(\'reg_project\',args=project.id))]\n      )\n      ]\n      \n    if project.project_status == \'1\':\n      response.menu+= [\n      (T(\'Published Samples\'), False,URL(\'list_all_pub_samples\',args=(pid)),[])\n      ]\n    elif authenticate(auth.user.id,pid,\'add_sample\')==\'\':\n        response.menu+= [\n        (T(\'Samples\'), False,URL(\'my_samples\',args=(pid)),[\n        (T(\'My Samples\'), False,URL(\'my_samples\',args=(pid))),\n        ])\n        ]\n      \n    users=db(db.role.project==pid)(db.role.project == db.project.id)(db.role.user==db.auth_user.id).select(db.role.ALL,db.auth_user.ALL)\n    is_coordinator = \'\'\n    myroles = \'\'\n    if auth.user:\n      is_coordinator = db(db.project.id == pid)(db.project.project_coordinator == auth.user.id).select(db.project.ALL).first()\n      result = db(db.role.user == auth.user.id)(db.role.project == pid).select(db.role.ALL)\n      myroles = [role_list[int(k.role)] for k in result]\n      \n    return locals()\n\n\ndef add_sample():\n  """ creates a exp on an project basis and should continue to fill the bio source data """\n  """ available to the experimentalist """ \n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  if \'new\' in request.args:\n   pid = request.args[-3]\n  else:\n   pid = request.args(0)\n  error = authenticate(auth.user.id,pid,\'add_sample\') \n  form = SQLFORM(db.sample,fields=[\'name\',\'code\',\'description\',\'scientific_name\'],showid=False)\n#added a field project in sample table\n#added two more fields in form insert root/replica etc and scientific name\n  if form.validate():\n      i = db.sample.insert(experimentalist=auth.user.id,name=form.vars.name,code=form.vars.code ,description=form.vars.description,experiment=pid,scientific_name=form.vars.scientific_name,working_status=1,publication_status=0)\n      response.flash = \'sample has been created\'\n      redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',pid])) \n      # redirect to the sample creation \n  elif form.errors:\n      response.flash = \'Form has errors\'\n  return locals()\n\ndef sample_viewer():\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   i = request.args[-1]\n   if \'view\' in request.args: \n\tform = SQLFORM(db.sample, i,readonly =True,showid=False)\n   if \'edit\' in request.args: \n\tform = SQLFORM(db.sample, i,showid=False)\n   if form.process().accepted:\n\tresponse.flash = \'form accepted\'\n\tredirect(URL(\'list_all_dev_projects\',args = request.args[0:-3])) \n   elif form.errors:\n\tresponse.flash = \'form has errors\'\n   return dict(form=form)\n\ndef list_all_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'index\'), [])\n    #(T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    #(T(\'Project\'), False, URL(\'default\',\'list_all_projects\'), [(T(\'Add Project\'),False,URL(\'default\',\'add_project\'))])\n    ]\n    form=FORM(\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    form.elements(\'input[type=submit]\')[0]["_value"] = "Search"\n    if form.accepts(request,session):\n      redirect(URL(\'grid?keywords=tomato\')) \n    \n    #form=FORM(\'\',INPUT(_name=\'name\') ,INPUT(_type=\'submit\'))\n    #if form.process().accepted:\n      #redirect(URL(\'grid\')) \n    pub_projects = db(db.project.project_status == 1).select(db.project.ALL)\n    dev_projects = db(db.project.project_status == 0).select(db.project.ALL)\n    authenticated = \'no\'\n    if auth.user:\n     authenticated = authenticate(auth.user.id,\'\',\'add_project\')\n    pi = robjects.r[\'pi\']\n    return locals()\n\ndef grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.sample.id==db.biosource.sample_name))\n   #query=((db.project.project_status==0))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n   grid = SQLFORM.grid(query)\n   return locals() \n\ndef temp():\n   q1 = (db.project.project_status ==  0)\n   q2 = (db.sample.publication_status == True)\n   ck = {}\n   fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n   l1=[lambda row: A(\'View Post\',_href=URL("default","view",args=[row.id]))]\n   links={\'project\':l1}\n   grid = SQLFORM.smartgrid(db.project,ck,fields=fi,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n   return locals() \n\ndef list_all_pub_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    q1 = (db.project.project_status ==  1)\n    q2 = (db.sample.publication_status == True)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.raw_data_storage_information.sample_name]\n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n    \trouter(request.args)\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=False,deletable=False,create = False,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'raw_data_storage_information\']) \n    \n    return locals()\n\ndef list_all_dev_projects():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    db.sample.experimentalist.default=auth.user.id\n    db.sample.experiment.writable = False\n    q1 = (db.project.project_status ==  0)\n    q2 = (db.sample.experimentalist == auth.user.id)\n    ck = {\'project\':q1,\'sample\':q2}\n    fi = [db.project.name,db.project.project_coordinator,db.project.start_date,db.project.project_status,db.experiment.code,db.sample.name,db.sample.code,db.sample.replica,db.sample.publication_status,db.biosource.sample_name,db.plant_growth_condition.sample_name,db.treatments.sample_name,db.harvests.sample_name,db.extraction_preparation.sample_name,db.gas_chromatography.sample_name,db.liquid_chromatography.sample_name,db.mass_spectroscopy.sample_name,db.spectrophotometry.sample_name,db.raw_data_storage_information.sample_name]\n    edit_dict = {\'project\':False}\n    delete_dict = {\'project\':False}\n#Allow only one original sample to be added in an experiment others are replicates\n    addsample = True\n    if \'sample\' in request.args and \'new\' in request.args:\n         count = db(db.sample.experiment==request.args[-3]).count()\n         if(count>0):\n           db.sample.replica.default = \'replicate\'\n           db.sample.replica.requires=IS_IN_SET([\'replicate\',\'alicot\'])\n         else:\n           db.sample.replica.default = \'Original\'\n           db.sample.replica.writable = False\n           \n    create_dict = {\'project\':False,\'sample\':addsample}\n#Links for replicating samples  \n    args= request.args[0:5]\n    #args1=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],"biosource.sample_name","edit","biosource"]\n    l1=[lambda row: A(\'replicate\',_href=URL("default","duplicate",args=[request.args+row.id])), \\\n           lambda row: A(\'copy_\'+tes(row.id),_href=URL("default","router",args=getargs(row.id,args,"biosource"))), \\\n           dict(header = \'name\',body = lambda row: A(\'copy\'+tes(row.id),_href=URL("default","replicate",args=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],row.id])))]\n    links={\'sample\':l1}\n#customized Views for certain forms using router   \n    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n     \trouter()\n    s={\'sample\':lambda ids : redirect(URL(\'default\', \'mapping_multiple\', vars=dict(id=ids)))}\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'raw_data_storage_information\'],selectable = s) \n    return locals()\n\n#gets table name and rowid as input and creates another row with same details as rowid recod has\ndef tes(a):\n    if db(db.biosource.sample_name==a).count()==0:\n     return "add"\n    else:\n        return "edit"\n    return "add"\ndef getargs(a,args,table):\n    row = db(db[table].sample_name==a).select(db[table].id).first()\n    if row:\n        args=args+[table+".sample_name",a,"edit",table,row.id]\n        return args\n    else:\n        args = args+[table+".sample_name",a,"edit",table]\n        return args\n\ndef replicate():\n    if db(db.template.user==auth.user.id).count() == 0:\n       db.template.insert(user=auth.user.id, sample=request.args[-1])\n    else:   \n       db(db.template.user == auth.user.id).update(sample=request.args[-1])\n    redirect(URL(\'list_all_dev_projects\',args=request.args[0:-1]))\n    #Unique fields take care\n    #product.update(sampleid=\'temp\')\n    return() \ndef duplicate():\n    if callable(request.args[0]):\n        rec = db(db.sample.id==request.args(0)).select(db.sample.ALL).first()\n        rec.update(replica="replicate")\n        db.sample.insert(**db.sample._filter_fields(rec))\n    redirect(URL(\'list_all_dev_projects\',args=request.args[0:-1]))    \n\ndef my_samples():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n    ]\n    """ all my samples in the project with permissions to edit delete publish/unpublish samples """\n    error = authenticate(auth.user.id,request.args(0),\'add_sample\') \n    l =  [\'project\',\'experiment.project\',request.args(0)]\n    if error == \'\':\n      redirect(URL(\'list_all_dev_projects\',args=l))\n    return locals()\n\ndef list_all_samples1():\n    proj_id = request.args(0)\n    pub_samples = db((db.sample.working_status == 1)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    dev_samples = db((db.sample.working_status == 0)&(db.sample.project == proj_id)).select(db.sample.ALL)\n    return locals()\n\ndef view_published_samples():\n    proj_id = request.args(0)\n    return locals() \n\ndef router():\n    l=request.args\n    if \'biosource\' in l:\n      redirect(URL(\'insert_biosource\',args = l))\n    elif \'plant_growth_condition\' in l:\n      redirect(URL(\'insert_pgc\',args = l))\n    elif \'treatments\' in l:\n      redirect(URL(\'insert_treatments\',args = l))\n    elif \'harvests\' in l:\n      redirect(URL(\'insert_harvests\',args = l))\n    elif \'extraction_preparation\' in l:\n      redirect(URL(\'insert_ep\',args = l))\n    elif \'gas_chromatography\' in l:\n        redirect(URL(\'insert_gc\',args = l))\n    elif \'liquid_chromatography\' in l:\n        redirect(URL(\'insert_lc\',args = l))\n    elif \'mass_spectroscopy\' in l:\n        redirect(URL(\'insert_ms\',args = l))\n    elif \'raw_data_storage_information\' in l:\n          redirect(URL(\'insert_raw_data\',args = l))\n    elif \'sample\' in l and \'view\' in l:\t\t\n        redirect(URL(\'sample\',args=l))\n    else:\n        return()\n\n\'\'\'\telif \'sample\' in l and \'new\' in l:\t\t\n\t  redirect(URL(\'add_sample\',args = l))\n\telif \'sample\' in l:\t\t\n\t  redirect(URL(\'sample_viewer\',args = l))\n\telif \'project\' in l:\n\t  redirect(URL(\'project_viewer\',args=l))\n\telse : \n\t  redirect(URL(\'index\'))\'\'\'\n\ndef list_all_pub_samples():\n#    proj_id = request.args(0)\n#    pub = request.args(1) # if pub == 1 show published samples otherwise non published samples\n#   pub_query = (db.sample.working_status == 1 and db.sample.project == proj_id)\n#   unpub_query = (db.sample.working_status == 0 and db.sample.project == proj_id)\n#   pquery_dict = {\'sample\':pub_query}\n#   nquery_dict = {\'sample\':unpub_query}\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#       router(request.args)\n#    if \'view\' in request.args or \'edit\' in request.args or \'new\' in request.args:\n#     \trouter(request.args)\n    \n    """an argument to display published and non-published samples"""\n    """ request.args(0) - project  , request.args(1) published"""\n\n    redirect(URL(\'list_all_pub_projects\',args=[\'project\',\'experiment.project\',request.args(0)]))\n    \ndef list_all_dev_samples():\n   \n    redirect(URL(\'list_all_dev_projects\',args=[\'project\',\'sample.project\',request.args(0)]))\n    return locals()\n\ndef ajx_role():\n    """ an ajax call back which takes care of insert , update and delete in the roles table """\n    rid = request.args(1)\n    if request.args(0) == \'accept\':\n       row = db(db.role.id == rid).update(approval_status = 1)\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.add_membership(gid,result.user)\n    if request.args(0) == \'unblock\':\n       del db.role[rid] \n    if request.args(0) == \'block\':\n       row = db(db.role.id == rid).update(approval_status = 2)\n    if request.args(0) == \'delete\' or request.args(0) == \'deny\':\n       result = db(db.role.id == rid).select(db.role.ALL).first()\n       gid = auth.id_group(role_list[int(result.role)])\n       auth.del_membership(gid,result.user)\n       del db.role[rid] \n    return locals()\n\ndef reg_project():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ takes an id for the project and registers """\n    import datetime\n    now = datetime.datetime.now()\n    """ already requested """\n    pid = request.args(0)\n    ptitle = db(db.project.id == pid).select(db.project.ALL).first()\n    form = SQLFORM(db.role,fields=[\'role\'],showid=False)\n    if form.validate():\n       requested = db(db.role.user == auth.user.id)(db.role.project == pid)(db.role.approval_status == 0)(db.role.role==form.vars.role).count()\n       if requested == 0: \n        db.role.insert(user=auth.user.id,approval_status=0,project=pid,member_since=now,role=form.vars.role)\n        response.flash = \'accepted\'\n       else:\n        response.flash = \'You already hold the applied role\' \n    return locals() \n\ndef ajx_publish():\n    """ an ajax call back which takes care of publication status """\n    eid = request.args(1)\n    if request.args(0) == \'publish\':\n     row = db(db.project.id == eid).update(project_status = "1")\n    elif request.args(0) == \'unpublish\':\n     row = db(db.project.id == eid).update(project_status = "0")\n    redirect(URL(\'project_viewer\',args = eid))\n    return locals() \n\ndef roles():\n    response.menu = [\n    (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), []),\n    (T(\'Project\'), False, URL(\'default\',\'project_viewer\',args=request.args),[])\n    ]\n    """ complete interface for managing roles for a particular project"""\n    """ should be accessible to only project co-ordinators """\n    pid = request.args(0)\n    error = authenticate(auth.user.id,pid,\'roles\')\n    accepted = db(db.auth_user.id == db.role.user)(db.role.approval_status == 1)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    pending = db(db.auth_user.id == db.role.user)(db.role.approval_status == 0)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    blocked = db(db.auth_user.id == db.role.user)(db.role.approval_status == 2)(db.role.project == pid).select(db.role.ALL,db.auth_user.ALL)\n    return locals()\n   \ndef home_page():\n    """ home page for a user , shows list of projects he is working on and his past work """\n    uid = request.args(0)\n    #my roles \n    \n    roles = db(db.role.user == uid)(db.role.project == db.project.id).select(db.role.ALL,db.project.name) \n    myroles = [role_list[int(p.role.role)] for p in roles]\n    k = {}\n    """\n    is_coordinator = db(db.project.project_coordinator==uid).select(db.project.ALL)\n    coordinating_projects = [row.name for row in is_coordinator]\n    value=\'\'\n    for p in coordinating_projects:\n       value = value + \',\'+ p\n\t  \n    k[6] = value[1:] """\n    for row in roles:\n       if row.role.role not in k:\n          k[row.role.role] = row.project.name\n       else:\n          k[row.role.role] = k[row.role.role] + \',\' + row.project.name\n    com_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    incom_exps = db(db.sample.working_status == 1)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    pub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == True)(db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    unpub_exps = db(db.sample.working_status == 0)(db.sample.publication_status == False) (db.sample.experimentalist == uid)(db.sample.project == db.project.id).select(db.sample.ALL,db.project.id,db.project.name,orderby=db.sample.code)\n    for p in k:\n       list_projects = k[p].split(\',\')\n       proj = \'\' \n       for d in list_projects:\n          res = db(db.project.name == d).select(db.project.ALL).first()\n          cat = \'\'\n          if res:\n             cat = A(res.name,_href=URL(\'project_viewer\',args=res.id))\n          if proj == \'\':\n             proj=SPAN(cat)\n          else:\n           proj = SPAN(proj,\',\',cat)\n       k[p] = proj \n    return locals()\n\ndef download():\n    return response.download(request, db)\n\ndef insert_biosource():\n#prepopulating records  \n   if \'clear\' not in request.args and \'new\' in request.args:    \n    trows = db(db.template.user==auth.user.id).select()\n    count = db(db.template.user==auth.user.id).count()\n    if count > 0:\n     rows = db(db.biosource.sample_name==trows[0].sample).select()\n     count1 = db(db.biosource.sample_name==trows[0].sample).count()\n     if count1 > 0:\n      row = rows[0]      \n      for fieldname in db.biosource.fields:\n       if fieldname!=\'id\': \n        db.biosource[fieldname].default=row[fieldname]\n   elif \'clear\' in request.args: \n    request.args.pop()\n   #result = db(db.sample.id == request.args[-3]).select(db.sample.ALL).first()\n#  error = authenticate(auth.user.id,result.project,\'insert_biosource\')\n   response.menu = [\n   (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n   ]\n   redirect_args = request.args[0:-3]\n   form = SQLFORM(db.biosource)\n   if \'view\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],readonly = True,showid=False)\t  \n   elif \'edit\' in request.args: \n\t       form=SQLFORM(db.biosource,request.args[-1],showid=False)\n   elif \'new\' in request.args:\n               db.biosource.sample_name.readable = False \n               hid = {}   \n\t       form=SQLFORM(db.biosource,showid=False)\n\t       form.vars.sample_name = request.args[-3]\n \t       redirect_args = request.args[0:-4]\n   i=1\n   f1=form[0][:i+2]\n   fs1=form[0][i+2:i+7]\n   f2=form[0][i+7:]\n   form[0]=TABLE(TABLE(f1),\n      FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n   if form.process().accepted:\n     redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n     response.flash="Inserted entry"\n   return locals()\n\ndef insert_pgc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.plant_growth_condition.sample_name==trows[0].sample).select()\n    count1 = db(db.plant_growth_condition.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.plant_growth_condition.fields:\n      if fieldname!=\'id\': \n       db.plant_growth_condition[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.plant_growth_condition) \n  if \'view\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n\tform=SQLFORM(db.plant_growth_condition,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.plant_growth_condition.sample_name.readable = False \n\tform=SQLFORM(db.plant_growth_condition,showid=False)\n        form.vars.sample_name = request.args[-3]\n\tredirect_args = request.args[0:-2]\t \n  i=1\n  fs1=form[0][:i+5]\n  fss1=form[0][i+5:i+9]\n  fss2=form[0][i+9:i+10]\n  fss3=form[0][i+10:i+15]\n  f2=form[0][i+15:i+18]\n  fs2=form[0][i+18:i+21]\n  fs3=form[0][i+21:i+27]\n  f3=form[0][i+27:]\n  t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n  t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n  t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n  t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n  form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n  if form.process().accepted:\n    redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n    response.flash="form accepted"\n# redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  else:\n    response.flsh="form has some errors"\n  return locals()\n\ndef insert_ep():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.extraction_preparation.sample_name==trows[0].sample).select()\n    count1 = db(db.extraction_preparation.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.extraction_preparation.fields:\n      if fieldname!=\'id\': \n       db.extraction_preparation[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.extraction_preparation,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.extraction_preparation.sample_name.readable=False\n       form=SQLFORM(db.extraction_preparation,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:i+8]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][i+8:i+12])))))\n  t2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][i+12:])))\n  form[0]=TABLE(FIELDSET(t1,t2))\n  if form.process().accepted:\n       response.flash="Inserted entry"\n       redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_treatments():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.treatments.sample_name==trows[0].sample).select()\n    count1 = db(db.treatments.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.treatments.fields:\n      if fieldname!=\'id\': \n       db.treatments[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.treatments,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.treatments.sample_name.readable=False\n       form=SQLFORM(db.treatments,showid=False)\n       form.vars.sample_name = request.args[-3] \n       redirect_args = request.args[0:-2]\t \n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n  form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\ndef insert_harvests():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.harvests.sample_name==trows[0].sample).select()\n    count1 = db(db.harvests.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.harvests.fields:\n      if fieldname!=\'id\': \n       db.harvests[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n       form=SQLFORM(db.harvests,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n       db.harvests.sample_name.readable=False\n       form=SQLFORM(db.harvests,showid=False)\n       form.vars.sample_name = request.args[-3]\n       redirect_args = request.args[0:-2]\n  i=1\t \n  t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n  form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n  return locals()\n\t  \t\ndef insert_gc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.gas_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.gas_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.gas_chromatography.fields:\n      if fieldname!=\'id\': \n       db.gas_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n\tform=SQLFORM(db.gas_chromatography,request.args[-1],readonly = True,pload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n        form=SQLFORM(db.gas_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n        db.gas_chromatography.sample_name.readable=False\n        redirect_args = request.args[0:-2]\t \n        form=SQLFORM(db.gas_chromatography,showid=False)\n        form.vars.sample_name = request.args[-3]\n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n\tresponse.flash="Inserted entry"\n\tredirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#       redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_lc():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.liquid_chromatography.sample_name==trows[0].sample).select()\n    count1 = db(db.liquid_chromatography.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.liquid_chromatography.fields:\n      if fieldname!=\'id\': \n       db.liquid_chromatography[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  form = SQLFORM(db.liquid_chromatography)\n  if \'view\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  if \'edit\' in request.args: \n      form=SQLFORM(db.liquid_chromatography,request.args[-1],upload=URL(\'download\'),showid=False)\n  if \'new\' in request.args:\n      db.liquid_chromatography.sample_name.readable=False\n      redirect_args = request.args[0:-2]\t \n      form=SQLFORM(db.liquid_chromatography,showid=False)\n      form.vars.sample_name = request.args[-3] \n  j=1\n  t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n  t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n  i=15\n  t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n  t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n  t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n  t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n  t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n  t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n  form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n  if form.process().accepted:\n      response.flash="Inserted entry"\n      redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     redirect(URL(\'list_all_samples\',args=[\'sample\'])) \n  return locals()\n\ndef insert_ms():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.mass_spectroscopy.sample_name==trows[0].sample).select()\n    count1 = db(db.mass_spectroscopy.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.mass_spectroscopy.fields:\n      if fieldname!=\'id\': \n       db.mass_spectroscopy[fieldname].default=row[fieldname]\n  #result = db(db.sample.id == request.args[-1]).select(db.sample.ALL).first()\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.mass_spectroscopy,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.mass_spectroscopy.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.mass_spectroscopy,showid=False)\n    form.vars.sample_name = request.args[-3]\n  i=1\n  t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n  t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n  t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n  t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n  t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n  form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_raw_data():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.raw_data_storage_information.sample_name==trows[0].sample).select()\n    count1 = db(db.raw_data_storage_information.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.raw_data_storage_information.fields:\n      if fieldname!=\'id\': \n       db.raw_data_storage_information[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.raw_data_storage_information,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.raw_data_storage_information.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.raw_data_storage_information,showid=False)\n    form.vars.sample_name = request.args[-3]\n    form.vars.email_id_of_person=auth.user.email \n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\ndef insert_spectrophotometry():\n#prepopulating records  \n  trows = db(db.template.user==auth.user.id).select()\n  count = db(db.template.user==auth.user.id).count()\n  if count > 0:\n    rows = db(db.spectrophotometry.sample_name==trows[0].sample).select()\n    count1 = db(db.spectrophotometry.sample_name==trows[0].sample).count()\n    if count1 > 0:\n     row = rows[0]\n     for fieldname in db.spectrophotometry.fields:\n      if fieldname!=\'id\': \n       db.spectrophotometry[fieldname].default=row[fieldname]\n  response.menu = [\n  (T(\'Home\'), False, URL(\'default\',\'list_all_projects\'), [])\n  ]\n  redirect_args = request.args[0:-3]\t \n  if \'view\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],readonly = True,upload=URL(\'download\'),showid=False)\n  elif \'edit\' in request.args: \n    form=SQLFORM(db.spectrophotometry,request.args[-1],upload=URL(\'download\'),showid=False)\n  elif \'new\' in request.args:\n    db.spectrophotometry.sample_name.readable=False\n    redirect_args = request.args[0:-2]\t \n    form=SQLFORM(db.spectrophotometry,showid=False)\n    form.vars.sample_name = request.args[-3]\n  if form.process().accepted:\n      \tresponse.flash="Inserted entry"\n        redirect(URL(\'list_all_dev_projects\',args=redirect_args)) \n#     \tredirect(URL(\'list_all_samples\'),args=[\'sample\']) \n  return locals()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n#def drop_tables():\n    #are you sure you want to do this?\n    #for t in [\'auth_user\',\'auth_group\', \'auth_membership\', \'auth_permission\', \'auth_event\',\'sample\',\'biosource\',\'affiliation\',\'project\',\'role\',\'template\',\'experiment\',\'project_meta\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'feedback\',\'sample_files\']:\n    #    db[t].drop()\n    # pass\n    #return \n\ndef show_feedback():\n    grid = SQLFORM.smartgrid(db.feedback)\n    return locals()\n\n \ndef post_feedback():\n    """ allows to post feedback to the table feedback """ \n    past_feeds = db(db.feedback.feedback_on == request.env.http_referer).select(db.feedback.feedback_body,db.feedback.id)\n    form = SQLFORM(db.feedback,fields=[\'feedback_body\'],labels={\'feedback_body\':\'Your feedback about this page\'})\n    feedback_by = \'\'\n    if form.validate():\n\tif auth.user:\n            feedback_by = auth.user.id\n        else:\n\t   feedback_by = \'\'\n\tdb.feedback.insert(feedback_on=request.env.http_referer,feedback_body=form.vars.feedback_body,feedback_by=feedback_by)\n\tresponse.flash = "feedback has been duly noted and will be taken care of "\n    return locals()\n\n\ndef user_viewer():\n   """shows the user details """\n   uid = request.args(0)\n   record = db.auth_user(uid)\n   form = SQLFORM(db.auth_user,record,readonly=True,showid=False,fields=[\'first_name\',\'last_name\',\'email\',\'affiliated_to\',\'phone\',\'mobile\',\'city\'])\n   return locals()\n\n\ndef dict_dump(obj,inp):\n  ans = \'<dl class="dl-horizontal">\'\n  for key in inp.keys():\n     add = \'<dt>\'+str(inp[key])+\'</dt>\'+\'<dd>\'+str(obj[key])+\'</dd>\'\n     ans = ans+add\n  return ans\t\n\n\ndef sample():\n  """gets all the information regarding a sample in a single page """\n  sid = request.args[-1]\n  sample = db(db.sample.id == sid).select(db.sample.ALL).first()\n  user = db(db.auth_user.id == sample.experimentalist).select(db.auth_user.ALL).first()\n  experiment = db(db.experiment.id == sample.experiment).select(db.experiment.ALL).first()\n  biosource = db(db.biosource.sample_name == sid).select(db.biosource.ALL)\n  plant_growth = db(db.plant_growth_condition.sample_name == sid).select(db.plant_growth_condition.ALL)\n  treatment = db(db.treatments.sample_name == sid).select(db.treatments.ALL)\n  harvest = db(db.harvests.sample_name == sid).select(db.harvests.ALL)\n  extraction_preparation = db(db.extraction_preparation.sample_name == sid).select(db.extraction_preparation.ALL)\n  gc = db(db.gas_chromatography.sample_name == sid).select(db.gas_chromatography.ALL)\n  lc = db(db.liquid_chromatography.sample_name == sid).select(db.liquid_chromatography.ALL)\n  ms = db(db.mass_spectroscopy.sample_name == sid).select(db.mass_spectroscopy.ALL)\n  raw_storage = db(db.raw_data_storage_information.sample_name == sid).select(db.raw_data_storage_information.ALL)\n  biosource_forms = [] #a list of forms\n  for each in biosource:\n\tform = SQLFORM(db.biosource,each.id,showid=False,readonly=True)\n\ti=1\n\tf1=form[0][:i+2]\n\tfs1=form[0][i+2:i+7]\n\tf2=form[0][i+7:]\n\tform[0]=TABLE(TABLE(f1),FIELDSET(TAG.legend("Genotype"),TABLE(fs1)),TABLE(f2))\n\tbiosource_forms.append(form[0])\n        \n  pgc_forms = []\n  for each in plant_growth:\n     form = SQLFORM(db.plant_growth_condition,each.id,showid=False,readonly=True)\n     i=1\n     fs1=form[0][:i+5]\n     fss1=form[0][i+5:i+9]\n     fss2=form[0][i+9:i+10]\n     fss3=form[0][i+10:i+15]\n     f2=form[0][i+15:i+18]\n     fs2=form[0][i+18:i+21]\n     fs3=form[0][i+21:i+27]\n     f3=form[0][i+27:]\n     t2=TABLE(FIELDSET(TAG.legend("Growth Support"),TABLE(fs1)))\n     t3=TABLE(FIELDSET(TAG.legend("Location"),TABLE(FIELDSET(TAG.legend("Field trail"),TABLE(fss1))),TABLE(fss2),TABLE(FIELDSET(TAG.legend("Green house"),TABLE(fss3)))))\n     t4=TABLE(FIELDSET(TAG.legend("Nutritional Regime"),TABLE(fs2)))\n     t5=TABLE(FIELDSET(TAG.legend("Date of Plant Establishment(YYYY-MM-DD)"),TABLE(fs3)))\n     form[0]=TABLE(FIELDSET(t2,t3,TABLE(f2),t4,t5,TABLE(f3)))\n     pgc_forms.append(form[0])\n  \n  treatment_forms = []\n  for each in treatment:\n     form = SQLFORM(db.treatments,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Treatment Factor"),TABLE(form[0][:i+3])))\n     form[0]=TABLE(FIELDSET(t1,TABLE(form[0][i+3:])))\n\n\n  harvest_forms = []\n  for each in harvest:\n     form = SQLFORM(db.harvests,each.id,showid=False,readonly=True)\n     i=1\n     t1=TABLE(FIELDSET(TAG.legend("Sample Storage"),TABLE(form[0][i+7:])))\n     form[0]=TABLE(FIELDSET(TABLE(form[0][:i+7]),t1))\n     harvest_forms.append(form[0])\n\n  gc_forms = []\n  for each in gc:\n     form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n     j=1\n     t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n     t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n     i=15\n     t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n     t2=TABLE(FIELDSET(TAG.legend("DERIVATIZATION"),TABLE(form[0][i+4:i+8])))\n     t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+8:i+15])))\n     t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+15:i+23])))\n     t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+23:i+30])))\n     t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+30:i+33]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+33:i+37])))))\n     t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+37:])))\n     form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t2,t3,t4,t5,t6,t7))\n\n     gc_forms.append(form[0])\n \n  lc_forms = []\n  \n  for each in lc:\n    form = SQLFORM(db.gas_chromatography,each.id,showid=False,readonly=True)\n    j=1\n    t_ep_1=TABLE(FIELDSET(TAG.legend("SAMPLE EXTRACTION"),TABLE(form[0][:j+7]),TABLE(FIELDSET(TAG.legend("Extract Storage:"),TABLE(form[0][j+7:j+11])))))\n    t_ep_2=TABLE(FIELDSET(TAG.legend("SAMPLE PREPARATION"),TABLE(form[0][j+11:15])))\n    i=15\n    t1=TABLE(FIELDSET(TAG.legend("CHROMATOGRAPHY INSTRUMENTAL"),TABLE(form[0][15:i+4])))\n    t3=TABLE(FIELDSET(TAG.legend("AUTO-INJECTOR DETAILS"),TABLE(form[0][i+4:i+11])))\n    t4=TABLE(FIELDSET(TAG.legend("SEPERATION COLUMN AND PRE/GUARD COLUMN"),TABLE(form[0][i+11:i+19])))\n    t5=TABLE(FIELDSET(TAG.legend("SEPERATION PARAMETERS"),TABLE(form[0][i+19:i+26])))\n    t6=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+26:i+29]),TABLE(FIELDSET(TAG.legend("Cycle per"),TABLE(form[0][i+29:i+33])))))\n    t7=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+33:])))\n    form[0]=TABLE(FIELDSET(t_ep_1,t_ep_2,t1,t3,t4,t5,t6,t7))\n    lc_forms.append(form[0])\n \n  ms_forms = []\n  for each in ms:\n    form = SQLFORM(db.mass_spectroscopy,each.id,showid=False,readonly=True)\n    i=1\n    t1=TABLE(FIELDSET(TAG.legend("INSTRUMENTAL DETAILS"),TABLE(form[0][:i+4])))\n    t2=TABLE(FIELDSET(TAG.legend("IONISATION SOURCE"),TABLE(form[0][i+4:i+10])))\n    t3=TABLE(FIELDSET(TAG.legend("MASS ANALYZER"),TABLE(form[0][i+10:i+18]),TABLE(FIELDSET(TAG.legend("Lock spray"),TABLE(form[0][i+18:i+22]))),TABLE(form[0][i+22:i+23])))\n    t4=TABLE(FIELDSET(TAG.legend("QUALITY CONTROL"),TABLE(form[0][i+23:i+27])))\n    t5=TABLE(FIELDSET(TAG.legend("DATA ACQUISITION"),TABLE(form[0][i+27:])))\n    form[0]=TABLE(FIELDSET(t1,t2,t3,t4,t5))  \n    ms_forms.append(form[0])\n\n  raw_forms = []\n  for each in raw_storage:\n     form = SQLFORM(db.raw_data_storage_information,each.id,showid=False,readonly=True)\n     raw_forms.append(form[0])\n\n\n  return locals() \n\n#def grid():\n  # query=((db.project.project_status==0)&(db.experiment.project==db.project.id)&(db.sample.experiment==db.experiment.id)&(db.biosource.sample_name==db.sample.id))\n   #query=((db.sample.project==db.project.id)&(db.project.id>0))\n   #query=((db.project.id>0)&(db.sample.project==db.project.id)&((db.sample.id==db.biosource.sample_name)&(db.sample.id==db.plant_growth_condition.sample_name)))\n#   query=((db.sample.experiment==db.experiment.id)&((db.sample.id==db.biosource.sample_name)|(db.sample.id==db.plant_growth_condition.sample_name)))\n#   grid = SQLFORM.grid(query)\n#   return locals()\n\n\ndef search():\n    form=FORM(\'Your name:\',\n              INPUT(_name=\'name\', requires=IS_NOT_EMPTY()),\n              INPUT(_type=\'submit\'))\n    if form.accepts(request,session):\n      redirect(URL(\'sample\',args=form.vars.name)) \n    return locals()\n    \ndef multiple_files():\n   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """\n   """ per sample . takes id of the sample as the input """\n   sid = request.args(0)\n   sample = db(db.sample.id == sid).select().first() \n   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)\n   form = SQLFORM(db.sample_files)\n   form.vars.sample = sid\n   return locals()\n\n\n\nresponse._vars=response._caller(list_all_dev_projects)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.TypeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.TypeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.TypeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.TypeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.TypeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.TypeError object>'
p23
sS'__reduce__'
p24
S'<built-in method __reduce__ of exceptions.TypeError object>'
p25
sS'__str__'
p26
S"<method-wrapper '__str__' of exceptions.TypeError object>"
p27
sS'__format__'
p28
S'<built-in method __format__ of exceptions.TypeError object>'
p29
sS'__getattribute__'
p30
S"<method-wrapper '__getattribute__' of exceptions.TypeError object>"
p31
sS'__class__'
p32
S"<type 'exceptions.TypeError'>"
p33
sS'__unicode__'
p34
S'<built-in method __unicode__ of exceptions.TypeError object>'
p35
sS'__delattr__'
p36
S"<method-wrapper '__delattr__' of exceptions.TypeError object>"
p37
sS'__subclasshook__'
p38
S'<built-in method __subclasshook__ of type object>'
p39
sS'__repr__'
p40
S"<method-wrapper '__repr__' of exceptions.TypeError object>"
p41
sS'args'
p42
S'(\'can only concatenate list (not "int") to list\',)'
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.TypeError object>'
p47
sS'__doc__'
p48
S"'Inappropriate argument type.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.TypeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S'can only concatenate list (not "int") to list'
p55
sS'request'
p56
ccopy_reg
_reconstructor
p57
(cgluon.html
BEAUTIFY
p58
c__builtin__
object
p59
NtRp60
(dp61
S'attributes'
p62
(dp63
sS'components'
p64
(lp65
g57
(cgluon.html
TABLE
p66
g59
NtRp67
(dp68
g62
(dp69
S'level'
p70
I5
ssS'parent'
p71
Nsg64
(lp72
g57
(cgluon.html
TR
p73
g59
NtRp74
(dp75
g62
(dp76
sg71
g67
sg64
(lp77
g57
(cgluon.html
TD
p78
g59
NtRp79
(dp80
g62
(dp81
S'_style'
p82
S'font-weight:bold;vertical-align:top'
p83
ssg71
g74
sg64
(lp84
S'ajax'
p85
asbag57
(g78
g59
NtRp86
(dp87
g62
(dp88
S'_valign'
p89
S'top'
p90
ssg71
g74
sg64
(lp91
S':'
asbag57
(g78
g59
NtRp92
(dp93
g62
(dp94
sg71
g74
sg64
(lp95
g57
(g58
g59
NtRp96
(dp97
g62
(dp98
g70
I5
ssg71
g92
sg64
(lp99
S'False'
p100
asbasbasbag57
(g73
g59
NtRp101
(dp102
g62
(dp103
sg71
g67
sg64
(lp104
g57
(g78
g59
NtRp105
(dp106
g62
(dp107
g82
g83
ssg71
g101
sg64
(lp108
S'application'
p109
asbag57
(g78
g59
NtRp110
(dp111
g62
(dp112
g89
g90
ssg71
g101
sg64
(lp113
S':'
asbag57
(g78
g59
NtRp114
(dp115
g62
(dp116
sg71
g101
sg64
(lp117
g57
(g58
g59
NtRp118
(dp119
g62
(dp120
g70
I5
ssg71
g114
sg64
(lp121
S'DEV_bootstrap_ch'
p122
asbasbasbag57
(g73
g59
NtRp123
(dp124
g62
(dp125
sg71
g67
sg64
(lp126
g57
(g78
g59
NtRp127
(dp128
g62
(dp129
g82
g83
ssg71
g123
sg64
(lp130
g42
asbag57
(g78
g59
NtRp131
(dp132
g62
(dp133
g89
g90
ssg71
g123
sg64
(lp134
S':'
asbag57
(g78
g59
NtRp135
(dp136
g62
(dp137
sg71
g123
sg64
(lp138
g57
(g58
g59
NtRp139
(dp140
g62
(dp141
g70
I5
ssg71
g135
sg64
(lp142
g57
(g66
g59
NtRp143
(dp144
g62
(dp145
g70
I4
ssg71
Nsg64
(lp146
g57
(g73
g59
NtRp147
(dp148
g62
(dp149
sg71
g143
sg64
(lp150
g57
(g78
g59
NtRp151
(dp152
g62
(dp153
sg71
g147
sg64
(lp154
g57
(g58
g59
NtRp155
(dp156
g62
(dp157
g70
I4
ssg71
g151
sg64
(lp158
S'project'
p159
asbasbasbag57
(g73
g59
NtRp160
(dp161
g62
(dp162
sg71
g143
sg64
(lp163
g57
(g78
g59
NtRp164
(dp165
g62
(dp166
sg71
g160
sg64
(lp167
g57
(g58
g59
NtRp168
(dp169
g62
(dp170
g70
I4
ssg71
g164
sg64
(lp171
S'experiment.project'
p172
asbasbasbag57
(g73
g59
NtRp173
(dp174
g62
(dp175
sg71
g143
sg64
(lp176
g57
(g78
g59
NtRp177
(dp178
g62
(dp179
sg71
g173
sg64
(lp180
g57
(g58
g59
NtRp181
(dp182
g62
(dp183
g70
I4
ssg71
g177
sg64
(lp184
S'1'
asbasbasbag57
(g73
g59
NtRp185
(dp186
g62
(dp187
sg71
g143
sg64
(lp188
g57
(g78
g59
NtRp189
(dp190
g62
(dp191
sg71
g185
sg64
(lp192
g57
(g58
g59
NtRp193
(dp194
g62
(dp195
g70
I4
ssg71
g189
sg64
(lp196
S'sample.experiment'
p197
asbasbasbag57
(g73
g59
NtRp198
(dp199
g62
(dp200
sg71
g143
sg64
(lp201
g57
(g78
g59
NtRp202
(dp203
g62
(dp204
sg71
g198
sg64
(lp205
g57
(g58
g59
NtRp206
(dp207
g62
(dp208
g70
I4
ssg71
g202
sg64
(lp209
S'1'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp210
(dp211
g62
(dp212
sg71
g67
sg64
(lp213
g57
(g78
g59
NtRp214
(dp215
g62
(dp216
g82
g83
ssg71
g210
sg64
(lp217
S'body'
p218
asbag57
(g78
g59
NtRp219
(dp220
g62
(dp221
g89
g90
ssg71
g210
sg64
(lp222
S':'
asbag57
(g78
g59
NtRp223
(dp224
g62
(dp225
sg71
g210
sg64
(lp226
g57
(g58
g59
NtRp227
(dp228
g62
(dp229
g70
I5
ssg71
g223
sg64
(lp230
S'<cStringIO.StringO object at 0xadc05a20>'
p231
asbasbasbag57
(g73
g59
NtRp232
(dp233
g62
(dp234
sg71
g67
sg64
(lp235
g57
(g78
g59
NtRp236
(dp237
g62
(dp238
g82
g83
ssg71
g232
sg64
(lp239
S'cid'
p240
asbag57
(g78
g59
NtRp241
(dp242
g62
(dp243
g89
g90
ssg71
g232
sg64
(lp244
S':'
asbag57
(g78
g59
NtRp245
(dp246
g62
(dp247
sg71
g232
sg64
(lp248
g57
(g58
g59
NtRp249
(dp250
g62
(dp251
g70
I5
ssg71
g245
sg64
(lp252
S'None'
p253
asbasbasbag57
(g73
g59
NtRp254
(dp255
g62
(dp256
sg71
g67
sg64
(lp257
g57
(g78
g59
NtRp258
(dp259
g62
(dp260
g82
g83
ssg71
g254
sg64
(lp261
S'client'
p262
asbag57
(g78
g59
NtRp263
(dp264
g62
(dp265
g89
g90
ssg71
g254
sg64
(lp266
S':'
asbag57
(g78
g59
NtRp267
(dp268
g62
(dp269
sg71
g254
sg64
(lp270
g57
(g58
g59
NtRp271
(dp272
g62
(dp273
g70
I5
ssg71
g267
sg64
(lp274
S'127.0.0.1'
p275
asbasbasbag57
(g73
g59
NtRp276
(dp277
g62
(dp278
sg71
g67
sg64
(lp279
g57
(g78
g59
NtRp280
(dp281
g62
(dp282
g82
g83
ssg71
g276
sg64
(lp283
S'controller'
p284
asbag57
(g78
g59
NtRp285
(dp286
g62
(dp287
g89
g90
ssg71
g276
sg64
(lp288
S':'
asbag57
(g78
g59
NtRp289
(dp290
g62
(dp291
sg71
g276
sg64
(lp292
g57
(g58
g59
NtRp293
(dp294
g62
(dp295
g70
I5
ssg71
g289
sg64
(lp296
S'default'
p297
asbasbasbag57
(g73
g59
NtRp298
(dp299
g62
(dp300
sg71
g67
sg64
(lp301
g57
(g78
g59
NtRp302
(dp303
g62
(dp304
g82
g83
ssg71
g298
sg64
(lp305
S'cookies'
p306
asbag57
(g78
g59
NtRp307
(dp308
g62
(dp309
g89
g90
ssg71
g298
sg64
(lp310
S':'
asbag57
(g78
g59
NtRp311
(dp312
g62
(dp313
sg71
g298
sg64
(lp314
g57
(g58
g59
NtRp315
(dp316
g62
(dp317
g70
I5
ssg71
g311
sg64
(lp318
g57
(g66
g59
NtRp319
(dp320
g62
(dp321
g70
I4
ssg71
Nsg64
(lp322
g57
(g73
g59
NtRp323
(dp324
g62
(dp325
sg71
g319
sg64
(lp326
g57
(g78
g59
NtRp327
(dp328
g62
(dp329
g82
g83
ssg71
g323
sg64
(lp330
S'session_id_dev_bootstrap_ch'
p331
asbag57
(g78
g59
NtRp332
(dp333
g62
(dp334
g89
g90
ssg71
g323
sg64
(lp335
S':'
asbag57
(g78
g59
NtRp336
(dp337
g62
(dp338
sg71
g323
sg64
(lp339
g57
(g58
g59
NtRp340
(dp341
g62
(dp342
g70
I4
ssg71
g336
sg64
(lp343
S'127.0.0.1-270b038b-df00-4d5c-949a-e87692880510'
p344
ag57
(g66
g59
NtRp345
(dp346
g62
(dp347
g70
I3
ssg71
Nsg64
(lp348
g57
(g73
g59
NtRp349
(dp350
g62
(dp351
sg71
g345
sg64
(lp352
g57
(g78
g59
NtRp353
(dp354
g62
(dp355
g82
g83
ssg71
g349
sg64
(lp356
S'comment'
p357
asbag57
(g78
g59
NtRp358
(dp359
g62
(dp360
g89
g90
ssg71
g349
sg64
(lp361
S':'
asbag57
(g78
g59
NtRp362
(dp363
g62
(dp364
sg71
g349
sg64
(lp365
g57
(g58
g59
NtRp366
(dp367
g62
(dp368
g70
I3
ssg71
g362
sg64
(lp369
S''
asbasbasbag57
(g73
g59
NtRp370
(dp371
g62
(dp372
sg71
g345
sg64
(lp373
g57
(g78
g59
NtRp374
(dp375
g62
(dp376
g82
g83
ssg71
g370
sg64
(lp377
S'domain'
p378
asbag57
(g78
g59
NtRp379
(dp380
g62
(dp381
g89
g90
ssg71
g370
sg64
(lp382
S':'
asbag57
(g78
g59
NtRp383
(dp384
g62
(dp385
sg71
g370
sg64
(lp386
g57
(g58
g59
NtRp387
(dp388
g62
(dp389
g70
I3
ssg71
g383
sg64
(lp390
S''
asbasbasbag57
(g73
g59
NtRp391
(dp392
g62
(dp393
sg71
g345
sg64
(lp394
g57
(g78
g59
NtRp395
(dp396
g62
(dp397
g82
g83
ssg71
g391
sg64
(lp398
S'expires'
p399
asbag57
(g78
g59
NtRp400
(dp401
g62
(dp402
g89
g90
ssg71
g391
sg64
(lp403
S':'
asbag57
(g78
g59
NtRp404
(dp405
g62
(dp406
sg71
g391
sg64
(lp407
g57
(g58
g59
NtRp408
(dp409
g62
(dp410
g70
I3
ssg71
g404
sg64
(lp411
S''
asbasbasbag57
(g73
g59
NtRp412
(dp413
g62
(dp414
sg71
g345
sg64
(lp415
g57
(g78
g59
NtRp416
(dp417
g62
(dp418
g82
g83
ssg71
g412
sg64
(lp419
S'httponly'
p420
asbag57
(g78
g59
NtRp421
(dp422
g62
(dp423
g89
g90
ssg71
g412
sg64
(lp424
S':'
asbag57
(g78
g59
NtRp425
(dp426
g62
(dp427
sg71
g412
sg64
(lp428
g57
(g58
g59
NtRp429
(dp430
g62
(dp431
g70
I3
ssg71
g425
sg64
(lp432
S''
asbasbasbag57
(g73
g59
NtRp433
(dp434
g62
(dp435
sg71
g345
sg64
(lp436
g57
(g78
g59
NtRp437
(dp438
g62
(dp439
g82
g83
ssg71
g433
sg64
(lp440
S'max-age'
p441
asbag57
(g78
g59
NtRp442
(dp443
g62
(dp444
g89
g90
ssg71
g433
sg64
(lp445
S':'
asbag57
(g78
g59
NtRp446
(dp447
g62
(dp448
sg71
g433
sg64
(lp449
g57
(g58
g59
NtRp450
(dp451
g62
(dp452
g70
I3
ssg71
g446
sg64
(lp453
S''
asbasbasbag57
(g73
g59
NtRp454
(dp455
g62
(dp456
sg71
g345
sg64
(lp457
g57
(g78
g59
NtRp458
(dp459
g62
(dp460
g82
g83
ssg71
g454
sg64
(lp461
S'path'
p462
asbag57
(g78
g59
NtRp463
(dp464
g62
(dp465
g89
g90
ssg71
g454
sg64
(lp466
S':'
asbag57
(g78
g59
NtRp467
(dp468
g62
(dp469
sg71
g454
sg64
(lp470
g57
(g58
g59
NtRp471
(dp472
g62
(dp473
g70
I3
ssg71
g467
sg64
(lp474
S''
asbasbasbag57
(g73
g59
NtRp475
(dp476
g62
(dp477
sg71
g345
sg64
(lp478
g57
(g78
g59
NtRp479
(dp480
g62
(dp481
g82
g83
ssg71
g475
sg64
(lp482
S'secure'
p483
asbag57
(g78
g59
NtRp484
(dp485
g62
(dp486
g89
g90
ssg71
g475
sg64
(lp487
S':'
asbag57
(g78
g59
NtRp488
(dp489
g62
(dp490
sg71
g475
sg64
(lp491
g57
(g58
g59
NtRp492
(dp493
g62
(dp494
g70
I3
ssg71
g488
sg64
(lp495
S''
asbasbasbag57
(g73
g59
NtRp496
(dp497
g62
(dp498
sg71
g345
sg64
(lp499
g57
(g78
g59
NtRp500
(dp501
g62
(dp502
g82
g83
ssg71
g496
sg64
(lp503
S'version'
p504
asbag57
(g78
g59
NtRp505
(dp506
g62
(dp507
g89
g90
ssg71
g496
sg64
(lp508
S':'
asbag57
(g78
g59
NtRp509
(dp510
g62
(dp511
sg71
g496
sg64
(lp512
g57
(g58
g59
NtRp513
(dp514
g62
(dp515
g70
I3
ssg71
g509
sg64
(lp516
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp517
(dp518
g62
(dp519
sg71
g67
sg64
(lp520
g57
(g78
g59
NtRp521
(dp522
g62
(dp523
g82
g83
ssg71
g517
sg64
(lp524
S'env'
p525
asbag57
(g78
g59
NtRp526
(dp527
g62
(dp528
g89
g90
ssg71
g517
sg64
(lp529
S':'
asbag57
(g78
g59
NtRp530
(dp531
g62
(dp532
sg71
g517
sg64
(lp533
g57
(g58
g59
NtRp534
(dp535
g62
(dp536
g70
I5
ssg71
g530
sg64
(lp537
g57
(g66
g59
NtRp538
(dp539
g62
(dp540
g70
I4
ssg71
Nsg64
(lp541
g57
(g73
g59
NtRp542
(dp543
g62
(dp544
sg71
g538
sg64
(lp545
g57
(g78
g59
NtRp546
(dp547
g62
(dp548
g82
g83
ssg71
g542
sg64
(lp549
S'app_folders'
p550
asbag57
(g78
g59
NtRp551
(dp552
g62
(dp553
g89
g90
ssg71
g542
sg64
(lp554
S':'
asbag57
(g78
g59
NtRp555
(dp556
g62
(dp557
sg71
g542
sg64
(lp558
g57
(g58
g59
NtRp559
(dp560
g62
(dp561
g70
I4
ssg71
g555
sg64
(lp562
S"set(['/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/'])"
p563
asbasbasbag57
(g73
g59
NtRp564
(dp565
g62
(dp566
sg71
g538
sg64
(lp567
g57
(g78
g59
NtRp568
(dp569
g62
(dp570
g82
g83
ssg71
g564
sg64
(lp571
S'applications_parent'
p572
asbag57
(g78
g59
NtRp573
(dp574
g62
(dp575
g89
g90
ssg71
g564
sg64
(lp576
S':'
asbag57
(g78
g59
NtRp577
(dp578
g62
(dp579
sg71
g564
sg64
(lp580
g57
(g58
g59
NtRp581
(dp582
g62
(dp583
g70
I4
ssg71
g577
sg64
(lp584
S'/home/anil/bootstrap/web2py'
p585
asbasbasbag57
(g73
g59
NtRp586
(dp587
g62
(dp588
sg71
g538
sg64
(lp589
g57
(g78
g59
NtRp590
(dp591
g62
(dp592
g82
g83
ssg71
g586
sg64
(lp593
S'cmd_args'
p594
asbag57
(g78
g59
NtRp595
(dp596
g62
(dp597
g89
g90
ssg71
g586
sg64
(lp598
S':'
asbag57
(g78
g59
NtRp599
(dp600
g62
(dp601
sg71
g586
sg64
(lp602
g57
(g58
g59
NtRp603
(dp604
g62
(dp605
g70
I4
ssg71
g599
sg64
(lp606
g57
(g66
g59
NtRp607
(dp608
g62
(dp609
g70
I3
ssg71
Nsg64
(lp610
sbasbasbasbag57
(g73
g59
NtRp611
(dp612
g62
(dp613
sg71
g538
sg64
(lp614
g57
(g78
g59
NtRp615
(dp616
g62
(dp617
g82
g83
ssg71
g611
sg64
(lp618
S'cmd_options'
p619
asbag57
(g78
g59
NtRp620
(dp621
g62
(dp622
g89
g90
ssg71
g611
sg64
(lp623
S':'
asbag57
(g78
g59
NtRp624
(dp625
g62
(dp626
sg71
g611
sg64
(lp627
g57
(g58
g59
NtRp628
(dp629
g62
(dp630
g70
I4
ssg71
g624
sg64
(lp631
S"<Values at 0x936ef8c: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/bootstrap/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p632
asbasbasbag57
(g73
g59
NtRp633
(dp634
g62
(dp635
sg71
g538
sg64
(lp636
g57
(g78
g59
NtRp637
(dp638
g62
(dp639
g82
g83
ssg71
g633
sg64
(lp640
S'db_sessions'
p641
asbag57
(g78
g59
NtRp642
(dp643
g62
(dp644
g89
g90
ssg71
g633
sg64
(lp645
S':'
asbag57
(g78
g59
NtRp646
(dp647
g62
(dp648
sg71
g633
sg64
(lp649
g57
(g58
g59
NtRp650
(dp651
g62
(dp652
g70
I4
ssg71
g646
sg64
(lp653
S'set([])'
p654
asbasbasbag57
(g73
g59
NtRp655
(dp656
g62
(dp657
sg71
g538
sg64
(lp658
g57
(g78
g59
NtRp659
(dp660
g62
(dp661
g82
g83
ssg71
g655
sg64
(lp662
S'debugging'
p663
asbag57
(g78
g59
NtRp664
(dp665
g62
(dp666
g89
g90
ssg71
g655
sg64
(lp667
S':'
asbag57
(g78
g59
NtRp668
(dp669
g62
(dp670
sg71
g655
sg64
(lp671
g57
(g58
g59
NtRp672
(dp673
g62
(dp674
g70
I4
ssg71
g668
sg64
(lp675
g100
asbasbasbag57
(g73
g59
NtRp676
(dp677
g62
(dp678
sg71
g538
sg64
(lp679
g57
(g78
g59
NtRp680
(dp681
g62
(dp682
g82
g83
ssg71
g676
sg64
(lp683
S'gluon_parent'
p684
asbag57
(g78
g59
NtRp685
(dp686
g62
(dp687
g89
g90
ssg71
g676
sg64
(lp688
S':'
asbag57
(g78
g59
NtRp689
(dp690
g62
(dp691
sg71
g676
sg64
(lp692
g57
(g58
g59
NtRp693
(dp694
g62
(dp695
g70
I4
ssg71
g689
sg64
(lp696
S'/home/anil/bootstrap/web2py'
p697
asbasbasbag57
(g73
g59
NtRp698
(dp699
g62
(dp700
sg71
g538
sg64
(lp701
g57
(g78
g59
NtRp702
(dp703
g62
(dp704
g82
g83
ssg71
g698
sg64
(lp705
S'http_accept'
p706
asbag57
(g78
g59
NtRp707
(dp708
g62
(dp709
g89
g90
ssg71
g698
sg64
(lp710
S':'
asbag57
(g78
g59
NtRp711
(dp712
g62
(dp713
sg71
g698
sg64
(lp714
g57
(g58
g59
NtRp715
(dp716
g62
(dp717
g70
I4
ssg71
g711
sg64
(lp718
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p719
asbasbasbag57
(g73
g59
NtRp720
(dp721
g62
(dp722
sg71
g538
sg64
(lp723
g57
(g78
g59
NtRp724
(dp725
g62
(dp726
g82
g83
ssg71
g720
sg64
(lp727
S'http_accept_charset'
p728
asbag57
(g78
g59
NtRp729
(dp730
g62
(dp731
g89
g90
ssg71
g720
sg64
(lp732
S':'
asbag57
(g78
g59
NtRp733
(dp734
g62
(dp735
sg71
g720
sg64
(lp736
g57
(g58
g59
NtRp737
(dp738
g62
(dp739
g70
I4
ssg71
g733
sg64
(lp740
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p741
asbasbasbag57
(g73
g59
NtRp742
(dp743
g62
(dp744
sg71
g538
sg64
(lp745
g57
(g78
g59
NtRp746
(dp747
g62
(dp748
g82
g83
ssg71
g742
sg64
(lp749
S'http_accept_encoding'
p750
asbag57
(g78
g59
NtRp751
(dp752
g62
(dp753
g89
g90
ssg71
g742
sg64
(lp754
S':'
asbag57
(g78
g59
NtRp755
(dp756
g62
(dp757
sg71
g742
sg64
(lp758
g57
(g58
g59
NtRp759
(dp760
g62
(dp761
g70
I4
ssg71
g755
sg64
(lp762
S'gzip,deflate,sdch'
p763
asbasbasbag57
(g73
g59
NtRp764
(dp765
g62
(dp766
sg71
g538
sg64
(lp767
g57
(g78
g59
NtRp768
(dp769
g62
(dp770
g82
g83
ssg71
g764
sg64
(lp771
S'http_accept_language'
p772
asbag57
(g78
g59
NtRp773
(dp774
g62
(dp775
g89
g90
ssg71
g764
sg64
(lp776
S':'
asbag57
(g78
g59
NtRp777
(dp778
g62
(dp779
sg71
g764
sg64
(lp780
g57
(g58
g59
NtRp781
(dp782
g62
(dp783
g70
I4
ssg71
g777
sg64
(lp784
S'en-US,en;q=0.8'
p785
asbasbasbag57
(g73
g59
NtRp786
(dp787
g62
(dp788
sg71
g538
sg64
(lp789
g57
(g78
g59
NtRp790
(dp791
g62
(dp792
g82
g83
ssg71
g786
sg64
(lp793
S'http_cache_control'
p794
asbag57
(g78
g59
NtRp795
(dp796
g62
(dp797
g89
g90
ssg71
g786
sg64
(lp798
S':'
asbag57
(g78
g59
NtRp799
(dp800
g62
(dp801
sg71
g786
sg64
(lp802
g57
(g58
g59
NtRp803
(dp804
g62
(dp805
g70
I4
ssg71
g799
sg64
(lp806
S'max-age=0'
p807
asbasbasbag57
(g73
g59
NtRp808
(dp809
g62
(dp810
sg71
g538
sg64
(lp811
g57
(g78
g59
NtRp812
(dp813
g62
(dp814
g82
g83
ssg71
g808
sg64
(lp815
S'http_connection'
p816
asbag57
(g78
g59
NtRp817
(dp818
g62
(dp819
g89
g90
ssg71
g808
sg64
(lp820
S':'
asbag57
(g78
g59
NtRp821
(dp822
g62
(dp823
sg71
g808
sg64
(lp824
g57
(g58
g59
NtRp825
(dp826
g62
(dp827
g70
I4
ssg71
g821
sg64
(lp828
S'keep-alive'
p829
asbasbasbag57
(g73
g59
NtRp830
(dp831
g62
(dp832
sg71
g538
sg64
(lp833
g57
(g78
g59
NtRp834
(dp835
g62
(dp836
g82
g83
ssg71
g830
sg64
(lp837
S'http_cookie'
p838
asbag57
(g78
g59
NtRp839
(dp840
g62
(dp841
g89
g90
ssg71
g830
sg64
(lp842
S':'
asbag57
(g78
g59
NtRp843
(dp844
g62
(dp845
sg71
g830
sg64
(lp846
g57
(g58
g59
NtRp847
(dp848
g62
(dp849
g70
I4
ssg71
g843
sg64
(lp850
S'session_id_dev_bootstrap_ch=127.0.0.1-270b038b-df00-4d5c-949a-e87692880510'
p851
asbasbasbag57
(g73
g59
NtRp852
(dp853
g62
(dp854
sg71
g538
sg64
(lp855
g57
(g78
g59
NtRp856
(dp857
g62
(dp858
g82
g83
ssg71
g852
sg64
(lp859
S'http_host'
p860
asbag57
(g78
g59
NtRp861
(dp862
g62
(dp863
g89
g90
ssg71
g852
sg64
(lp864
S':'
asbag57
(g78
g59
NtRp865
(dp866
g62
(dp867
sg71
g852
sg64
(lp868
g57
(g58
g59
NtRp869
(dp870
g62
(dp871
g70
I4
ssg71
g865
sg64
(lp872
S'127.0.0.1:8000'
p873
asbasbasbag57
(g73
g59
NtRp874
(dp875
g62
(dp876
sg71
g538
sg64
(lp877
g57
(g78
g59
NtRp878
(dp879
g62
(dp880
g82
g83
ssg71
g874
sg64
(lp881
S'http_referer'
p882
asbag57
(g78
g59
NtRp883
(dp884
g62
(dp885
g89
g90
ssg71
g874
sg64
(lp886
S':'
asbag57
(g78
g59
NtRp887
(dp888
g62
(dp889
sg71
g874
sg64
(lp890
g57
(g58
g59
NtRp891
(dp892
g62
(dp893
g70
I4
ssg71
g887
sg64
(lp894
S'http://127.0.0.1:8000/DEV_bootstrap_ch/default/list_all_dev_projects/project/experiment.project/1'
p895
asbasbasbag57
(g73
g59
NtRp896
(dp897
g62
(dp898
sg71
g538
sg64
(lp899
g57
(g78
g59
NtRp900
(dp901
g62
(dp902
g82
g83
ssg71
g896
sg64
(lp903
S'http_user_agent'
p904
asbag57
(g78
g59
NtRp905
(dp906
g62
(dp907
g89
g90
ssg71
g896
sg64
(lp908
S':'
asbag57
(g78
g59
NtRp909
(dp910
g62
(dp911
sg71
g896
sg64
(lp912
g57
(g58
g59
NtRp913
(dp914
g62
(dp915
g70
I4
ssg71
g909
sg64
(lp916
S'Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.10 Safari/537.31'
p917
asbasbasbag57
(g73
g59
NtRp918
(dp919
g62
(dp920
sg71
g538
sg64
(lp921
g57
(g78
g59
NtRp922
(dp923
g62
(dp924
g82
g83
ssg71
g918
sg64
(lp925
S'is_jython'
p926
asbag57
(g78
g59
NtRp927
(dp928
g62
(dp929
g89
g90
ssg71
g918
sg64
(lp930
S':'
asbag57
(g78
g59
NtRp931
(dp932
g62
(dp933
sg71
g918
sg64
(lp934
g57
(g58
g59
NtRp935
(dp936
g62
(dp937
g70
I4
ssg71
g931
sg64
(lp938
g100
asbasbasbag57
(g73
g59
NtRp939
(dp940
g62
(dp941
sg71
g538
sg64
(lp942
g57
(g78
g59
NtRp943
(dp944
g62
(dp945
g82
g83
ssg71
g939
sg64
(lp946
S'is_pypy'
p947
asbag57
(g78
g59
NtRp948
(dp949
g62
(dp950
g89
g90
ssg71
g939
sg64
(lp951
S':'
asbag57
(g78
g59
NtRp952
(dp953
g62
(dp954
sg71
g939
sg64
(lp955
g57
(g58
g59
NtRp956
(dp957
g62
(dp958
g70
I4
ssg71
g952
sg64
(lp959
g100
asbasbasbag57
(g73
g59
NtRp960
(dp961
g62
(dp962
sg71
g538
sg64
(lp963
g57
(g78
g59
NtRp964
(dp965
g62
(dp966
g82
g83
ssg71
g960
sg64
(lp967
S'local_hosts'
p968
asbag57
(g78
g59
NtRp969
(dp970
g62
(dp971
g89
g90
ssg71
g960
sg64
(lp972
S':'
asbag57
(g78
g59
NtRp973
(dp974
g62
(dp975
sg71
g960
sg64
(lp976
g57
(g58
g59
NtRp977
(dp978
g62
(dp979
g70
I4
ssg71
g973
sg64
(lp980
g57
(g66
g59
NtRp981
(dp982
g62
(dp983
g70
I3
ssg71
Nsg64
(lp984
g57
(g73
g59
NtRp985
(dp986
g62
(dp987
sg71
g981
sg64
(lp988
g57
(g78
g59
NtRp989
(dp990
g62
(dp991
sg71
g985
sg64
(lp992
g57
(g58
g59
NtRp993
(dp994
g62
(dp995
g70
I3
ssg71
g989
sg64
(lp996
S'::1'
p997
asbasbasbag57
(g73
g59
NtRp998
(dp999
g62
(dp1000
sg71
g981
sg64
(lp1001
g57
(g78
g59
NtRp1002
(dp1003
g62
(dp1004
sg71
g998
sg64
(lp1005
g57
(g58
g59
NtRp1006
(dp1007
g62
(dp1008
g70
I3
ssg71
g1002
sg64
(lp1009
S'127.0.1.1'
p1010
asbasbasbag57
(g73
g59
NtRp1011
(dp1012
g62
(dp1013
sg71
g981
sg64
(lp1014
g57
(g78
g59
NtRp1015
(dp1016
g62
(dp1017
sg71
g1011
sg64
(lp1018
g57
(g58
g59
NtRp1019
(dp1020
g62
(dp1021
g70
I3
ssg71
g1015
sg64
(lp1022
S'::ffff:127.0.0.1'
p1023
asbasbasbag57
(g73
g59
NtRp1024
(dp1025
g62
(dp1026
sg71
g981
sg64
(lp1027
g57
(g78
g59
NtRp1028
(dp1029
g62
(dp1030
sg71
g1024
sg64
(lp1031
g57
(g58
g59
NtRp1032
(dp1033
g62
(dp1034
g70
I3
ssg71
g1028
sg64
(lp1035
S'127.0.0.1'
p1036
asbasbasbag57
(g73
g59
NtRp1037
(dp1038
g62
(dp1039
sg71
g981
sg64
(lp1040
g57
(g78
g59
NtRp1041
(dp1042
g62
(dp1043
sg71
g1037
sg64
(lp1044
g57
(g58
g59
NtRp1045
(dp1046
g62
(dp1047
g70
I3
ssg71
g1041
sg64
(lp1048
S'anil-Inspiron-1525'
p1049
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1050
(dp1051
g62
(dp1052
sg71
g538
sg64
(lp1053
g57
(g78
g59
NtRp1054
(dp1055
g62
(dp1056
g82
g83
ssg71
g1050
sg64
(lp1057
S'path_info'
p1058
asbag57
(g78
g59
NtRp1059
(dp1060
g62
(dp1061
g89
g90
ssg71
g1050
sg64
(lp1062
S':'
asbag57
(g78
g59
NtRp1063
(dp1064
g62
(dp1065
sg71
g1050
sg64
(lp1066
g57
(g58
g59
NtRp1067
(dp1068
g62
(dp1069
g70
I4
ssg71
g1063
sg64
(lp1070
S'/DEV_bootstrap_ch/default/list_all_dev_projects/project/experiment.project/1/sample.experiment/1'
p1071
asbasbasbag57
(g73
g59
NtRp1072
(dp1073
g62
(dp1074
sg71
g538
sg64
(lp1075
g57
(g78
g59
NtRp1076
(dp1077
g62
(dp1078
g82
g83
ssg71
g1072
sg64
(lp1079
S'query_string'
p1080
asbag57
(g78
g59
NtRp1081
(dp1082
g62
(dp1083
g89
g90
ssg71
g1072
sg64
(lp1084
S':'
asbag57
(g78
g59
NtRp1085
(dp1086
g62
(dp1087
sg71
g1072
sg64
(lp1088
g57
(g58
g59
NtRp1089
(dp1090
g62
(dp1091
g70
I4
ssg71
g1085
sg64
(lp1092
S'_signature=7ef83f1a1fbc1478046ec45b38081f44f469294d'
p1093
asbasbasbag57
(g73
g59
NtRp1094
(dp1095
g62
(dp1096
sg71
g538
sg64
(lp1097
g57
(g78
g59
NtRp1098
(dp1099
g62
(dp1100
g82
g83
ssg71
g1094
sg64
(lp1101
S'remote_addr'
p1102
asbag57
(g78
g59
NtRp1103
(dp1104
g62
(dp1105
g89
g90
ssg71
g1094
sg64
(lp1106
S':'
asbag57
(g78
g59
NtRp1107
(dp1108
g62
(dp1109
sg71
g1094
sg64
(lp1110
g57
(g58
g59
NtRp1111
(dp1112
g62
(dp1113
g70
I4
ssg71
g1107
sg64
(lp1114
g275
asbasbasbag57
(g73
g59
NtRp1115
(dp1116
g62
(dp1117
sg71
g538
sg64
(lp1118
g57
(g78
g59
NtRp1119
(dp1120
g62
(dp1121
g82
g83
ssg71
g1115
sg64
(lp1122
S'remote_port'
p1123
asbag57
(g78
g59
NtRp1124
(dp1125
g62
(dp1126
g89
g90
ssg71
g1115
sg64
(lp1127
S':'
asbag57
(g78
g59
NtRp1128
(dp1129
g62
(dp1130
sg71
g1115
sg64
(lp1131
g57
(g58
g59
NtRp1132
(dp1133
g62
(dp1134
g70
I4
ssg71
g1128
sg64
(lp1135
S'58098'
p1136
asbasbasbag57
(g73
g59
NtRp1137
(dp1138
g62
(dp1139
sg71
g538
sg64
(lp1140
g57
(g78
g59
NtRp1141
(dp1142
g62
(dp1143
g82
g83
ssg71
g1137
sg64
(lp1144
S'request_method'
p1145
asbag57
(g78
g59
NtRp1146
(dp1147
g62
(dp1148
g89
g90
ssg71
g1137
sg64
(lp1149
S':'
asbag57
(g78
g59
NtRp1150
(dp1151
g62
(dp1152
sg71
g1137
sg64
(lp1153
g57
(g58
g59
NtRp1154
(dp1155
g62
(dp1156
g70
I4
ssg71
g1150
sg64
(lp1157
S'GET'
p1158
asbasbasbag57
(g73
g59
NtRp1159
(dp1160
g62
(dp1161
sg71
g538
sg64
(lp1162
g57
(g78
g59
NtRp1163
(dp1164
g62
(dp1165
g82
g83
ssg71
g1159
sg64
(lp1166
S'request_uri'
p1167
asbag57
(g78
g59
NtRp1168
(dp1169
g62
(dp1170
g89
g90
ssg71
g1159
sg64
(lp1171
S':'
asbag57
(g78
g59
NtRp1172
(dp1173
g62
(dp1174
sg71
g1159
sg64
(lp1175
g57
(g58
g59
NtRp1176
(dp1177
g62
(dp1178
g70
I4
ssg71
g1172
sg64
(lp1179
S'/DEV_bootstrap_ch/default/list_all_dev_projects/project/experiment.project/1/sample.experiment/1?_signature=7ef83f1a1fbc1478046ec45b38081f44f469294d'
p1180
asbasbasbag57
(g73
g59
NtRp1181
(dp1182
g62
(dp1183
sg71
g538
sg64
(lp1184
g57
(g78
g59
NtRp1185
(dp1186
g62
(dp1187
g82
g83
ssg71
g1181
sg64
(lp1188
S'script_name'
p1189
asbag57
(g78
g59
NtRp1190
(dp1191
g62
(dp1192
g89
g90
ssg71
g1181
sg64
(lp1193
S':'
asbag57
(g78
g59
NtRp1194
(dp1195
g62
(dp1196
sg71
g1181
sg64
(lp1197
g57
(g58
g59
NtRp1198
(dp1199
g62
(dp1200
g70
I4
ssg71
g1194
sg64
(lp1201
S''
asbasbasbag57
(g73
g59
NtRp1202
(dp1203
g62
(dp1204
sg71
g538
sg64
(lp1205
g57
(g78
g59
NtRp1206
(dp1207
g62
(dp1208
g82
g83
ssg71
g1202
sg64
(lp1209
S'server_name'
p1210
asbag57
(g78
g59
NtRp1211
(dp1212
g62
(dp1213
g89
g90
ssg71
g1202
sg64
(lp1214
S':'
asbag57
(g78
g59
NtRp1215
(dp1216
g62
(dp1217
sg71
g1202
sg64
(lp1218
g57
(g58
g59
NtRp1219
(dp1220
g62
(dp1221
g70
I4
ssg71
g1215
sg64
(lp1222
S'anil-Inspiron-1525'
p1223
asbasbasbag57
(g73
g59
NtRp1224
(dp1225
g62
(dp1226
sg71
g538
sg64
(lp1227
g57
(g78
g59
NtRp1228
(dp1229
g62
(dp1230
g82
g83
ssg71
g1224
sg64
(lp1231
S'server_port'
p1232
asbag57
(g78
g59
NtRp1233
(dp1234
g62
(dp1235
g89
g90
ssg71
g1224
sg64
(lp1236
S':'
asbag57
(g78
g59
NtRp1237
(dp1238
g62
(dp1239
sg71
g1224
sg64
(lp1240
g57
(g58
g59
NtRp1241
(dp1242
g62
(dp1243
g70
I4
ssg71
g1237
sg64
(lp1244
S'8000'
p1245
asbasbasbag57
(g73
g59
NtRp1246
(dp1247
g62
(dp1248
sg71
g538
sg64
(lp1249
g57
(g78
g59
NtRp1250
(dp1251
g62
(dp1252
g82
g83
ssg71
g1246
sg64
(lp1253
S'server_protocol'
p1254
asbag57
(g78
g59
NtRp1255
(dp1256
g62
(dp1257
g89
g90
ssg71
g1246
sg64
(lp1258
S':'
asbag57
(g78
g59
NtRp1259
(dp1260
g62
(dp1261
sg71
g1246
sg64
(lp1262
g57
(g58
g59
NtRp1263
(dp1264
g62
(dp1265
g70
I4
ssg71
g1259
sg64
(lp1266
S'HTTP/1.1'
p1267
asbasbasbag57
(g73
g59
NtRp1268
(dp1269
g62
(dp1270
sg71
g538
sg64
(lp1271
g57
(g78
g59
NtRp1272
(dp1273
g62
(dp1274
g82
g83
ssg71
g1268
sg64
(lp1275
S'server_software'
p1276
asbag57
(g78
g59
NtRp1277
(dp1278
g62
(dp1279
g89
g90
ssg71
g1268
sg64
(lp1280
S':'
asbag57
(g78
g59
NtRp1281
(dp1282
g62
(dp1283
sg71
g1268
sg64
(lp1284
g57
(g58
g59
NtRp1285
(dp1286
g62
(dp1287
g70
I4
ssg71
g1281
sg64
(lp1288
S'Rocket 1.2.6'
p1289
asbasbasbag57
(g73
g59
NtRp1290
(dp1291
g62
(dp1292
sg71
g538
sg64
(lp1293
g57
(g78
g59
NtRp1294
(dp1295
g62
(dp1296
g82
g83
ssg71
g1290
sg64
(lp1297
S'web2py_path'
p1298
asbag57
(g78
g59
NtRp1299
(dp1300
g62
(dp1301
g89
g90
ssg71
g1290
sg64
(lp1302
S':'
asbag57
(g78
g59
NtRp1303
(dp1304
g62
(dp1305
sg71
g1290
sg64
(lp1306
g57
(g58
g59
NtRp1307
(dp1308
g62
(dp1309
g70
I4
ssg71
g1303
sg64
(lp1310
g585
asbasbasbag57
(g73
g59
NtRp1311
(dp1312
g62
(dp1313
sg71
g538
sg64
(lp1314
g57
(g78
g59
NtRp1315
(dp1316
g62
(dp1317
g82
g83
ssg71
g1311
sg64
(lp1318
S'web2py_version'
p1319
asbag57
(g78
g59
NtRp1320
(dp1321
g62
(dp1322
g89
g90
ssg71
g1311
sg64
(lp1323
S':'
asbag57
(g78
g59
NtRp1324
(dp1325
g62
(dp1326
sg71
g1311
sg64
(lp1327
g57
(g58
g59
NtRp1328
(dp1329
g62
(dp1330
g70
I4
ssg71
g1324
sg64
(lp1331
g57
(g66
g59
NtRp1332
(dp1333
g62
(dp1334
g70
I3
ssg71
Nsg64
(lp1335
g57
(g73
g59
NtRp1336
(dp1337
g62
(dp1338
sg71
g1332
sg64
(lp1339
g57
(g78
g59
NtRp1340
(dp1341
g62
(dp1342
sg71
g1336
sg64
(lp1343
g57
(g58
g59
NtRp1344
(dp1345
g62
(dp1346
g70
I3
ssg71
g1340
sg64
(lp1347
S'2'
asbasbasbag57
(g73
g59
NtRp1348
(dp1349
g62
(dp1350
sg71
g1332
sg64
(lp1351
g57
(g78
g59
NtRp1352
(dp1353
g62
(dp1354
sg71
g1348
sg64
(lp1355
g57
(g58
g59
NtRp1356
(dp1357
g62
(dp1358
g70
I3
ssg71
g1352
sg64
(lp1359
S'3'
asbasbasbag57
(g73
g59
NtRp1360
(dp1361
g62
(dp1362
sg71
g1332
sg64
(lp1363
g57
(g78
g59
NtRp1364
(dp1365
g62
(dp1366
sg71
g1360
sg64
(lp1367
g57
(g58
g59
NtRp1368
(dp1369
g62
(dp1370
g70
I3
ssg71
g1364
sg64
(lp1371
S'2'
asbasbasbag57
(g73
g59
NtRp1372
(dp1373
g62
(dp1374
sg71
g1332
sg64
(lp1375
g57
(g78
g59
NtRp1376
(dp1377
g62
(dp1378
sg71
g1372
sg64
(lp1379
g57
(g58
g59
NtRp1380
(dp1381
g62
(dp1382
g70
I3
ssg71
g1376
sg64
(lp1383
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p1384
asbasbasbag57
(g73
g59
NtRp1385
(dp1386
g62
(dp1387
sg71
g1332
sg64
(lp1388
g57
(g78
g59
NtRp1389
(dp1390
g62
(dp1391
sg71
g1385
sg64
(lp1392
g57
(g58
g59
NtRp1393
(dp1394
g62
(dp1395
g70
I3
ssg71
g1389
sg64
(lp1396
S'stable'
p1397
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1398
(dp1399
g62
(dp1400
sg71
g538
sg64
(lp1401
g57
(g78
g59
NtRp1402
(dp1403
g62
(dp1404
g82
g83
ssg71
g1398
sg64
(lp1405
S'wsgi_errors'
p1406
asbag57
(g78
g59
NtRp1407
(dp1408
g62
(dp1409
g89
g90
ssg71
g1398
sg64
(lp1410
S':'
asbag57
(g78
g59
NtRp1411
(dp1412
g62
(dp1413
sg71
g1398
sg64
(lp1414
g57
(g58
g59
NtRp1415
(dp1416
g62
(dp1417
g70
I4
ssg71
g1411
sg64
(lp1418
S"<open file '<stderr>', mode 'w' at 0xb72930d0>"
p1419
asbasbasbag57
(g73
g59
NtRp1420
(dp1421
g62
(dp1422
sg71
g538
sg64
(lp1423
g57
(g78
g59
NtRp1424
(dp1425
g62
(dp1426
g82
g83
ssg71
g1420
sg64
(lp1427
S'wsgi_file_wrapper'
p1428
asbag57
(g78
g59
NtRp1429
(dp1430
g62
(dp1431
g89
g90
ssg71
g1420
sg64
(lp1432
S':'
asbag57
(g78
g59
NtRp1433
(dp1434
g62
(dp1435
sg71
g1420
sg64
(lp1436
g57
(g58
g59
NtRp1437
(dp1438
g62
(dp1439
g70
I4
ssg71
g1433
sg64
(lp1440
S'<class wsgiref.util.FileWrapper at 0x92f7bcc>'
p1441
asbasbasbag57
(g73
g59
NtRp1442
(dp1443
g62
(dp1444
sg71
g538
sg64
(lp1445
g57
(g78
g59
NtRp1446
(dp1447
g62
(dp1448
g82
g83
ssg71
g1442
sg64
(lp1449
S'wsgi_input'
p1450
asbag57
(g78
g59
NtRp1451
(dp1452
g62
(dp1453
g89
g90
ssg71
g1442
sg64
(lp1454
S':'
asbag57
(g78
g59
NtRp1455
(dp1456
g62
(dp1457
sg71
g1442
sg64
(lp1458
g57
(g58
g59
NtRp1459
(dp1460
g62
(dp1461
g70
I4
ssg71
g1455
sg64
(lp1462
S'<socket._fileobject object at 0xb5870bec>'
p1463
asbasbasbag57
(g73
g59
NtRp1464
(dp1465
g62
(dp1466
sg71
g538
sg64
(lp1467
g57
(g78
g59
NtRp1468
(dp1469
g62
(dp1470
g82
g83
ssg71
g1464
sg64
(lp1471
S'wsgi_multiprocess'
p1472
asbag57
(g78
g59
NtRp1473
(dp1474
g62
(dp1475
g89
g90
ssg71
g1464
sg64
(lp1476
S':'
asbag57
(g78
g59
NtRp1477
(dp1478
g62
(dp1479
sg71
g1464
sg64
(lp1480
g57
(g58
g59
NtRp1481
(dp1482
g62
(dp1483
g70
I4
ssg71
g1477
sg64
(lp1484
g100
asbasbasbag57
(g73
g59
NtRp1485
(dp1486
g62
(dp1487
sg71
g538
sg64
(lp1488
g57
(g78
g59
NtRp1489
(dp1490
g62
(dp1491
g82
g83
ssg71
g1485
sg64
(lp1492
S'wsgi_multithread'
p1493
asbag57
(g78
g59
NtRp1494
(dp1495
g62
(dp1496
g89
g90
ssg71
g1485
sg64
(lp1497
S':'
asbag57
(g78
g59
NtRp1498
(dp1499
g62
(dp1500
sg71
g1485
sg64
(lp1501
g57
(g58
g59
NtRp1502
(dp1503
g62
(dp1504
g70
I4
ssg71
g1498
sg64
(lp1505
S'True'
p1506
asbasbasbag57
(g73
g59
NtRp1507
(dp1508
g62
(dp1509
sg71
g538
sg64
(lp1510
g57
(g78
g59
NtRp1511
(dp1512
g62
(dp1513
g82
g83
ssg71
g1507
sg64
(lp1514
S'wsgi_run_once'
p1515
asbag57
(g78
g59
NtRp1516
(dp1517
g62
(dp1518
g89
g90
ssg71
g1507
sg64
(lp1519
S':'
asbag57
(g78
g59
NtRp1520
(dp1521
g62
(dp1522
sg71
g1507
sg64
(lp1523
g57
(g58
g59
NtRp1524
(dp1525
g62
(dp1526
g70
I4
ssg71
g1520
sg64
(lp1527
g100
asbasbasbag57
(g73
g59
NtRp1528
(dp1529
g62
(dp1530
sg71
g538
sg64
(lp1531
g57
(g78
g59
NtRp1532
(dp1533
g62
(dp1534
g82
g83
ssg71
g1528
sg64
(lp1535
S'wsgi_url_scheme'
p1536
asbag57
(g78
g59
NtRp1537
(dp1538
g62
(dp1539
g89
g90
ssg71
g1528
sg64
(lp1540
S':'
asbag57
(g78
g59
NtRp1541
(dp1542
g62
(dp1543
sg71
g1528
sg64
(lp1544
g57
(g58
g59
NtRp1545
(dp1546
g62
(dp1547
g70
I4
ssg71
g1541
sg64
(lp1548
S'http'
p1549
asbasbasbag57
(g73
g59
NtRp1550
(dp1551
g62
(dp1552
sg71
g538
sg64
(lp1553
g57
(g78
g59
NtRp1554
(dp1555
g62
(dp1556
g82
g83
ssg71
g1550
sg64
(lp1557
S'wsgi_version'
p1558
asbag57
(g78
g59
NtRp1559
(dp1560
g62
(dp1561
g89
g90
ssg71
g1550
sg64
(lp1562
S':'
asbag57
(g78
g59
NtRp1563
(dp1564
g62
(dp1565
sg71
g1550
sg64
(lp1566
g57
(g58
g59
NtRp1567
(dp1568
g62
(dp1569
g70
I4
ssg71
g1563
sg64
(lp1570
g57
(g66
g59
NtRp1571
(dp1572
g62
(dp1573
g70
I3
ssg71
Nsg64
(lp1574
g57
(g73
g59
NtRp1575
(dp1576
g62
(dp1577
sg71
g1571
sg64
(lp1578
g57
(g78
g59
NtRp1579
(dp1580
g62
(dp1581
sg71
g1575
sg64
(lp1582
g57
(g58
g59
NtRp1583
(dp1584
g62
(dp1585
g70
I3
ssg71
g1579
sg64
(lp1586
S'1'
asbasbasbag57
(g73
g59
NtRp1587
(dp1588
g62
(dp1589
sg71
g1571
sg64
(lp1590
g57
(g78
g59
NtRp1591
(dp1592
g62
(dp1593
sg71
g1587
sg64
(lp1594
g57
(g58
g59
NtRp1595
(dp1596
g62
(dp1597
g70
I3
ssg71
g1591
sg64
(lp1598
S'0'
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp1599
(dp1600
g62
(dp1601
sg71
g67
sg64
(lp1602
g57
(g78
g59
NtRp1603
(dp1604
g62
(dp1605
g82
g83
ssg71
g1599
sg64
(lp1606
S'extension'
p1607
asbag57
(g78
g59
NtRp1608
(dp1609
g62
(dp1610
g89
g90
ssg71
g1599
sg64
(lp1611
S':'
asbag57
(g78
g59
NtRp1612
(dp1613
g62
(dp1614
sg71
g1599
sg64
(lp1615
g57
(g58
g59
NtRp1616
(dp1617
g62
(dp1618
g70
I5
ssg71
g1612
sg64
(lp1619
S'html'
p1620
asbasbasbag57
(g73
g59
NtRp1621
(dp1622
g62
(dp1623
sg71
g67
sg64
(lp1624
g57
(g78
g59
NtRp1625
(dp1626
g62
(dp1627
g82
g83
ssg71
g1621
sg64
(lp1628
S'folder'
p1629
asbag57
(g78
g59
NtRp1630
(dp1631
g62
(dp1632
g89
g90
ssg71
g1621
sg64
(lp1633
S':'
asbag57
(g78
g59
NtRp1634
(dp1635
g62
(dp1636
sg71
g1621
sg64
(lp1637
g57
(g58
g59
NtRp1638
(dp1639
g62
(dp1640
g70
I5
ssg71
g1634
sg64
(lp1641
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/'
p1642
asbasbasbag57
(g73
g59
NtRp1643
(dp1644
g62
(dp1645
sg71
g67
sg64
(lp1646
g57
(g78
g59
NtRp1647
(dp1648
g62
(dp1649
g82
g83
ssg71
g1643
sg64
(lp1650
S'function'
p1651
asbag57
(g78
g59
NtRp1652
(dp1653
g62
(dp1654
g89
g90
ssg71
g1643
sg64
(lp1655
S':'
asbag57
(g78
g59
NtRp1656
(dp1657
g62
(dp1658
sg71
g1643
sg64
(lp1659
g57
(g58
g59
NtRp1660
(dp1661
g62
(dp1662
g70
I5
ssg71
g1656
sg64
(lp1663
S'list_all_dev_projects'
p1664
asbasbasbag57
(g73
g59
NtRp1665
(dp1666
g62
(dp1667
sg71
g67
sg64
(lp1668
g57
(g78
g59
NtRp1669
(dp1670
g62
(dp1671
g82
g83
ssg71
g1665
sg64
(lp1672
S'get_vars'
p1673
asbag57
(g78
g59
NtRp1674
(dp1675
g62
(dp1676
g89
g90
ssg71
g1665
sg64
(lp1677
S':'
asbag57
(g78
g59
NtRp1678
(dp1679
g62
(dp1680
sg71
g1665
sg64
(lp1681
g57
(g58
g59
NtRp1682
(dp1683
g62
(dp1684
g70
I5
ssg71
g1678
sg64
(lp1685
g57
(g66
g59
NtRp1686
(dp1687
g62
(dp1688
g70
I4
ssg71
Nsg64
(lp1689
sbasbasbasbag57
(g73
g59
NtRp1690
(dp1691
g62
(dp1692
sg71
g67
sg64
(lp1693
g57
(g78
g59
NtRp1694
(dp1695
g62
(dp1696
g82
g83
ssg71
g1690
sg64
(lp1697
S'global_settings'
p1698
asbag57
(g78
g59
NtRp1699
(dp1700
g62
(dp1701
g89
g90
ssg71
g1690
sg64
(lp1702
S':'
asbag57
(g78
g59
NtRp1703
(dp1704
g62
(dp1705
sg71
g1690
sg64
(lp1706
g57
(g58
g59
NtRp1707
(dp1708
g62
(dp1709
g70
I5
ssg71
g1703
sg64
(lp1710
g57
(g66
g59
NtRp1711
(dp1712
g62
(dp1713
g70
I4
ssg71
Nsg64
(lp1714
g57
(g73
g59
NtRp1715
(dp1716
g62
(dp1717
sg71
g1711
sg64
(lp1718
g57
(g78
g59
NtRp1719
(dp1720
g62
(dp1721
g82
g83
ssg71
g1715
sg64
(lp1722
g550
asbag57
(g78
g59
NtRp1723
(dp1724
g62
(dp1725
g89
g90
ssg71
g1715
sg64
(lp1726
S':'
asbag57
(g78
g59
NtRp1727
(dp1728
g62
(dp1729
sg71
g1715
sg64
(lp1730
g57
(g58
g59
NtRp1731
(dp1732
g62
(dp1733
g70
I4
ssg71
g1727
sg64
(lp1734
S"set(['/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/'])"
p1735
asbasbasbag57
(g73
g59
NtRp1736
(dp1737
g62
(dp1738
sg71
g1711
sg64
(lp1739
g57
(g78
g59
NtRp1740
(dp1741
g62
(dp1742
g82
g83
ssg71
g1736
sg64
(lp1743
g572
asbag57
(g78
g59
NtRp1744
(dp1745
g62
(dp1746
g89
g90
ssg71
g1736
sg64
(lp1747
S':'
asbag57
(g78
g59
NtRp1748
(dp1749
g62
(dp1750
sg71
g1736
sg64
(lp1751
g57
(g58
g59
NtRp1752
(dp1753
g62
(dp1754
g70
I4
ssg71
g1748
sg64
(lp1755
g585
asbasbasbag57
(g73
g59
NtRp1756
(dp1757
g62
(dp1758
sg71
g1711
sg64
(lp1759
g57
(g78
g59
NtRp1760
(dp1761
g62
(dp1762
g82
g83
ssg71
g1756
sg64
(lp1763
g594
asbag57
(g78
g59
NtRp1764
(dp1765
g62
(dp1766
g89
g90
ssg71
g1756
sg64
(lp1767
S':'
asbag57
(g78
g59
NtRp1768
(dp1769
g62
(dp1770
sg71
g1756
sg64
(lp1771
g57
(g58
g59
NtRp1772
(dp1773
g62
(dp1774
g70
I4
ssg71
g1768
sg64
(lp1775
g57
(g66
g59
NtRp1776
(dp1777
g62
(dp1778
g70
I3
ssg71
Nsg64
(lp1779
sbasbasbasbag57
(g73
g59
NtRp1780
(dp1781
g62
(dp1782
sg71
g1711
sg64
(lp1783
g57
(g78
g59
NtRp1784
(dp1785
g62
(dp1786
g82
g83
ssg71
g1780
sg64
(lp1787
g619
asbag57
(g78
g59
NtRp1788
(dp1789
g62
(dp1790
g89
g90
ssg71
g1780
sg64
(lp1791
S':'
asbag57
(g78
g59
NtRp1792
(dp1793
g62
(dp1794
sg71
g1780
sg64
(lp1795
g57
(g58
g59
NtRp1796
(dp1797
g62
(dp1798
g70
I4
ssg71
g1792
sg64
(lp1799
S"<Values at 0x936ef8c: {'verbose': False, 'ip': '127.0.0.1', 'with_scheduler': False, 'ips': [], 'shutdown_timeout': 5, 'taskbar': False, 'port': 8000, 'maxthreads': None, 'softcron': False, 'server_name': 'anil-Inspiron-1525', 'bpython': False, 'nogui': False, 'pid_filename': 'httpserver.pid', 'extcron': False, 'runcron': False, 'run_system_tests': False, 'test': None, 'folder': '/home/anil/bootstrap/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'debuglevel': 30, 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'scheduler_groups': None, 'password': '123', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1800
asbasbasbag57
(g73
g59
NtRp1801
(dp1802
g62
(dp1803
sg71
g1711
sg64
(lp1804
g57
(g78
g59
NtRp1805
(dp1806
g62
(dp1807
g82
g83
ssg71
g1801
sg64
(lp1808
g641
asbag57
(g78
g59
NtRp1809
(dp1810
g62
(dp1811
g89
g90
ssg71
g1801
sg64
(lp1812
S':'
asbag57
(g78
g59
NtRp1813
(dp1814
g62
(dp1815
sg71
g1801
sg64
(lp1816
g57
(g58
g59
NtRp1817
(dp1818
g62
(dp1819
g70
I4
ssg71
g1813
sg64
(lp1820
S'set([])'
p1821
asbasbasbag57
(g73
g59
NtRp1822
(dp1823
g62
(dp1824
sg71
g1711
sg64
(lp1825
g57
(g78
g59
NtRp1826
(dp1827
g62
(dp1828
g82
g83
ssg71
g1822
sg64
(lp1829
g663
asbag57
(g78
g59
NtRp1830
(dp1831
g62
(dp1832
g89
g90
ssg71
g1822
sg64
(lp1833
S':'
asbag57
(g78
g59
NtRp1834
(dp1835
g62
(dp1836
sg71
g1822
sg64
(lp1837
g57
(g58
g59
NtRp1838
(dp1839
g62
(dp1840
g70
I4
ssg71
g1834
sg64
(lp1841
g100
asbasbasbag57
(g73
g59
NtRp1842
(dp1843
g62
(dp1844
sg71
g1711
sg64
(lp1845
g57
(g78
g59
NtRp1846
(dp1847
g62
(dp1848
g82
g83
ssg71
g1842
sg64
(lp1849
g684
asbag57
(g78
g59
NtRp1850
(dp1851
g62
(dp1852
g89
g90
ssg71
g1842
sg64
(lp1853
S':'
asbag57
(g78
g59
NtRp1854
(dp1855
g62
(dp1856
sg71
g1842
sg64
(lp1857
g57
(g58
g59
NtRp1858
(dp1859
g62
(dp1860
g70
I4
ssg71
g1854
sg64
(lp1861
g697
asbasbasbag57
(g73
g59
NtRp1862
(dp1863
g62
(dp1864
sg71
g1711
sg64
(lp1865
g57
(g78
g59
NtRp1866
(dp1867
g62
(dp1868
g82
g83
ssg71
g1862
sg64
(lp1869
g926
asbag57
(g78
g59
NtRp1870
(dp1871
g62
(dp1872
g89
g90
ssg71
g1862
sg64
(lp1873
S':'
asbag57
(g78
g59
NtRp1874
(dp1875
g62
(dp1876
sg71
g1862
sg64
(lp1877
g57
(g58
g59
NtRp1878
(dp1879
g62
(dp1880
g70
I4
ssg71
g1874
sg64
(lp1881
g100
asbasbasbag57
(g73
g59
NtRp1882
(dp1883
g62
(dp1884
sg71
g1711
sg64
(lp1885
g57
(g78
g59
NtRp1886
(dp1887
g62
(dp1888
g82
g83
ssg71
g1882
sg64
(lp1889
g947
asbag57
(g78
g59
NtRp1890
(dp1891
g62
(dp1892
g89
g90
ssg71
g1882
sg64
(lp1893
S':'
asbag57
(g78
g59
NtRp1894
(dp1895
g62
(dp1896
sg71
g1882
sg64
(lp1897
g57
(g58
g59
NtRp1898
(dp1899
g62
(dp1900
g70
I4
ssg71
g1894
sg64
(lp1901
g100
asbasbasbag57
(g73
g59
NtRp1902
(dp1903
g62
(dp1904
sg71
g1711
sg64
(lp1905
g57
(g78
g59
NtRp1906
(dp1907
g62
(dp1908
g82
g83
ssg71
g1902
sg64
(lp1909
g968
asbag57
(g78
g59
NtRp1910
(dp1911
g62
(dp1912
g89
g90
ssg71
g1902
sg64
(lp1913
S':'
asbag57
(g78
g59
NtRp1914
(dp1915
g62
(dp1916
sg71
g1902
sg64
(lp1917
g57
(g58
g59
NtRp1918
(dp1919
g62
(dp1920
g70
I4
ssg71
g1914
sg64
(lp1921
g57
(g66
g59
NtRp1922
(dp1923
g62
(dp1924
g70
I3
ssg71
Nsg64
(lp1925
g57
(g73
g59
NtRp1926
(dp1927
g62
(dp1928
sg71
g1922
sg64
(lp1929
g57
(g78
g59
NtRp1930
(dp1931
g62
(dp1932
sg71
g1926
sg64
(lp1933
g57
(g58
g59
NtRp1934
(dp1935
g62
(dp1936
g70
I3
ssg71
g1930
sg64
(lp1937
g997
asbasbasbag57
(g73
g59
NtRp1938
(dp1939
g62
(dp1940
sg71
g1922
sg64
(lp1941
g57
(g78
g59
NtRp1942
(dp1943
g62
(dp1944
sg71
g1938
sg64
(lp1945
g57
(g58
g59
NtRp1946
(dp1947
g62
(dp1948
g70
I3
ssg71
g1942
sg64
(lp1949
g1010
asbasbasbag57
(g73
g59
NtRp1950
(dp1951
g62
(dp1952
sg71
g1922
sg64
(lp1953
g57
(g78
g59
NtRp1954
(dp1955
g62
(dp1956
sg71
g1950
sg64
(lp1957
g57
(g58
g59
NtRp1958
(dp1959
g62
(dp1960
g70
I3
ssg71
g1954
sg64
(lp1961
g1023
asbasbasbag57
(g73
g59
NtRp1962
(dp1963
g62
(dp1964
sg71
g1922
sg64
(lp1965
g57
(g78
g59
NtRp1966
(dp1967
g62
(dp1968
sg71
g1962
sg64
(lp1969
g57
(g58
g59
NtRp1970
(dp1971
g62
(dp1972
g70
I3
ssg71
g1966
sg64
(lp1973
g1036
asbasbasbag57
(g73
g59
NtRp1974
(dp1975
g62
(dp1976
sg71
g1922
sg64
(lp1977
g57
(g78
g59
NtRp1978
(dp1979
g62
(dp1980
sg71
g1974
sg64
(lp1981
g57
(g58
g59
NtRp1982
(dp1983
g62
(dp1984
g70
I3
ssg71
g1978
sg64
(lp1985
g1049
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1986
(dp1987
g62
(dp1988
sg71
g1711
sg64
(lp1989
g57
(g78
g59
NtRp1990
(dp1991
g62
(dp1992
g82
g83
ssg71
g1986
sg64
(lp1993
g1319
asbag57
(g78
g59
NtRp1994
(dp1995
g62
(dp1996
g89
g90
ssg71
g1986
sg64
(lp1997
S':'
asbag57
(g78
g59
NtRp1998
(dp1999
g62
(dp2000
sg71
g1986
sg64
(lp2001
g57
(g58
g59
NtRp2002
(dp2003
g62
(dp2004
g70
I4
ssg71
g1998
sg64
(lp2005
g57
(g66
g59
NtRp2006
(dp2007
g62
(dp2008
g70
I3
ssg71
Nsg64
(lp2009
g57
(g73
g59
NtRp2010
(dp2011
g62
(dp2012
sg71
g2006
sg64
(lp2013
g57
(g78
g59
NtRp2014
(dp2015
g62
(dp2016
sg71
g2010
sg64
(lp2017
g57
(g58
g59
NtRp2018
(dp2019
g62
(dp2020
g70
I3
ssg71
g2014
sg64
(lp2021
S'2'
asbasbasbag57
(g73
g59
NtRp2022
(dp2023
g62
(dp2024
sg71
g2006
sg64
(lp2025
g57
(g78
g59
NtRp2026
(dp2027
g62
(dp2028
sg71
g2022
sg64
(lp2029
g57
(g58
g59
NtRp2030
(dp2031
g62
(dp2032
g70
I3
ssg71
g2026
sg64
(lp2033
S'3'
asbasbasbag57
(g73
g59
NtRp2034
(dp2035
g62
(dp2036
sg71
g2006
sg64
(lp2037
g57
(g78
g59
NtRp2038
(dp2039
g62
(dp2040
sg71
g2034
sg64
(lp2041
g57
(g58
g59
NtRp2042
(dp2043
g62
(dp2044
g70
I3
ssg71
g2038
sg64
(lp2045
S'2'
asbasbasbag57
(g73
g59
NtRp2046
(dp2047
g62
(dp2048
sg71
g2006
sg64
(lp2049
g57
(g78
g59
NtRp2050
(dp2051
g62
(dp2052
sg71
g2046
sg64
(lp2053
g57
(g58
g59
NtRp2054
(dp2055
g62
(dp2056
g70
I3
ssg71
g2050
sg64
(lp2057
S'datetime.datetime(2012, 12, 17, 15, 3, 30)'
p2058
asbasbasbag57
(g73
g59
NtRp2059
(dp2060
g62
(dp2061
sg71
g2006
sg64
(lp2062
g57
(g78
g59
NtRp2063
(dp2064
g62
(dp2065
sg71
g2059
sg64
(lp2066
g57
(g58
g59
NtRp2067
(dp2068
g62
(dp2069
g70
I3
ssg71
g2063
sg64
(lp2070
g1397
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp2071
(dp2072
g62
(dp2073
sg71
g67
sg64
(lp2074
g57
(g78
g59
NtRp2075
(dp2076
g62
(dp2077
g82
g83
ssg71
g2071
sg64
(lp2078
S'is_https'
p2079
asbag57
(g78
g59
NtRp2080
(dp2081
g62
(dp2082
g89
g90
ssg71
g2071
sg64
(lp2083
S':'
asbag57
(g78
g59
NtRp2084
(dp2085
g62
(dp2086
sg71
g2071
sg64
(lp2087
g57
(g58
g59
NtRp2088
(dp2089
g62
(dp2090
g70
I5
ssg71
g2084
sg64
(lp2091
g100
asbasbasbag57
(g73
g59
NtRp2092
(dp2093
g62
(dp2094
sg71
g67
sg64
(lp2095
g57
(g78
g59
NtRp2096
(dp2097
g62
(dp2098
g82
g83
ssg71
g2092
sg64
(lp2099
S'is_local'
p2100
asbag57
(g78
g59
NtRp2101
(dp2102
g62
(dp2103
g89
g90
ssg71
g2092
sg64
(lp2104
S':'
asbag57
(g78
g59
NtRp2105
(dp2106
g62
(dp2107
sg71
g2092
sg64
(lp2108
g57
(g58
g59
NtRp2109
(dp2110
g62
(dp2111
g70
I5
ssg71
g2105
sg64
(lp2112
g1506
asbasbasbag57
(g73
g59
NtRp2113
(dp2114
g62
(dp2115
sg71
g67
sg64
(lp2116
g57
(g78
g59
NtRp2117
(dp2118
g62
(dp2119
g82
g83
ssg71
g2113
sg64
(lp2120
S'is_restful'
p2121
asbag57
(g78
g59
NtRp2122
(dp2123
g62
(dp2124
g89
g90
ssg71
g2113
sg64
(lp2125
S':'
asbag57
(g78
g59
NtRp2126
(dp2127
g62
(dp2128
sg71
g2113
sg64
(lp2129
g57
(g58
g59
NtRp2130
(dp2131
g62
(dp2132
g70
I5
ssg71
g2126
sg64
(lp2133
g100
asbasbasbag57
(g73
g59
NtRp2134
(dp2135
g62
(dp2136
sg71
g67
sg64
(lp2137
g57
(g78
g59
NtRp2138
(dp2139
g62
(dp2140
g82
g83
ssg71
g2134
sg64
(lp2141
S'now'
p2142
asbag57
(g78
g59
NtRp2143
(dp2144
g62
(dp2145
g89
g90
ssg71
g2134
sg64
(lp2146
S':'
asbag57
(g78
g59
NtRp2147
(dp2148
g62
(dp2149
sg71
g2134
sg64
(lp2150
g57
(g58
g59
NtRp2151
(dp2152
g62
(dp2153
g70
I5
ssg71
g2147
sg64
(lp2154
S'datetime.datetime(2013, 2, 25, 10, 53, 11, 336513)'
p2155
asbasbasbag57
(g73
g59
NtRp2156
(dp2157
g62
(dp2158
sg71
g67
sg64
(lp2159
g57
(g78
g59
NtRp2160
(dp2161
g62
(dp2162
g82
g83
ssg71
g2156
sg64
(lp2163
S'post_vars'
p2164
asbag57
(g78
g59
NtRp2165
(dp2166
g62
(dp2167
g89
g90
ssg71
g2156
sg64
(lp2168
S':'
asbag57
(g78
g59
NtRp2169
(dp2170
g62
(dp2171
sg71
g2156
sg64
(lp2172
g57
(g58
g59
NtRp2173
(dp2174
g62
(dp2175
g70
I5
ssg71
g2169
sg64
(lp2176
g57
(g66
g59
NtRp2177
(dp2178
g62
(dp2179
g70
I4
ssg71
Nsg64
(lp2180
sbasbasbasbag57
(g73
g59
NtRp2181
(dp2182
g62
(dp2183
sg71
g67
sg64
(lp2184
g57
(g78
g59
NtRp2185
(dp2186
g62
(dp2187
g82
g83
ssg71
g2181
sg64
(lp2188
S'raw_args'
p2189
asbag57
(g78
g59
NtRp2190
(dp2191
g62
(dp2192
g89
g90
ssg71
g2181
sg64
(lp2193
S':'
asbag57
(g78
g59
NtRp2194
(dp2195
g62
(dp2196
sg71
g2181
sg64
(lp2197
g57
(g58
g59
NtRp2198
(dp2199
g62
(dp2200
g70
I5
ssg71
g2194
sg64
(lp2201
S'project/experiment.project/1/sample.experiment/1'
p2202
asbasbasbag57
(g73
g59
NtRp2203
(dp2204
g62
(dp2205
sg71
g67
sg64
(lp2206
g57
(g78
g59
NtRp2207
(dp2208
g62
(dp2209
g82
g83
ssg71
g2203
sg64
(lp2210
S'raw_extension'
p2211
asbag57
(g78
g59
NtRp2212
(dp2213
g62
(dp2214
g89
g90
ssg71
g2203
sg64
(lp2215
S':'
asbag57
(g78
g59
NtRp2216
(dp2217
g62
(dp2218
sg71
g2203
sg64
(lp2219
g57
(g58
g59
NtRp2220
(dp2221
g62
(dp2222
g70
I5
ssg71
g2216
sg64
(lp2223
S'None'
p2224
asbasbasbag57
(g73
g59
NtRp2225
(dp2226
g62
(dp2227
sg71
g67
sg64
(lp2228
g57
(g78
g59
NtRp2229
(dp2230
g62
(dp2231
g82
g83
ssg71
g2225
sg64
(lp2232
S'url'
p2233
asbag57
(g78
g59
NtRp2234
(dp2235
g62
(dp2236
g89
g90
ssg71
g2225
sg64
(lp2237
S':'
asbag57
(g78
g59
NtRp2238
(dp2239
g62
(dp2240
sg71
g2225
sg64
(lp2241
g57
(g58
g59
NtRp2242
(dp2243
g62
(dp2244
g70
I5
ssg71
g2238
sg64
(lp2245
g1071
asbasbasbag57
(g73
g59
NtRp2246
(dp2247
g62
(dp2248
sg71
g67
sg64
(lp2249
g57
(g78
g59
NtRp2250
(dp2251
g62
(dp2252
g82
g83
ssg71
g2246
sg64
(lp2253
S'utcnow'
p2254
asbag57
(g78
g59
NtRp2255
(dp2256
g62
(dp2257
g89
g90
ssg71
g2246
sg64
(lp2258
S':'
asbag57
(g78
g59
NtRp2259
(dp2260
g62
(dp2261
sg71
g2246
sg64
(lp2262
g57
(g58
g59
NtRp2263
(dp2264
g62
(dp2265
g70
I5
ssg71
g2259
sg64
(lp2266
S'datetime.datetime(2013, 2, 25, 5, 23, 11, 336558)'
p2267
asbasbasbag57
(g73
g59
NtRp2268
(dp2269
g62
(dp2270
sg71
g67
sg64
(lp2271
g57
(g78
g59
NtRp2272
(dp2273
g62
(dp2274
g82
g83
ssg71
g2268
sg64
(lp2275
S'uuid'
p2276
asbag57
(g78
g59
NtRp2277
(dp2278
g62
(dp2279
g89
g90
ssg71
g2268
sg64
(lp2280
S':'
asbag57
(g78
g59
NtRp2281
(dp2282
g62
(dp2283
sg71
g2268
sg64
(lp2284
g57
(g58
g59
NtRp2285
(dp2286
g62
(dp2287
g70
I5
ssg71
g2281
sg64
(lp2288
S'DEV_bootstrap_ch/127.0.0.1.2013-02-25.10-53-11.7b29ac58-1275-40cb-ae57-132ff7add9d5'
p2289
asbasbasbag57
(g73
g59
NtRp2290
(dp2291
g62
(dp2292
sg71
g67
sg64
(lp2293
g57
(g78
g59
NtRp2294
(dp2295
g62
(dp2296
g82
g83
ssg71
g2290
sg64
(lp2297
S'vars'
p2298
asbag57
(g78
g59
NtRp2299
(dp2300
g62
(dp2301
g89
g90
ssg71
g2290
sg64
(lp2302
S':'
asbag57
(g78
g59
NtRp2303
(dp2304
g62
(dp2305
sg71
g2290
sg64
(lp2306
g57
(g58
g59
NtRp2307
(dp2308
g62
(dp2309
g70
I5
ssg71
g2303
sg64
(lp2310
g57
(g66
g59
NtRp2311
(dp2312
g62
(dp2313
g70
I4
ssg71
Nsg64
(lp2314
g57
(g73
g59
NtRp2315
(dp2316
g62
(dp2317
sg71
g2311
sg64
(lp2318
g57
(g78
g59
NtRp2319
(dp2320
g62
(dp2321
g82
g83
ssg71
g2315
sg64
(lp2322
S'records'
p2323
asbag57
(g78
g59
NtRp2324
(dp2325
g62
(dp2326
g89
g90
ssg71
g2315
sg64
(lp2327
S':'
asbag57
(g78
g59
NtRp2328
(dp2329
g62
(dp2330
sg71
g2315
sg64
(lp2331
g57
(g58
g59
NtRp2332
(dp2333
g62
(dp2334
g70
I4
ssg71
g2328
sg64
(lp2335
g57
(g66
g59
NtRp2336
(dp2337
g62
(dp2338
g70
I3
ssg71
Nsg64
(lp2339
sbasbasbasbasbasbasbasbag57
(g73
g59
NtRp2340
(dp2341
g62
(dp2342
sg71
g67
sg64
(lp2343
g57
(g78
g59
NtRp2344
(dp2345
g62
(dp2346
g82
g83
ssg71
g2340
sg64
(lp2347
S'wsgi'
p2348
asbag57
(g78
g59
NtRp2349
(dp2350
g62
(dp2351
g89
g90
ssg71
g2340
sg64
(lp2352
S':'
asbag57
(g78
g59
NtRp2353
(dp2354
g62
(dp2355
sg71
g2340
sg64
(lp2356
g57
(g58
g59
NtRp2357
(dp2358
g62
(dp2359
g70
I5
ssg71
g2353
sg64
(lp2360
g57
(g66
g59
NtRp2361
(dp2362
g62
(dp2363
g70
I4
ssg71
Nsg64
(lp2364
g57
(g73
g59
NtRp2365
(dp2366
g62
(dp2367
sg71
g2361
sg64
(lp2368
g57
(g78
g59
NtRp2369
(dp2370
g62
(dp2371
g82
g83
ssg71
g2365
sg64
(lp2372
S'environ'
p2373
asbag57
(g78
g59
NtRp2374
(dp2375
g62
(dp2376
g89
g90
ssg71
g2365
sg64
(lp2377
S':'
asbag57
(g78
g59
NtRp2378
(dp2379
g62
(dp2380
sg71
g2365
sg64
(lp2381
g57
(g58
g59
NtRp2382
(dp2383
g62
(dp2384
g70
I4
ssg71
g2378
sg64
(lp2385
g57
(g66
g59
NtRp2386
(dp2387
g62
(dp2388
g70
I3
ssg71
Nsg64
(lp2389
g57
(g73
g59
NtRp2390
(dp2391
g62
(dp2392
sg71
g2386
sg64
(lp2393
g57
(g78
g59
NtRp2394
(dp2395
g62
(dp2396
g82
g83
ssg71
g2390
sg64
(lp2397
S'HTTP_ACCEPT'
p2398
asbag57
(g78
g59
NtRp2399
(dp2400
g62
(dp2401
g89
g90
ssg71
g2390
sg64
(lp2402
S':'
asbag57
(g78
g59
NtRp2403
(dp2404
g62
(dp2405
sg71
g2390
sg64
(lp2406
g57
(g58
g59
NtRp2407
(dp2408
g62
(dp2409
g70
I3
ssg71
g2403
sg64
(lp2410
g719
asbasbasbag57
(g73
g59
NtRp2411
(dp2412
g62
(dp2413
sg71
g2386
sg64
(lp2414
g57
(g78
g59
NtRp2415
(dp2416
g62
(dp2417
g82
g83
ssg71
g2411
sg64
(lp2418
S'HTTP_ACCEPT_CHARSET'
p2419
asbag57
(g78
g59
NtRp2420
(dp2421
g62
(dp2422
g89
g90
ssg71
g2411
sg64
(lp2423
S':'
asbag57
(g78
g59
NtRp2424
(dp2425
g62
(dp2426
sg71
g2411
sg64
(lp2427
g57
(g58
g59
NtRp2428
(dp2429
g62
(dp2430
g70
I3
ssg71
g2424
sg64
(lp2431
g741
asbasbasbag57
(g73
g59
NtRp2432
(dp2433
g62
(dp2434
sg71
g2386
sg64
(lp2435
g57
(g78
g59
NtRp2436
(dp2437
g62
(dp2438
g82
g83
ssg71
g2432
sg64
(lp2439
S'HTTP_ACCEPT_ENCODING'
p2440
asbag57
(g78
g59
NtRp2441
(dp2442
g62
(dp2443
g89
g90
ssg71
g2432
sg64
(lp2444
S':'
asbag57
(g78
g59
NtRp2445
(dp2446
g62
(dp2447
sg71
g2432
sg64
(lp2448
g57
(g58
g59
NtRp2449
(dp2450
g62
(dp2451
g70
I3
ssg71
g2445
sg64
(lp2452
g763
asbasbasbag57
(g73
g59
NtRp2453
(dp2454
g62
(dp2455
sg71
g2386
sg64
(lp2456
g57
(g78
g59
NtRp2457
(dp2458
g62
(dp2459
g82
g83
ssg71
g2453
sg64
(lp2460
S'HTTP_ACCEPT_LANGUAGE'
p2461
asbag57
(g78
g59
NtRp2462
(dp2463
g62
(dp2464
g89
g90
ssg71
g2453
sg64
(lp2465
S':'
asbag57
(g78
g59
NtRp2466
(dp2467
g62
(dp2468
sg71
g2453
sg64
(lp2469
g57
(g58
g59
NtRp2470
(dp2471
g62
(dp2472
g70
I3
ssg71
g2466
sg64
(lp2473
g785
asbasbasbag57
(g73
g59
NtRp2474
(dp2475
g62
(dp2476
sg71
g2386
sg64
(lp2477
g57
(g78
g59
NtRp2478
(dp2479
g62
(dp2480
g82
g83
ssg71
g2474
sg64
(lp2481
S'HTTP_CACHE_CONTROL'
p2482
asbag57
(g78
g59
NtRp2483
(dp2484
g62
(dp2485
g89
g90
ssg71
g2474
sg64
(lp2486
S':'
asbag57
(g78
g59
NtRp2487
(dp2488
g62
(dp2489
sg71
g2474
sg64
(lp2490
g57
(g58
g59
NtRp2491
(dp2492
g62
(dp2493
g70
I3
ssg71
g2487
sg64
(lp2494
g807
asbasbasbag57
(g73
g59
NtRp2495
(dp2496
g62
(dp2497
sg71
g2386
sg64
(lp2498
g57
(g78
g59
NtRp2499
(dp2500
g62
(dp2501
g82
g83
ssg71
g2495
sg64
(lp2502
S'HTTP_CONNECTION'
p2503
asbag57
(g78
g59
NtRp2504
(dp2505
g62
(dp2506
g89
g90
ssg71
g2495
sg64
(lp2507
S':'
asbag57
(g78
g59
NtRp2508
(dp2509
g62
(dp2510
sg71
g2495
sg64
(lp2511
g57
(g58
g59
NtRp2512
(dp2513
g62
(dp2514
g70
I3
ssg71
g2508
sg64
(lp2515
g829
asbasbasbag57
(g73
g59
NtRp2516
(dp2517
g62
(dp2518
sg71
g2386
sg64
(lp2519
g57
(g78
g59
NtRp2520
(dp2521
g62
(dp2522
g82
g83
ssg71
g2516
sg64
(lp2523
S'HTTP_COOKIE'
p2524
asbag57
(g78
g59
NtRp2525
(dp2526
g62
(dp2527
g89
g90
ssg71
g2516
sg64
(lp2528
S':'
asbag57
(g78
g59
NtRp2529
(dp2530
g62
(dp2531
sg71
g2516
sg64
(lp2532
g57
(g58
g59
NtRp2533
(dp2534
g62
(dp2535
g70
I3
ssg71
g2529
sg64
(lp2536
g851
asbasbasbag57
(g73
g59
NtRp2537
(dp2538
g62
(dp2539
sg71
g2386
sg64
(lp2540
g57
(g78
g59
NtRp2541
(dp2542
g62
(dp2543
g82
g83
ssg71
g2537
sg64
(lp2544
S'HTTP_HOST'
p2545
asbag57
(g78
g59
NtRp2546
(dp2547
g62
(dp2548
g89
g90
ssg71
g2537
sg64
(lp2549
S':'
asbag57
(g78
g59
NtRp2550
(dp2551
g62
(dp2552
sg71
g2537
sg64
(lp2553
g57
(g58
g59
NtRp2554
(dp2555
g62
(dp2556
g70
I3
ssg71
g2550
sg64
(lp2557
g873
asbasbasbag57
(g73
g59
NtRp2558
(dp2559
g62
(dp2560
sg71
g2386
sg64
(lp2561
g57
(g78
g59
NtRp2562
(dp2563
g62
(dp2564
g82
g83
ssg71
g2558
sg64
(lp2565
S'HTTP_REFERER'
p2566
asbag57
(g78
g59
NtRp2567
(dp2568
g62
(dp2569
g89
g90
ssg71
g2558
sg64
(lp2570
S':'
asbag57
(g78
g59
NtRp2571
(dp2572
g62
(dp2573
sg71
g2558
sg64
(lp2574
g57
(g58
g59
NtRp2575
(dp2576
g62
(dp2577
g70
I3
ssg71
g2571
sg64
(lp2578
g895
asbasbasbag57
(g73
g59
NtRp2579
(dp2580
g62
(dp2581
sg71
g2386
sg64
(lp2582
g57
(g78
g59
NtRp2583
(dp2584
g62
(dp2585
g82
g83
ssg71
g2579
sg64
(lp2586
S'HTTP_USER_AGENT'
p2587
asbag57
(g78
g59
NtRp2588
(dp2589
g62
(dp2590
g89
g90
ssg71
g2579
sg64
(lp2591
S':'
asbag57
(g78
g59
NtRp2592
(dp2593
g62
(dp2594
sg71
g2579
sg64
(lp2595
g57
(g58
g59
NtRp2596
(dp2597
g62
(dp2598
g70
I3
ssg71
g2592
sg64
(lp2599
g917
asbasbasbag57
(g73
g59
NtRp2600
(dp2601
g62
(dp2602
sg71
g2386
sg64
(lp2603
g57
(g78
g59
NtRp2604
(dp2605
g62
(dp2606
g82
g83
ssg71
g2600
sg64
(lp2607
S'PATH_INFO'
p2608
asbag57
(g78
g59
NtRp2609
(dp2610
g62
(dp2611
g89
g90
ssg71
g2600
sg64
(lp2612
S':'
asbag57
(g78
g59
NtRp2613
(dp2614
g62
(dp2615
sg71
g2600
sg64
(lp2616
g57
(g58
g59
NtRp2617
(dp2618
g62
(dp2619
g70
I3
ssg71
g2613
sg64
(lp2620
g1071
asbasbasbag57
(g73
g59
NtRp2621
(dp2622
g62
(dp2623
sg71
g2386
sg64
(lp2624
g57
(g78
g59
NtRp2625
(dp2626
g62
(dp2627
g82
g83
ssg71
g2621
sg64
(lp2628
S'QUERY_STRING'
p2629
asbag57
(g78
g59
NtRp2630
(dp2631
g62
(dp2632
g89
g90
ssg71
g2621
sg64
(lp2633
S':'
asbag57
(g78
g59
NtRp2634
(dp2635
g62
(dp2636
sg71
g2621
sg64
(lp2637
g57
(g58
g59
NtRp2638
(dp2639
g62
(dp2640
g70
I3
ssg71
g2634
sg64
(lp2641
g1093
asbasbasbag57
(g73
g59
NtRp2642
(dp2643
g62
(dp2644
sg71
g2386
sg64
(lp2645
g57
(g78
g59
NtRp2646
(dp2647
g62
(dp2648
g82
g83
ssg71
g2642
sg64
(lp2649
S'REMOTE_ADDR'
p2650
asbag57
(g78
g59
NtRp2651
(dp2652
g62
(dp2653
g89
g90
ssg71
g2642
sg64
(lp2654
S':'
asbag57
(g78
g59
NtRp2655
(dp2656
g62
(dp2657
sg71
g2642
sg64
(lp2658
g57
(g58
g59
NtRp2659
(dp2660
g62
(dp2661
g70
I3
ssg71
g2655
sg64
(lp2662
g275
asbasbasbag57
(g73
g59
NtRp2663
(dp2664
g62
(dp2665
sg71
g2386
sg64
(lp2666
g57
(g78
g59
NtRp2667
(dp2668
g62
(dp2669
g82
g83
ssg71
g2663
sg64
(lp2670
S'REMOTE_PORT'
p2671
asbag57
(g78
g59
NtRp2672
(dp2673
g62
(dp2674
g89
g90
ssg71
g2663
sg64
(lp2675
S':'
asbag57
(g78
g59
NtRp2676
(dp2677
g62
(dp2678
sg71
g2663
sg64
(lp2679
g57
(g58
g59
NtRp2680
(dp2681
g62
(dp2682
g70
I3
ssg71
g2676
sg64
(lp2683
g1136
asbasbasbag57
(g73
g59
NtRp2684
(dp2685
g62
(dp2686
sg71
g2386
sg64
(lp2687
g57
(g78
g59
NtRp2688
(dp2689
g62
(dp2690
g82
g83
ssg71
g2684
sg64
(lp2691
S'REQUEST_METHOD'
p2692
asbag57
(g78
g59
NtRp2693
(dp2694
g62
(dp2695
g89
g90
ssg71
g2684
sg64
(lp2696
S':'
asbag57
(g78
g59
NtRp2697
(dp2698
g62
(dp2699
sg71
g2684
sg64
(lp2700
g57
(g58
g59
NtRp2701
(dp2702
g62
(dp2703
g70
I3
ssg71
g2697
sg64
(lp2704
g1158
asbasbasbag57
(g73
g59
NtRp2705
(dp2706
g62
(dp2707
sg71
g2386
sg64
(lp2708
g57
(g78
g59
NtRp2709
(dp2710
g62
(dp2711
g82
g83
ssg71
g2705
sg64
(lp2712
S'REQUEST_URI'
p2713
asbag57
(g78
g59
NtRp2714
(dp2715
g62
(dp2716
g89
g90
ssg71
g2705
sg64
(lp2717
S':'
asbag57
(g78
g59
NtRp2718
(dp2719
g62
(dp2720
sg71
g2705
sg64
(lp2721
g57
(g58
g59
NtRp2722
(dp2723
g62
(dp2724
g70
I3
ssg71
g2718
sg64
(lp2725
g1180
asbasbasbag57
(g73
g59
NtRp2726
(dp2727
g62
(dp2728
sg71
g2386
sg64
(lp2729
g57
(g78
g59
NtRp2730
(dp2731
g62
(dp2732
g82
g83
ssg71
g2726
sg64
(lp2733
S'SCRIPT_NAME'
p2734
asbag57
(g78
g59
NtRp2735
(dp2736
g62
(dp2737
g89
g90
ssg71
g2726
sg64
(lp2738
S':'
asbag57
(g78
g59
NtRp2739
(dp2740
g62
(dp2741
sg71
g2726
sg64
(lp2742
g57
(g58
g59
NtRp2743
(dp2744
g62
(dp2745
g70
I3
ssg71
g2739
sg64
(lp2746
S''
asbasbasbag57
(g73
g59
NtRp2747
(dp2748
g62
(dp2749
sg71
g2386
sg64
(lp2750
g57
(g78
g59
NtRp2751
(dp2752
g62
(dp2753
g82
g83
ssg71
g2747
sg64
(lp2754
S'SERVER_NAME'
p2755
asbag57
(g78
g59
NtRp2756
(dp2757
g62
(dp2758
g89
g90
ssg71
g2747
sg64
(lp2759
S':'
asbag57
(g78
g59
NtRp2760
(dp2761
g62
(dp2762
sg71
g2747
sg64
(lp2763
g57
(g58
g59
NtRp2764
(dp2765
g62
(dp2766
g70
I3
ssg71
g2760
sg64
(lp2767
g1223
asbasbasbag57
(g73
g59
NtRp2768
(dp2769
g62
(dp2770
sg71
g2386
sg64
(lp2771
g57
(g78
g59
NtRp2772
(dp2773
g62
(dp2774
g82
g83
ssg71
g2768
sg64
(lp2775
S'SERVER_PORT'
p2776
asbag57
(g78
g59
NtRp2777
(dp2778
g62
(dp2779
g89
g90
ssg71
g2768
sg64
(lp2780
S':'
asbag57
(g78
g59
NtRp2781
(dp2782
g62
(dp2783
sg71
g2768
sg64
(lp2784
g57
(g58
g59
NtRp2785
(dp2786
g62
(dp2787
g70
I3
ssg71
g2781
sg64
(lp2788
g1245
asbasbasbag57
(g73
g59
NtRp2789
(dp2790
g62
(dp2791
sg71
g2386
sg64
(lp2792
g57
(g78
g59
NtRp2793
(dp2794
g62
(dp2795
g82
g83
ssg71
g2789
sg64
(lp2796
S'SERVER_PROTOCOL'
p2797
asbag57
(g78
g59
NtRp2798
(dp2799
g62
(dp2800
g89
g90
ssg71
g2789
sg64
(lp2801
S':'
asbag57
(g78
g59
NtRp2802
(dp2803
g62
(dp2804
sg71
g2789
sg64
(lp2805
g57
(g58
g59
NtRp2806
(dp2807
g62
(dp2808
g70
I3
ssg71
g2802
sg64
(lp2809
g1267
asbasbasbag57
(g73
g59
NtRp2810
(dp2811
g62
(dp2812
sg71
g2386
sg64
(lp2813
g57
(g78
g59
NtRp2814
(dp2815
g62
(dp2816
g82
g83
ssg71
g2810
sg64
(lp2817
S'SERVER_SOFTWARE'
p2818
asbag57
(g78
g59
NtRp2819
(dp2820
g62
(dp2821
g89
g90
ssg71
g2810
sg64
(lp2822
S':'
asbag57
(g78
g59
NtRp2823
(dp2824
g62
(dp2825
sg71
g2810
sg64
(lp2826
g57
(g58
g59
NtRp2827
(dp2828
g62
(dp2829
g70
I3
ssg71
g2823
sg64
(lp2830
g1289
asbasbasbag57
(g73
g59
NtRp2831
(dp2832
g62
(dp2833
sg71
g2386
sg64
(lp2834
g57
(g78
g59
NtRp2835
(dp2836
g62
(dp2837
g82
g83
ssg71
g2831
sg64
(lp2838
S'wsgi.errors'
p2839
asbag57
(g78
g59
NtRp2840
(dp2841
g62
(dp2842
g89
g90
ssg71
g2831
sg64
(lp2843
S':'
asbag57
(g78
g59
NtRp2844
(dp2845
g62
(dp2846
sg71
g2831
sg64
(lp2847
g57
(g58
g59
NtRp2848
(dp2849
g62
(dp2850
g70
I3
ssg71
g2844
sg64
(lp2851
S"<open file '<stderr>', mode 'w' at 0xb72930d0>"
p2852
asbasbasbag57
(g73
g59
NtRp2853
(dp2854
g62
(dp2855
sg71
g2386
sg64
(lp2856
g57
(g78
g59
NtRp2857
(dp2858
g62
(dp2859
g82
g83
ssg71
g2853
sg64
(lp2860
S'wsgi.file_wrapper'
p2861
asbag57
(g78
g59
NtRp2862
(dp2863
g62
(dp2864
g89
g90
ssg71
g2853
sg64
(lp2865
S':'
asbag57
(g78
g59
NtRp2866
(dp2867
g62
(dp2868
sg71
g2853
sg64
(lp2869
g57
(g58
g59
NtRp2870
(dp2871
g62
(dp2872
g70
I3
ssg71
g2866
sg64
(lp2873
S'<class wsgiref.util.FileWrapper at 0x92f7bcc>'
p2874
asbasbasbag57
(g73
g59
NtRp2875
(dp2876
g62
(dp2877
sg71
g2386
sg64
(lp2878
g57
(g78
g59
NtRp2879
(dp2880
g62
(dp2881
g82
g83
ssg71
g2875
sg64
(lp2882
S'wsgi.input'
p2883
asbag57
(g78
g59
NtRp2884
(dp2885
g62
(dp2886
g89
g90
ssg71
g2875
sg64
(lp2887
S':'
asbag57
(g78
g59
NtRp2888
(dp2889
g62
(dp2890
sg71
g2875
sg64
(lp2891
g57
(g58
g59
NtRp2892
(dp2893
g62
(dp2894
g70
I3
ssg71
g2888
sg64
(lp2895
S'<cStringIO.StringO object at 0xadc05a20>'
p2896
asbasbasbag57
(g73
g59
NtRp2897
(dp2898
g62
(dp2899
sg71
g2386
sg64
(lp2900
g57
(g78
g59
NtRp2901
(dp2902
g62
(dp2903
g82
g83
ssg71
g2897
sg64
(lp2904
S'wsgi.multiprocess'
p2905
asbag57
(g78
g59
NtRp2906
(dp2907
g62
(dp2908
g89
g90
ssg71
g2897
sg64
(lp2909
S':'
asbag57
(g78
g59
NtRp2910
(dp2911
g62
(dp2912
sg71
g2897
sg64
(lp2913
g57
(g58
g59
NtRp2914
(dp2915
g62
(dp2916
g70
I3
ssg71
g2910
sg64
(lp2917
g100
asbasbasbag57
(g73
g59
NtRp2918
(dp2919
g62
(dp2920
sg71
g2386
sg64
(lp2921
g57
(g78
g59
NtRp2922
(dp2923
g62
(dp2924
g82
g83
ssg71
g2918
sg64
(lp2925
S'wsgi.multithread'
p2926
asbag57
(g78
g59
NtRp2927
(dp2928
g62
(dp2929
g89
g90
ssg71
g2918
sg64
(lp2930
S':'
asbag57
(g78
g59
NtRp2931
(dp2932
g62
(dp2933
sg71
g2918
sg64
(lp2934
g57
(g58
g59
NtRp2935
(dp2936
g62
(dp2937
g70
I3
ssg71
g2931
sg64
(lp2938
g1506
asbasbasbag57
(g73
g59
NtRp2939
(dp2940
g62
(dp2941
sg71
g2386
sg64
(lp2942
g57
(g78
g59
NtRp2943
(dp2944
g62
(dp2945
g82
g83
ssg71
g2939
sg64
(lp2946
S'wsgi.run_once'
p2947
asbag57
(g78
g59
NtRp2948
(dp2949
g62
(dp2950
g89
g90
ssg71
g2939
sg64
(lp2951
S':'
asbag57
(g78
g59
NtRp2952
(dp2953
g62
(dp2954
sg71
g2939
sg64
(lp2955
g57
(g58
g59
NtRp2956
(dp2957
g62
(dp2958
g70
I3
ssg71
g2952
sg64
(lp2959
g100
asbasbasbag57
(g73
g59
NtRp2960
(dp2961
g62
(dp2962
sg71
g2386
sg64
(lp2963
g57
(g78
g59
NtRp2964
(dp2965
g62
(dp2966
g82
g83
ssg71
g2960
sg64
(lp2967
S'wsgi.url_scheme'
p2968
asbag57
(g78
g59
NtRp2969
(dp2970
g62
(dp2971
g89
g90
ssg71
g2960
sg64
(lp2972
S':'
asbag57
(g78
g59
NtRp2973
(dp2974
g62
(dp2975
sg71
g2960
sg64
(lp2976
g57
(g58
g59
NtRp2977
(dp2978
g62
(dp2979
g70
I3
ssg71
g2973
sg64
(lp2980
g1549
asbasbasbag57
(g73
g59
NtRp2981
(dp2982
g62
(dp2983
sg71
g2386
sg64
(lp2984
g57
(g78
g59
NtRp2985
(dp2986
g62
(dp2987
g82
g83
ssg71
g2981
sg64
(lp2988
S'wsgi.version'
p2989
asbag57
(g78
g59
NtRp2990
(dp2991
g62
(dp2992
g89
g90
ssg71
g2981
sg64
(lp2993
S':'
asbag57
(g78
g59
NtRp2994
(dp2995
g62
(dp2996
sg71
g2981
sg64
(lp2997
g57
(g58
g59
NtRp2998
(dp2999
g62
(dp3000
g70
I3
ssg71
g2994
sg64
(lp3001
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p3002
(lp3003
(dp3004
S'file'
p3005
S'/home/anil/bootstrap/web2py/gluon/restricted.py'
p3006
sS'dump'
p3007
(dp3008
S'environment'
p3009
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p3010
sS'ccode'
p3011
S'<code object <module> at 0x95958d8, file "/home/...DEV_bootstrap_ch/controllers/default.py", line 1>'
p3012
ssS'lnum'
p3013
I212
sS'lines'
p3014
(dp3015
I207
S'    try:'
p3016
sI208
S'        if isinstance(code, types.CodeType):'
p3017
sI209
S'            ccode = code'
p3018
sI210
S'        else:'
p3019
sI211
S'            ccode = compile2(code, layer)'
p3020
sI212
S'        exec ccode in environment'
p3021
sI213
S'    except HTTP:'
p3022
sI214
S'        raise'
p3023
sI215
S'    except RestrictedError:'
p3024
sI216
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p3025
ssS'call'
p3026
S"(code='import rpy2.robjects as robjects\\n# -*- coding: u...se._vars=response._caller(list_all_dev_projects)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}, layer='/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py')"
p3027
sS'func'
p3028
S'restricted'
p3029
sa(dp3030
g3005
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p3031
sg3007
(dp3032
sg3013
I1134
sg3014
(dp3033
I1123
S'   """allows an experimentalist to add multiple images and files and displays it in the consolidated sample view form """'
p3034
sI1124
S'   """ per sample . takes id of the sample as the input """'
p3035
sI1125
S'   sid = request.args(0)'
p3036
sI1126
S'   sample = db(db.sample.id == sid).select().first()'
p3037
sI1127
S'   old = db(db.sample_files.sample == sid).select(db.sample_files.ALL)'
p3038
sI1128
S'   form = SQLFORM(db.sample_files)'
p3039
sI1129
S'   form.vars.sample = sid'
p3040
sI1130
S'   return locals()'
p3041
sI1131
S''
sI1132
S''
ssg3026
S'()'
p3042
sg3028
S'<module>'
p3043
sa(dp3044
g3005
S'/home/anil/bootstrap/web2py/gluon/globals.py'
p3045
sg3007
(dp3046
S'self'
p3047
S'undefined'
p3048
sS'f'
S'<function list_all_dev_projects>'
p3049
ssg3013
I193
sg3014
(dp3050
I192
S'        self._vars = None'
p3051
sI193
S'        self._caller = lambda f: f()'
p3052
sI194
S'        self._view_environment = None'
p3053
sI195
S'        self._custom_commit = None'
p3054
sI196
S'        self._custom_rollback = None'
p3055
sI197
S''
sI188
S'        self.menu = []             # used by the default view layout'
p3056
sI189
S'        self.files = []            # used by web2py_ajax.html'
p3057
sI190
S'        self.generic_patterns = []  # patterns to allow generic views'
p3058
sI191
S"        self.delimiters = ('{{', '}}')"
p3059
ssg3026
S'(f=<function list_all_dev_projects>)'
p3060
sg3028
S'<lambda>'
p3061
sa(dp3062
g3005
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p3063
sg3007
(dp3064
S'global grid'
p3065
S'<function grid>'
p3066
sS'ck'
p3067
S"{'project': <Query (project.project_status = '0')>, 'sample': <Query (sample.experimentalist = 2)>}"
p3068
sS'links'
p3069
S"{'sample': [<function <lambda>>, <function <lambda>>, {'body': <function <lambda>>, 'header': 'name'}, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>]}"
p3070
sS'db.project'
p3071
S'<Table project (id,name,code,start_date,project_...name,project_publication_date,project_pubmed_id)>'
p3072
sS'global SQLFORM'
p3073
S"<class 'gluon.sqlhtml.SQLFORM'>"
p3074
sS'create'
p3075
g3048
sS'editable'
p3076
g3048
sS'linked_tables'
p3077
g3048
sS's'
S"{'sample': <function <lambda>>}"
p3078
sS'deletable'
p3079
g3048
sS'fields'
p3080
g3048
sS'global db'
p3081
S'<DAL uri="sqlite://storage.sqlite">'
p3082
sS'fi'
p3083
S'[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>]'
p3084
sS'SQLFORM.smartgrid'
p3085
S'<function smartgrid>'
p3086
sS'create_dict'
p3087
S"{'project': False, 'sample': True}"
p3088
sS'selectable'
p3089
g3048
sS'edit_dict'
p3090
S"{'project': False}"
p3091
sS'delete_dict'
p3092
S"{'project': False}"
p3093
ssg3013
I325
sg3014
(dp3094
I320
S"    links={'sample':l1}"
p3095
sI321
S'#customized Views for certain forms using router'
p3096
sI322
S"    if 'view' in request.args or 'edit' in request.args or 'new' in request.args:"
p3097
sI323
S'     \trouter()'
p3098
sI324
S"    s={'sample':lambda ids : redirect(URL('default', 'mapping_multiple', vars=dict(id=ids)))}"
p3099
sI325
S"    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=['experiment','sample','biosource','plant_growth_condition','treatments','harvests','extraction_preparation','gas_chromatography','liquid_chromatography','mass_spectroscopy','spectrophotometry','raw_data_storage_information'],selectable = s)"
p3100
sI326
S'    return locals()'
p3101
sI327
S''
sI328
S'#gets table name and rowid as input and creates another row with same details as rowid recod has'
p3102
sI329
S'def tes(a):'
p3103
ssg3026
S'()'
p3104
sg3028
S'list_all_dev_projects'
p3105
sa(dp3106
g3005
S'/home/anil/bootstrap/web2py/gluon/sqlhtml.py'
p3107
sg3007
(dp3108
S'user_signature'
p3109
g1506
sS'kwargs'
p3110
S"{'create': True, 'fields': [<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], 'selectable': <function <lambda>>}"
p3111
ssg3013
I2491
sg3014
(dp3112
I2486
S'                        A(SPAN(t+ getcount(row[id_field_name],tb,fieldname) ), _class=trap_class(), _href=url('
p3113
sI2487
S'                          args=[args0, row[id_field_name]])))'
p3114
sI2488
S''
sI2489
S'        grid = SQLFORM.grid(query, args=request.args[:nargs], links=links,'
p3115
sI2490
S'                            links_in_grid=links_in_grid,'
p3116
sI2491
S'                            user_signature=user_signature, **kwargs)'
p3117
sI2492
S'        if isinstance(grid, DIV):'
p3118
sI2493
S"            header = table._plural + (field and ' for ' + field.name or '')"
p3119
sI2494
S'            breadcrumbs.append(LI(A(T(header), _class=trap_class(),'
p3120
sI2495
S"                                    _href=url()), _class='active w2p_grid_breadcrumb_elem'))"
p3121
ssg3026
S"(table=<Table sample (id,experimentalist,name,code,desc...iment,working_status,replica,publication_status)>, constraints={'project': <Query (project.project_status = '0')>, 'sample': <Query (sample.experimentalist = 2)>}, linked_tables=['experiment', 'sample', 'biosource', 'plant_growth_condition', 'treatments', 'harvests', 'extraction_preparation', 'gas_chromatography', 'liquid_chromatography', 'mass_spectroscopy', 'spectrophotometry', 'raw_data_storage_information'], links=[<function <lambda>>, <function <lambda>>, {'body': <function <lambda>>, 'header': 'name'}, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>], links_in_grid=True, args=[], user_signature=True, divider='>', breadcrumbs_class='', **kwargs={'create': True, 'fields': [<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], 'selectable': <function <lambda>>})"
p3122
sg3028
S'smartgrid'
p3123
sa(dp3124
g3005
S'/home/anil/bootstrap/web2py/gluon/sqlhtml.py'
p3125
sg3007
(dp3126
S'link'
p3127
S'<function <lambda>>'
p3128
sS'row'
p3129
S"<Row {'publication_status': False, 'code': '32', 'replica': 'replicate', 'name': '12', 'id': 2}>"
p3130
ssg3013
I2258
sg3014
(dp3131
I2253
S'                    toadd = []'
p3132
sI2254
S'                    for link in links:'
p3133
sI2255
S'                        if isinstance(link, dict):'
p3134
sI2256
S"                            toadd.append(TD(link['body'](row)))"
p3135
sI2257
S'                        else:'
p3136
sI2258
S'                            if link(row):'
p3137
sI2259
S'                                row_buttons.append(link(row))'
p3138
sI2260
S"                    if links_placement in ['right', 'both']:"
p3139
sI2261
S'                        trcols.extend(toadd)'
p3140
sI2262
S"                    if links_placement in ['left', 'both']:"
p3141
ssg3026
S"(query=<Query ((sample.experiment = 1) AND (sample.experimentalist = 2))>, fields=[<gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>, <gluon.dal.Field object>], field_id=<gluon.dal.Field object>, left=None, headers={}, orderby=None, groupby=None, searchable=True, sortable=True, paginate=20, deletable=True, editable=True, details=True, selectable=<function <lambda>>, create=True, csv=True, links=[<function <lambda>>, <function <lambda>>, {'body': <function <lambda>>, 'header': 'name'}, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>, <function <lambda>>], links_in_grid=True, upload=<function <lambda>>, args=['project', 'experiment.project', '1', 'sample.experiment', '1'], user_signature=True, maxtextlengths={}, maxtextlength=20, onvalidation=None, oncreate=None, onupdate=None, ondelete=None, sorter_icons=(<gluon.html.XML object>, <gluon.html.XML object>), ui={'button': 'ui-button-text-icon-primary', 'buttonadd': 'ui-icon ui-icon-plusthick', 'buttonback': 'ui-icon ui-icon-arrowreturnthick-1-w', 'buttondelete': 'ui-icon ui-icon-trash', 'buttonedit': 'ui-icon ui-icon-pencil', 'buttonexport': 'ui-icon ui-icon-transferthick-e-w', 'buttontable': 'ui-icon ui-icon-triangle-1-e', 'buttontext': 'ui-button-text', 'buttonview': 'ui-icon ui-icon-zoomin', 'content': 'ui-widget-content', ...}, showbuttontext=True, _class='web2py_grid', formname='web2py_grid', search_widget=<function <lambda>>, ignore_rw=False, formstyle='table3cols', exportclasses=None, formargs={}, createargs={}, editargs={}, viewargs={}, buttons_placement='right', links_placement='right')"
p3142
sg3028
S'grid'
p3143
sa(dp3144
g3005
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py'
p3145
sg3007
(dp3146
S'body'
p3147
g3048
sS'request.args'
p3148
S"['project', 'experiment.project', '1', 'sample.experiment', '1']"
p3149
sS'global tes'
p3150
S'<function tes>'
p3151
sS'_href'
p3152
g3048
sS'header'
p3153
g3048
sS'global request'
p3154
S"<Storage {'function': 'list_all_dev_projects', '...s/DEV_bootstrap_ch/', 'post_vars': <Storage {}>}>"
p3155
sS'args'
p3156
g3048
sS'row.id'
p3157
S'2'
sS'global URL'
p3158
S'<function URL>'
p3159
sS'global getargs'
p3160
S'<function getargs>'
p3161
sS'l1'
p3162
g3048
sS'global A'
p3163
S"<class 'gluon.html.A'>"
p3164
sS'builtindict'
p3165
S"<type 'dict'>"
p3166
sS'row'
p3167
S"<Row {'publication_status': False, 'code': '32', 'replica': 'replicate', 'name': '12', 'id': 2}>"
p3168
ssg3013
I317
sg3014
(dp3169
I320
S"    links={'sample':l1}"
p3170
sI321
S'#customized Views for certain forms using router'
p3171
sI312
S''
sI313
S"    create_dict = {'project':False,'sample':addsample}"
p3172
sI314
S'#Links for replicating samples'
p3173
sI315
S'    args= request.args[0:5]'
p3174
sI316
S'    #args1=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],"biosource.sample_name","edit","biosource"]'
p3175
sI317
S'    l1=[lambda row: A(\'replicate\',_href=URL("default","duplicate",args=[request.args+row.id])), \\'
p3176
sI318
S'           lambda row: A(\'copy_\'+tes(row.id),_href=URL("default","router",args=getargs(row.id,args,"biosource"))), \\'
p3177
sI319
S'           dict(header = \'name\',body = lambda row: A(\'copy\'+tes(row.id),_href=URL("default","replicate",args=[\'project\',request.args[1],request.args[2],request.args[3],request.args[4],row.id])))]'
p3178
ssg3026
S"(row=<Row {'publication_status': False, 'code': '32', 'replica': 'replicate', 'name': '12', 'id': 2}>)"
p3179
sg3028
g3061
sasS'pyver'
p3180
S'Python 2.7.3: /usr/bin/python'
p3181
sS'session'
p3182
g57
(g58
g59
NtRp3183
(dp3184
g62
(dp3185
sg64
(lp3186
g57
(g66
g59
NtRp3187
(dp3188
g62
(dp3189
g70
I5
ssg71
Nsg64
(lp3190
g57
(g73
g59
NtRp3191
(dp3192
g62
(dp3193
sg71
g3187
sg64
(lp3194
g57
(g78
g59
NtRp3195
(dp3196
g62
(dp3197
g82
g83
ssg71
g3191
sg64
(lp3198
S'auth'
p3199
asbag57
(g78
g59
NtRp3200
(dp3201
g62
(dp3202
g89
g90
ssg71
g3191
sg64
(lp3203
S':'
asbag57
(g78
g59
NtRp3204
(dp3205
g62
(dp3206
sg71
g3191
sg64
(lp3207
g57
(g58
g59
NtRp3208
(dp3209
g62
(dp3210
g70
I5
ssg71
g3204
sg64
(lp3211
g57
(g66
g59
NtRp3212
(dp3213
g62
(dp3214
g70
I4
ssg71
Nsg64
(lp3215
g57
(g73
g59
NtRp3216
(dp3217
g62
(dp3218
sg71
g3212
sg64
(lp3219
g57
(g78
g59
NtRp3220
(dp3221
g62
(dp3222
g82
g83
ssg71
g3216
sg64
(lp3223
S'expiration'
p3224
asbag57
(g78
g59
NtRp3225
(dp3226
g62
(dp3227
g89
g90
ssg71
g3216
sg64
(lp3228
S':'
asbag57
(g78
g59
NtRp3229
(dp3230
g62
(dp3231
sg71
g3216
sg64
(lp3232
g57
(g58
g59
NtRp3233
(dp3234
g62
(dp3235
g70
I4
ssg71
g3229
sg64
(lp3236
S'2592000'
p3237
asbasbasbag57
(g73
g59
NtRp3238
(dp3239
g62
(dp3240
sg71
g3212
sg64
(lp3241
g57
(g78
g59
NtRp3242
(dp3243
g62
(dp3244
g82
g83
ssg71
g3238
sg64
(lp3245
S'hmac_key'
p3246
asbag57
(g78
g59
NtRp3247
(dp3248
g62
(dp3249
g89
g90
ssg71
g3238
sg64
(lp3250
S':'
asbag57
(g78
g59
NtRp3251
(dp3252
g62
(dp3253
sg71
g3238
sg64
(lp3254
g57
(g58
g59
NtRp3255
(dp3256
g62
(dp3257
g70
I4
ssg71
g3251
sg64
(lp3258
S'11fc622b-02bf-4f2a-8e07-fc63863907e8'
p3259
asbasbasbag57
(g73
g59
NtRp3260
(dp3261
g62
(dp3262
sg71
g3212
sg64
(lp3263
g57
(g78
g59
NtRp3264
(dp3265
g62
(dp3266
g82
g83
ssg71
g3260
sg64
(lp3267
S'last_visit'
p3268
asbag57
(g78
g59
NtRp3269
(dp3270
g62
(dp3271
g89
g90
ssg71
g3260
sg64
(lp3272
S':'
asbag57
(g78
g59
NtRp3273
(dp3274
g62
(dp3275
sg71
g3260
sg64
(lp3276
g57
(g58
g59
NtRp3277
(dp3278
g62
(dp3279
g70
I4
ssg71
g3273
sg64
(lp3280
S'datetime.datetime(2013, 2, 18, 0, 21, 50, 823546)'
p3281
asbasbasbag57
(g73
g59
NtRp3282
(dp3283
g62
(dp3284
sg71
g3212
sg64
(lp3285
g57
(g78
g59
NtRp3286
(dp3287
g62
(dp3288
g82
g83
ssg71
g3282
sg64
(lp3289
S'remember'
p3290
asbag57
(g78
g59
NtRp3291
(dp3292
g62
(dp3293
g89
g90
ssg71
g3282
sg64
(lp3294
S':'
asbag57
(g78
g59
NtRp3295
(dp3296
g62
(dp3297
sg71
g3282
sg64
(lp3298
g57
(g58
g59
NtRp3299
(dp3300
g62
(dp3301
g70
I4
ssg71
g3295
sg64
(lp3302
g1506
asbasbasbag57
(g73
g59
NtRp3303
(dp3304
g62
(dp3305
sg71
g3212
sg64
(lp3306
g57
(g78
g59
NtRp3307
(dp3308
g62
(dp3309
g82
g83
ssg71
g3303
sg64
(lp3310
S'user'
p3311
asbag57
(g78
g59
NtRp3312
(dp3313
g62
(dp3314
g89
g90
ssg71
g3303
sg64
(lp3315
S':'
asbag57
(g78
g59
NtRp3316
(dp3317
g62
(dp3318
sg71
g3303
sg64
(lp3319
g57
(g58
g59
NtRp3320
(dp3321
g62
(dp3322
g70
I4
ssg71
g3316
sg64
(lp3323
g57
(g66
g59
NtRp3324
(dp3325
g62
(dp3326
g70
I3
ssg71
Nsg64
(lp3327
g57
(g73
g59
NtRp3328
(dp3329
g62
(dp3330
sg71
g3324
sg64
(lp3331
g57
(g78
g59
NtRp3332
(dp3333
g62
(dp3334
g82
g83
ssg71
g3328
sg64
(lp3335
S'address'
p3336
asbag57
(g78
g59
NtRp3337
(dp3338
g62
(dp3339
g89
g90
ssg71
g3328
sg64
(lp3340
S':'
asbag57
(g78
g59
NtRp3341
(dp3342
g62
(dp3343
sg71
g3328
sg64
(lp3344
g57
(g58
g59
NtRp3345
(dp3346
g62
(dp3347
g70
I3
ssg71
g3341
sg64
(lp3348
S'a'
asbasbasbag57
(g73
g59
NtRp3349
(dp3350
g62
(dp3351
sg71
g3324
sg64
(lp3352
g57
(g78
g59
NtRp3353
(dp3354
g62
(dp3355
g82
g83
ssg71
g3349
sg64
(lp3356
S'affiliated_to'
p3357
asbag57
(g78
g59
NtRp3358
(dp3359
g62
(dp3360
g89
g90
ssg71
g3349
sg64
(lp3361
S':'
asbag57
(g78
g59
NtRp3362
(dp3363
g62
(dp3364
sg71
g3349
sg64
(lp3365
g57
(g58
g59
NtRp3366
(dp3367
g62
(dp3368
g70
I3
ssg71
g3362
sg64
(lp3369
S'a'
asbasbasbag57
(g73
g59
NtRp3370
(dp3371
g62
(dp3372
sg71
g3324
sg64
(lp3373
g57
(g78
g59
NtRp3374
(dp3375
g62
(dp3376
g82
g83
ssg71
g3370
sg64
(lp3377
S'city'
p3378
asbag57
(g78
g59
NtRp3379
(dp3380
g62
(dp3381
g89
g90
ssg71
g3370
sg64
(lp3382
S':'
asbag57
(g78
g59
NtRp3383
(dp3384
g62
(dp3385
sg71
g3370
sg64
(lp3386
g57
(g58
g59
NtRp3387
(dp3388
g62
(dp3389
g70
I3
ssg71
g3383
sg64
(lp3390
S'a'
asbasbasbag57
(g73
g59
NtRp3391
(dp3392
g62
(dp3393
sg71
g3324
sg64
(lp3394
g57
(g78
g59
NtRp3395
(dp3396
g62
(dp3397
g82
g83
ssg71
g3391
sg64
(lp3398
S'country'
p3399
asbag57
(g78
g59
NtRp3400
(dp3401
g62
(dp3402
g89
g90
ssg71
g3391
sg64
(lp3403
S':'
asbag57
(g78
g59
NtRp3404
(dp3405
g62
(dp3406
sg71
g3391
sg64
(lp3407
g57
(g58
g59
NtRp3408
(dp3409
g62
(dp3410
g70
I3
ssg71
g3404
sg64
(lp3411
S'India'
p3412
asbasbasbag57
(g73
g59
NtRp3413
(dp3414
g62
(dp3415
sg71
g3324
sg64
(lp3416
g57
(g78
g59
NtRp3417
(dp3418
g62
(dp3419
g82
g83
ssg71
g3413
sg64
(lp3420
S'email'
p3421
asbag57
(g78
g59
NtRp3422
(dp3423
g62
(dp3424
g89
g90
ssg71
g3413
sg64
(lp3425
S':'
asbag57
(g78
g59
NtRp3426
(dp3427
g62
(dp3428
sg71
g3413
sg64
(lp3429
g57
(g58
g59
NtRp3430
(dp3431
g62
(dp3432
g70
I3
ssg71
g3426
sg64
(lp3433
S'anil.iiith@gmail.com'
p3434
asbasbasbag57
(g73
g59
NtRp3435
(dp3436
g62
(dp3437
sg71
g3324
sg64
(lp3438
g57
(g78
g59
NtRp3439
(dp3440
g62
(dp3441
g82
g83
ssg71
g3435
sg64
(lp3442
S'first_name'
p3443
asbag57
(g78
g59
NtRp3444
(dp3445
g62
(dp3446
g89
g90
ssg71
g3435
sg64
(lp3447
S':'
asbag57
(g78
g59
NtRp3448
(dp3449
g62
(dp3450
sg71
g3435
sg64
(lp3451
g57
(g58
g59
NtRp3452
(dp3453
g62
(dp3454
g70
I3
ssg71
g3448
sg64
(lp3455
S'anil'
p3456
asbasbasbag57
(g73
g59
NtRp3457
(dp3458
g62
(dp3459
sg71
g3324
sg64
(lp3460
g57
(g78
g59
NtRp3461
(dp3462
g62
(dp3463
g82
g83
ssg71
g3457
sg64
(lp3464
S'id'
p3465
asbag57
(g78
g59
NtRp3466
(dp3467
g62
(dp3468
g89
g90
ssg71
g3457
sg64
(lp3469
S':'
asbag57
(g78
g59
NtRp3470
(dp3471
g62
(dp3472
sg71
g3457
sg64
(lp3473
g57
(g58
g59
NtRp3474
(dp3475
g62
(dp3476
g70
I3
ssg71
g3470
sg64
(lp3477
S'2'
asbasbasbag57
(g73
g59
NtRp3478
(dp3479
g62
(dp3480
sg71
g3324
sg64
(lp3481
g57
(g78
g59
NtRp3482
(dp3483
g62
(dp3484
g82
g83
ssg71
g3478
sg64
(lp3485
S'last_name'
p3486
asbag57
(g78
g59
NtRp3487
(dp3488
g62
(dp3489
g89
g90
ssg71
g3478
sg64
(lp3490
S':'
asbag57
(g78
g59
NtRp3491
(dp3492
g62
(dp3493
sg71
g3478
sg64
(lp3494
g57
(g58
g59
NtRp3495
(dp3496
g62
(dp3497
g70
I3
ssg71
g3491
sg64
(lp3498
S'n'
asbasbasbag57
(g73
g59
NtRp3499
(dp3500
g62
(dp3501
sg71
g3324
sg64
(lp3502
g57
(g78
g59
NtRp3503
(dp3504
g62
(dp3505
g82
g83
ssg71
g3499
sg64
(lp3506
S'mobile'
p3507
asbag57
(g78
g59
NtRp3508
(dp3509
g62
(dp3510
g89
g90
ssg71
g3499
sg64
(lp3511
S':'
asbag57
(g78
g59
NtRp3512
(dp3513
g62
(dp3514
sg71
g3499
sg64
(lp3515
g57
(g58
g59
NtRp3516
(dp3517
g62
(dp3518
g70
I3
ssg71
g3512
sg64
(lp3519
S'1233'
p3520
asbasbasbag57
(g73
g59
NtRp3521
(dp3522
g62
(dp3523
sg71
g3324
sg64
(lp3524
g57
(g78
g59
NtRp3525
(dp3526
g62
(dp3527
g82
g83
ssg71
g3521
sg64
(lp3528
S'phone'
p3529
asbag57
(g78
g59
NtRp3530
(dp3531
g62
(dp3532
g89
g90
ssg71
g3521
sg64
(lp3533
S':'
asbag57
(g78
g59
NtRp3534
(dp3535
g62
(dp3536
sg71
g3521
sg64
(lp3537
g57
(g58
g59
NtRp3538
(dp3539
g62
(dp3540
g70
I3
ssg71
g3534
sg64
(lp3541
S'123'
p3542
asbasbasbag57
(g73
g59
NtRp3543
(dp3544
g62
(dp3545
sg71
g3324
sg64
(lp3546
g57
(g78
g59
NtRp3547
(dp3548
g62
(dp3549
g82
g83
ssg71
g3543
sg64
(lp3550
S'position'
p3551
asbag57
(g78
g59
NtRp3552
(dp3553
g62
(dp3554
g89
g90
ssg71
g3543
sg64
(lp3555
S':'
asbag57
(g78
g59
NtRp3556
(dp3557
g62
(dp3558
sg71
g3543
sg64
(lp3559
g57
(g58
g59
NtRp3560
(dp3561
g62
(dp3562
g70
I3
ssg71
g3556
sg64
(lp3563
S'0'
asbasbasbag57
(g73
g59
NtRp3564
(dp3565
g62
(dp3566
sg71
g3324
sg64
(lp3567
g57
(g78
g59
NtRp3568
(dp3569
g62
(dp3570
g82
g83
ssg71
g3564
sg64
(lp3571
S'postal_code'
p3572
asbag57
(g78
g59
NtRp3573
(dp3574
g62
(dp3575
g89
g90
ssg71
g3564
sg64
(lp3576
S':'
asbag57
(g78
g59
NtRp3577
(dp3578
g62
(dp3579
sg71
g3564
sg64
(lp3580
g57
(g58
g59
NtRp3581
(dp3582
g62
(dp3583
g70
I3
ssg71
g3577
sg64
(lp3584
S'123'
p3585
asbasbasbag57
(g73
g59
NtRp3586
(dp3587
g62
(dp3588
sg71
g3324
sg64
(lp3589
g57
(g78
g59
NtRp3590
(dp3591
g62
(dp3592
g82
g83
ssg71
g3586
sg64
(lp3593
S'registration_at'
p3594
asbag57
(g78
g59
NtRp3595
(dp3596
g62
(dp3597
g89
g90
ssg71
g3586
sg64
(lp3598
S':'
asbag57
(g78
g59
NtRp3599
(dp3600
g62
(dp3601
sg71
g3586
sg64
(lp3602
g57
(g58
g59
NtRp3603
(dp3604
g62
(dp3605
g70
I3
ssg71
g3599
sg64
(lp3606
S'0'
asbasbasbag57
(g73
g59
NtRp3607
(dp3608
g62
(dp3609
sg71
g3324
sg64
(lp3610
g57
(g78
g59
NtRp3611
(dp3612
g62
(dp3613
g82
g83
ssg71
g3607
sg64
(lp3614
S'registration_id'
p3615
asbag57
(g78
g59
NtRp3616
(dp3617
g62
(dp3618
g89
g90
ssg71
g3607
sg64
(lp3619
S':'
asbag57
(g78
g59
NtRp3620
(dp3621
g62
(dp3622
sg71
g3607
sg64
(lp3623
g57
(g58
g59
NtRp3624
(dp3625
g62
(dp3626
g70
I3
ssg71
g3620
sg64
(lp3627
S''
asbasbasbag57
(g73
g59
NtRp3628
(dp3629
g62
(dp3630
sg71
g3324
sg64
(lp3631
g57
(g78
g59
NtRp3632
(dp3633
g62
(dp3634
g82
g83
ssg71
g3628
sg64
(lp3635
S'registration_key'
p3636
asbag57
(g78
g59
NtRp3637
(dp3638
g62
(dp3639
g89
g90
ssg71
g3628
sg64
(lp3640
S':'
asbag57
(g78
g59
NtRp3641
(dp3642
g62
(dp3643
sg71
g3628
sg64
(lp3644
g57
(g58
g59
NtRp3645
(dp3646
g62
(dp3647
g70
I3
ssg71
g3641
sg64
(lp3648
S''
asbasbasbag57
(g73
g59
NtRp3649
(dp3650
g62
(dp3651
sg71
g3324
sg64
(lp3652
g57
(g78
g59
NtRp3653
(dp3654
g62
(dp3655
g82
g83
ssg71
g3649
sg64
(lp3656
S'reset_password_key'
p3657
asbag57
(g78
g59
NtRp3658
(dp3659
g62
(dp3660
g89
g90
ssg71
g3649
sg64
(lp3661
S':'
asbag57
(g78
g59
NtRp3662
(dp3663
g62
(dp3664
sg71
g3649
sg64
(lp3665
g57
(g58
g59
NtRp3666
(dp3667
g62
(dp3668
g70
I3
ssg71
g3662
sg64
(lp3669
S''
asbasbasbag57
(g73
g59
NtRp3670
(dp3671
g62
(dp3672
sg71
g3324
sg64
(lp3673
g57
(g78
g59
NtRp3674
(dp3675
g62
(dp3676
g82
g83
ssg71
g3670
sg64
(lp3677
S'title'
p3678
asbag57
(g78
g59
NtRp3679
(dp3680
g62
(dp3681
g89
g90
ssg71
g3670
sg64
(lp3682
S':'
asbag57
(g78
g59
NtRp3683
(dp3684
g62
(dp3685
sg71
g3670
sg64
(lp3686
g57
(g58
g59
NtRp3687
(dp3688
g62
(dp3689
g70
I3
ssg71
g3683
sg64
(lp3690
S'0'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3691
(dp3692
g62
(dp3693
sg71
g3212
sg64
(lp3694
g57
(g78
g59
NtRp3695
(dp3696
g62
(dp3697
g82
g83
ssg71
g3691
sg64
(lp3698
S'user_groups'
p3699
asbag57
(g78
g59
NtRp3700
(dp3701
g62
(dp3702
g89
g90
ssg71
g3691
sg64
(lp3703
S':'
asbag57
(g78
g59
NtRp3704
(dp3705
g62
(dp3706
sg71
g3691
sg64
(lp3707
g57
(g58
g59
NtRp3708
(dp3709
g62
(dp3710
g70
I4
ssg71
g3704
sg64
(lp3711
g57
(g66
g59
NtRp3712
(dp3713
g62
(dp3714
g70
I3
ssg71
Nsg64
(lp3715
g57
(g73
g59
NtRp3716
(dp3717
g62
(dp3718
sg71
g3712
sg64
(lp3719
g57
(g78
g59
NtRp3720
(dp3721
g62
(dp3722
g82
g83
ssg71
g3716
sg64
(lp3723
S'9'
asbag57
(g78
g59
NtRp3724
(dp3725
g62
(dp3726
g89
g90
ssg71
g3716
sg64
(lp3727
S':'
asbag57
(g78
g59
NtRp3728
(dp3729
g62
(dp3730
sg71
g3716
sg64
(lp3731
g57
(g58
g59
NtRp3732
(dp3733
g62
(dp3734
g70
I3
ssg71
g3728
sg64
(lp3735
S'user_2'
p3736
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3737
(dp3738
g62
(dp3739
sg71
g3187
sg64
(lp3740
g57
(g78
g59
NtRp3741
(dp3742
g62
(dp3743
g82
g83
ssg71
g3737
sg64
(lp3744
S'flash'
p3745
asbag57
(g78
g59
NtRp3746
(dp3747
g62
(dp3748
g89
g90
ssg71
g3737
sg64
(lp3749
S':'
asbag57
(g78
g59
NtRp3750
(dp3751
g62
(dp3752
sg71
g3737
sg64
(lp3753
g57
(g58
g59
NtRp3754
(dp3755
g62
(dp3756
g70
I5
ssg71
g3750
sg64
(lp3757
S'None'
p3758
asbasbasbag57
(g73
g59
NtRp3759
(dp3760
g62
(dp3761
sg71
g3187
sg64
(lp3762
g57
(g78
g59
NtRp3763
(dp3764
g62
(dp3765
g82
g83
ssg71
g3759
sg64
(lp3766
S'last_orderby'
p3767
asbag57
(g78
g59
NtRp3768
(dp3769
g62
(dp3770
g89
g90
ssg71
g3759
sg64
(lp3771
S':'
asbag57
(g78
g59
NtRp3772
(dp3773
g62
(dp3774
sg71
g3759
sg64
(lp3775
g57
(g58
g59
NtRp3776
(dp3777
g62
(dp3778
g70
I5
ssg71
g3772
sg64
(lp3779
S'None'
p3780
asbasbasbag57
(g73
g59
NtRp3781
(dp3782
g62
(dp3783
sg71
g3187
sg64
(lp3784
g57
(g78
g59
NtRp3785
(dp3786
g62
(dp3787
g82
g83
ssg71
g3781
sg64
(lp3788
S'last_query'
p3789
asbag57
(g78
g59
NtRp3790
(dp3791
g62
(dp3792
g89
g90
ssg71
g3781
sg64
(lp3793
S':'
asbag57
(g78
g59
NtRp3794
(dp3795
g62
(dp3796
sg71
g3781
sg64
(lp3797
g57
(g58
g59
NtRp3798
(dp3799
g62
(dp3800
g70
I5
ssg71
g3794
sg64
(lp3801
S'db.project.id>0'
p3802
asbasbasbasbasbsS'etype'
p3803
S"<type 'exceptions.TypeError'>"
p3804
sS'date'
p3805
S'Mon Feb 25 10:53:11 2013'
p3806
sS'response'
p3807
g57
(g58
g59
NtRp3808
(dp3809
g62
(dp3810
sg64
(lp3811
g57
(g66
g59
NtRp3812
(dp3813
g62
(dp3814
g70
I5
ssg71
Nsg64
(lp3815
g57
(g73
g59
NtRp3816
(dp3817
g62
(dp3818
sg71
g3812
sg64
(lp3819
g57
(g78
g59
NtRp3820
(dp3821
g62
(dp3822
g82
g83
ssg71
g3816
sg64
(lp3823
g218
asbag57
(g78
g59
NtRp3824
(dp3825
g62
(dp3826
g89
g90
ssg71
g3816
sg64
(lp3827
S':'
asbag57
(g78
g59
NtRp3828
(dp3829
g62
(dp3830
sg71
g3816
sg64
(lp3831
g57
(g58
g59
NtRp3832
(dp3833
g62
(dp3834
g70
I5
ssg71
g3828
sg64
(lp3835
S'<cStringIO.StringO object at 0xade7ada0>'
p3836
asbasbasbag57
(g73
g59
NtRp3837
(dp3838
g62
(dp3839
sg71
g3812
sg64
(lp3840
g57
(g78
g59
NtRp3841
(dp3842
g62
(dp3843
g82
g83
ssg71
g3837
sg64
(lp3844
g306
asbag57
(g78
g59
NtRp3845
(dp3846
g62
(dp3847
g89
g90
ssg71
g3837
sg64
(lp3848
S':'
asbag57
(g78
g59
NtRp3849
(dp3850
g62
(dp3851
sg71
g3837
sg64
(lp3852
g57
(g58
g59
NtRp3853
(dp3854
g62
(dp3855
g70
I5
ssg71
g3849
sg64
(lp3856
g57
(g66
g59
NtRp3857
(dp3858
g62
(dp3859
g70
I4
ssg71
Nsg64
(lp3860
g57
(g73
g59
NtRp3861
(dp3862
g62
(dp3863
sg71
g3857
sg64
(lp3864
g57
(g78
g59
NtRp3865
(dp3866
g62
(dp3867
g82
g83
ssg71
g3861
sg64
(lp3868
S'session_id_dev_bootstrap_ch'
p3869
asbag57
(g78
g59
NtRp3870
(dp3871
g62
(dp3872
g89
g90
ssg71
g3861
sg64
(lp3873
S':'
asbag57
(g78
g59
NtRp3874
(dp3875
g62
(dp3876
sg71
g3861
sg64
(lp3877
g57
(g58
g59
NtRp3878
(dp3879
g62
(dp3880
g70
I4
ssg71
g3874
sg64
(lp3881
g344
ag57
(g66
g59
NtRp3882
(dp3883
g62
(dp3884
g70
I3
ssg71
Nsg64
(lp3885
g57
(g73
g59
NtRp3886
(dp3887
g62
(dp3888
sg71
g3882
sg64
(lp3889
g57
(g78
g59
NtRp3890
(dp3891
g62
(dp3892
g82
g83
ssg71
g3886
sg64
(lp3893
g357
asbag57
(g78
g59
NtRp3894
(dp3895
g62
(dp3896
g89
g90
ssg71
g3886
sg64
(lp3897
S':'
asbag57
(g78
g59
NtRp3898
(dp3899
g62
(dp3900
sg71
g3886
sg64
(lp3901
g57
(g58
g59
NtRp3902
(dp3903
g62
(dp3904
g70
I3
ssg71
g3898
sg64
(lp3905
S''
asbasbasbag57
(g73
g59
NtRp3906
(dp3907
g62
(dp3908
sg71
g3882
sg64
(lp3909
g57
(g78
g59
NtRp3910
(dp3911
g62
(dp3912
g82
g83
ssg71
g3906
sg64
(lp3913
g378
asbag57
(g78
g59
NtRp3914
(dp3915
g62
(dp3916
g89
g90
ssg71
g3906
sg64
(lp3917
S':'
asbag57
(g78
g59
NtRp3918
(dp3919
g62
(dp3920
sg71
g3906
sg64
(lp3921
g57
(g58
g59
NtRp3922
(dp3923
g62
(dp3924
g70
I3
ssg71
g3918
sg64
(lp3925
S''
asbasbasbag57
(g73
g59
NtRp3926
(dp3927
g62
(dp3928
sg71
g3882
sg64
(lp3929
g57
(g78
g59
NtRp3930
(dp3931
g62
(dp3932
g82
g83
ssg71
g3926
sg64
(lp3933
g399
asbag57
(g78
g59
NtRp3934
(dp3935
g62
(dp3936
g89
g90
ssg71
g3926
sg64
(lp3937
S':'
asbag57
(g78
g59
NtRp3938
(dp3939
g62
(dp3940
sg71
g3926
sg64
(lp3941
g57
(g58
g59
NtRp3942
(dp3943
g62
(dp3944
g70
I3
ssg71
g3938
sg64
(lp3945
S'2592000'
p3946
asbasbasbag57
(g73
g59
NtRp3947
(dp3948
g62
(dp3949
sg71
g3882
sg64
(lp3950
g57
(g78
g59
NtRp3951
(dp3952
g62
(dp3953
g82
g83
ssg71
g3947
sg64
(lp3954
g420
asbag57
(g78
g59
NtRp3955
(dp3956
g62
(dp3957
g89
g90
ssg71
g3947
sg64
(lp3958
S':'
asbag57
(g78
g59
NtRp3959
(dp3960
g62
(dp3961
sg71
g3947
sg64
(lp3962
g57
(g58
g59
NtRp3963
(dp3964
g62
(dp3965
g70
I3
ssg71
g3959
sg64
(lp3966
S''
asbasbasbag57
(g73
g59
NtRp3967
(dp3968
g62
(dp3969
sg71
g3882
sg64
(lp3970
g57
(g78
g59
NtRp3971
(dp3972
g62
(dp3973
g82
g83
ssg71
g3967
sg64
(lp3974
g441
asbag57
(g78
g59
NtRp3975
(dp3976
g62
(dp3977
g89
g90
ssg71
g3967
sg64
(lp3978
S':'
asbag57
(g78
g59
NtRp3979
(dp3980
g62
(dp3981
sg71
g3967
sg64
(lp3982
g57
(g58
g59
NtRp3983
(dp3984
g62
(dp3985
g70
I3
ssg71
g3979
sg64
(lp3986
S''
asbasbasbag57
(g73
g59
NtRp3987
(dp3988
g62
(dp3989
sg71
g3882
sg64
(lp3990
g57
(g78
g59
NtRp3991
(dp3992
g62
(dp3993
g82
g83
ssg71
g3987
sg64
(lp3994
g462
asbag57
(g78
g59
NtRp3995
(dp3996
g62
(dp3997
g89
g90
ssg71
g3987
sg64
(lp3998
S':'
asbag57
(g78
g59
NtRp3999
(dp4000
g62
(dp4001
sg71
g3987
sg64
(lp4002
g57
(g58
g59
NtRp4003
(dp4004
g62
(dp4005
g70
I3
ssg71
g3999
sg64
(lp4006
S'/'
asbasbasbag57
(g73
g59
NtRp4007
(dp4008
g62
(dp4009
sg71
g3882
sg64
(lp4010
g57
(g78
g59
NtRp4011
(dp4012
g62
(dp4013
g82
g83
ssg71
g4007
sg64
(lp4014
g483
asbag57
(g78
g59
NtRp4015
(dp4016
g62
(dp4017
g89
g90
ssg71
g4007
sg64
(lp4018
S':'
asbag57
(g78
g59
NtRp4019
(dp4020
g62
(dp4021
sg71
g4007
sg64
(lp4022
g57
(g58
g59
NtRp4023
(dp4024
g62
(dp4025
g70
I3
ssg71
g4019
sg64
(lp4026
S''
asbasbasbag57
(g73
g59
NtRp4027
(dp4028
g62
(dp4029
sg71
g3882
sg64
(lp4030
g57
(g78
g59
NtRp4031
(dp4032
g62
(dp4033
g82
g83
ssg71
g4027
sg64
(lp4034
g504
asbag57
(g78
g59
NtRp4035
(dp4036
g62
(dp4037
g89
g90
ssg71
g4027
sg64
(lp4038
S':'
asbag57
(g78
g59
NtRp4039
(dp4040
g62
(dp4041
sg71
g4027
sg64
(lp4042
g57
(g58
g59
NtRp4043
(dp4044
g62
(dp4045
g70
I3
ssg71
g4039
sg64
(lp4046
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp4047
(dp4048
g62
(dp4049
sg71
g3812
sg64
(lp4050
g57
(g78
g59
NtRp4051
(dp4052
g62
(dp4053
g82
g83
ssg71
g4047
sg64
(lp4054
S'delimiters'
p4055
asbag57
(g78
g59
NtRp4056
(dp4057
g62
(dp4058
g89
g90
ssg71
g4047
sg64
(lp4059
S':'
asbag57
(g78
g59
NtRp4060
(dp4061
g62
(dp4062
sg71
g4047
sg64
(lp4063
g57
(g58
g59
NtRp4064
(dp4065
g62
(dp4066
g70
I5
ssg71
g4060
sg64
(lp4067
g57
(g66
g59
NtRp4068
(dp4069
g62
(dp4070
g70
I4
ssg71
Nsg64
(lp4071
g57
(g73
g59
NtRp4072
(dp4073
g62
(dp4074
sg71
g4068
sg64
(lp4075
g57
(g78
g59
NtRp4076
(dp4077
g62
(dp4078
sg71
g4072
sg64
(lp4079
g57
(g58
g59
NtRp4080
(dp4081
g62
(dp4082
g70
I4
ssg71
g4076
sg64
(lp4083
S'{{'
p4084
asbasbasbag57
(g73
g59
NtRp4085
(dp4086
g62
(dp4087
sg71
g4068
sg64
(lp4088
g57
(g78
g59
NtRp4089
(dp4090
g62
(dp4091
sg71
g4085
sg64
(lp4092
g57
(g58
g59
NtRp4093
(dp4094
g62
(dp4095
g70
I4
ssg71
g4089
sg64
(lp4096
S'}}'
p4097
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4098
(dp4099
g62
(dp4100
sg71
g3812
sg64
(lp4101
g57
(g78
g59
NtRp4102
(dp4103
g62
(dp4104
g82
g83
ssg71
g4098
sg64
(lp4105
S'files'
p4106
asbag57
(g78
g59
NtRp4107
(dp4108
g62
(dp4109
g89
g90
ssg71
g4098
sg64
(lp4110
S':'
asbag57
(g78
g59
NtRp4111
(dp4112
g62
(dp4113
sg71
g4098
sg64
(lp4114
g57
(g58
g59
NtRp4115
(dp4116
g62
(dp4117
g70
I5
ssg71
g4111
sg64
(lp4118
g57
(g66
g59
NtRp4119
(dp4120
g62
(dp4121
g70
I4
ssg71
Nsg64
(lp4122
g57
(g73
g59
NtRp4123
(dp4124
g62
(dp4125
sg71
g4119
sg64
(lp4126
g57
(g78
g59
NtRp4127
(dp4128
g62
(dp4129
sg71
g4123
sg64
(lp4130
g57
(g58
g59
NtRp4131
(dp4132
g62
(dp4133
g70
I4
ssg71
g4127
sg64
(lp4134
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/css/redmond/jquery-ui-1.8.5.custom.css'
p4135
asbasbasbag57
(g73
g59
NtRp4136
(dp4137
g62
(dp4138
sg71
g4119
sg64
(lp4139
g57
(g78
g59
NtRp4140
(dp4141
g62
(dp4142
sg71
g4136
sg64
(lp4143
g57
(g58
g59
NtRp4144
(dp4145
g62
(dp4146
g70
I4
ssg71
g4140
sg64
(lp4147
S'/DEV_bootstrap_ch/static/plugin_wiki/ui/js/jquery-ui-1.8.5.custom.min.js'
p4148
asbasbasbag57
(g73
g59
NtRp4149
(dp4150
g62
(dp4151
sg71
g4119
sg64
(lp4152
g57
(g78
g59
NtRp4153
(dp4154
g62
(dp4155
sg71
g4149
sg64
(lp4156
g57
(g58
g59
NtRp4157
(dp4158
g62
(dp4159
g70
I4
ssg71
g4153
sg64
(lp4160
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/ui.jqgrid.css'
p4161
asbasbasbag57
(g73
g59
NtRp4162
(dp4163
g62
(dp4164
sg71
g4119
sg64
(lp4165
g57
(g78
g59
NtRp4166
(dp4167
g62
(dp4168
sg71
g4162
sg64
(lp4169
g57
(g58
g59
NtRp4170
(dp4171
g62
(dp4172
g70
I4
ssg71
g4166
sg64
(lp4173
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/i18n/grid.locale-en.js'
p4174
asbasbasbag57
(g73
g59
NtRp4175
(dp4176
g62
(dp4177
sg71
g4119
sg64
(lp4178
g57
(g78
g59
NtRp4179
(dp4180
g62
(dp4181
sg71
g4175
sg64
(lp4182
g57
(g58
g59
NtRp4183
(dp4184
g62
(dp4185
g70
I4
ssg71
g4179
sg64
(lp4186
S'/DEV_bootstrap_ch/static/plugin_wiki/jqgrid/jquery.jqGrid.min.js'
p4187
asbasbasbag57
(g73
g59
NtRp4188
(dp4189
g62
(dp4190
sg71
g4119
sg64
(lp4191
g57
(g78
g59
NtRp4192
(dp4193
g62
(dp4194
sg71
g4188
sg64
(lp4195
g57
(g58
g59
NtRp4196
(dp4197
g62
(dp4198
g70
I4
ssg71
g4192
sg64
(lp4199
S'/DEV_bootstrap_ch/static/plugin_wiki/slideshow/jquery.cycle.min.js'
p4200
asbasbasbag57
(g73
g59
NtRp4201
(dp4202
g62
(dp4203
sg71
g4119
sg64
(lp4204
g57
(g78
g59
NtRp4205
(dp4206
g62
(dp4207
sg71
g4201
sg64
(lp4208
g57
(g58
g59
NtRp4209
(dp4210
g62
(dp4211
g70
I4
ssg71
g4205
sg64
(lp4212
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.css'
p4213
asbasbasbag57
(g73
g59
NtRp4214
(dp4215
g62
(dp4216
sg71
g4119
sg64
(lp4217
g57
(g78
g59
NtRp4218
(dp4219
g62
(dp4220
sg71
g4214
sg64
(lp4221
g57
(g58
g59
NtRp4222
(dp4223
g62
(dp4224
g70
I4
ssg71
g4218
sg64
(lp4225
S'/DEV_bootstrap_ch/static/plugin_wiki/multiselect/jquery.multiselect.js'
p4226
asbasbasbag57
(g73
g59
NtRp4227
(dp4228
g62
(dp4229
sg71
g4119
sg64
(lp4230
g57
(g78
g59
NtRp4231
(dp4232
g62
(dp4233
sg71
g4227
sg64
(lp4234
g57
(g58
g59
NtRp4235
(dp4236
g62
(dp4237
g70
I4
ssg71
g4231
sg64
(lp4238
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.css'
p4239
asbasbasbag57
(g73
g59
NtRp4240
(dp4241
g62
(dp4242
sg71
g4119
sg64
(lp4243
g57
(g78
g59
NtRp4244
(dp4245
g62
(dp4246
sg71
g4240
sg64
(lp4247
g57
(g58
g59
NtRp4248
(dp4249
g62
(dp4250
g70
I4
ssg71
g4244
sg64
(lp4251
S'/DEV_bootstrap_ch/static/plugin_wiki/rating/jquery.rating.js'
p4252
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4253
(dp4254
g62
(dp4255
sg71
g3812
sg64
(lp4256
g57
(g78
g59
NtRp4257
(dp4258
g62
(dp4259
g82
g83
ssg71
g4253
sg64
(lp4260
S'flash'
p4261
asbag57
(g78
g59
NtRp4262
(dp4263
g62
(dp4264
g89
g90
ssg71
g4253
sg64
(lp4265
S':'
asbag57
(g78
g59
NtRp4266
(dp4267
g62
(dp4268
sg71
g4253
sg64
(lp4269
g57
(g58
g59
NtRp4270
(dp4271
g62
(dp4272
g70
I5
ssg71
g4266
sg64
(lp4273
S''
asbasbasbag57
(g73
g59
NtRp4274
(dp4275
g62
(dp4276
sg71
g3812
sg64
(lp4277
g57
(g78
g59
NtRp4278
(dp4279
g62
(dp4280
g82
g83
ssg71
g4274
sg64
(lp4281
S'generic_patterns'
p4282
asbag57
(g78
g59
NtRp4283
(dp4284
g62
(dp4285
g89
g90
ssg71
g4274
sg64
(lp4286
S':'
asbag57
(g78
g59
NtRp4287
(dp4288
g62
(dp4289
sg71
g4274
sg64
(lp4290
g57
(g58
g59
NtRp4291
(dp4292
g62
(dp4293
g70
I5
ssg71
g4287
sg64
(lp4294
g57
(g66
g59
NtRp4295
(dp4296
g62
(dp4297
g70
I4
ssg71
Nsg64
(lp4298
g57
(g73
g59
NtRp4299
(dp4300
g62
(dp4301
sg71
g4295
sg64
(lp4302
g57
(g78
g59
NtRp4303
(dp4304
g62
(dp4305
sg71
g4299
sg64
(lp4306
g57
(g58
g59
NtRp4307
(dp4308
g62
(dp4309
g70
I4
ssg71
g4303
sg64
(lp4310
S'*'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4311
(dp4312
g62
(dp4313
sg71
g3812
sg64
(lp4314
g57
(g78
g59
NtRp4315
(dp4316
g62
(dp4317
g82
g83
ssg71
g4311
sg64
(lp4318
S'google_analytics_id'
p4319
asbag57
(g78
g59
NtRp4320
(dp4321
g62
(dp4322
g89
g90
ssg71
g4311
sg64
(lp4323
S':'
asbag57
(g78
g59
NtRp4324
(dp4325
g62
(dp4326
sg71
g4311
sg64
(lp4327
g57
(g58
g59
NtRp4328
(dp4329
g62
(dp4330
g70
I5
ssg71
g4324
sg64
(lp4331
S'None'
p4332
asbasbasbag57
(g73
g59
NtRp4333
(dp4334
g62
(dp4335
sg71
g3812
sg64
(lp4336
g57
(g78
g59
NtRp4337
(dp4338
g62
(dp4339
g82
g83
ssg71
g4333
sg64
(lp4340
S'headers'
p4341
asbag57
(g78
g59
NtRp4342
(dp4343
g62
(dp4344
g89
g90
ssg71
g4333
sg64
(lp4345
S':'
asbag57
(g78
g59
NtRp4346
(dp4347
g62
(dp4348
sg71
g4333
sg64
(lp4349
g57
(g58
g59
NtRp4350
(dp4351
g62
(dp4352
g70
I5
ssg71
g4346
sg64
(lp4353
g57
(g66
g59
NtRp4354
(dp4355
g62
(dp4356
g70
I4
ssg71
Nsg64
(lp4357
g57
(g73
g59
NtRp4358
(dp4359
g62
(dp4360
sg71
g4354
sg64
(lp4361
g57
(g78
g59
NtRp4362
(dp4363
g62
(dp4364
g82
g83
ssg71
g4358
sg64
(lp4365
S'X-Powered-By'
p4366
asbag57
(g78
g59
NtRp4367
(dp4368
g62
(dp4369
g89
g90
ssg71
g4358
sg64
(lp4370
S':'
asbag57
(g78
g59
NtRp4371
(dp4372
g62
(dp4373
sg71
g4358
sg64
(lp4374
g57
(g58
g59
NtRp4375
(dp4376
g62
(dp4377
g70
I4
ssg71
g4371
sg64
(lp4378
S'web2py'
p4379
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4380
(dp4381
g62
(dp4382
sg71
g3812
sg64
(lp4383
g57
(g78
g59
NtRp4384
(dp4385
g62
(dp4386
g82
g83
ssg71
g4380
sg64
(lp4387
S'menu'
p4388
asbag57
(g78
g59
NtRp4389
(dp4390
g62
(dp4391
g89
g90
ssg71
g4380
sg64
(lp4392
S':'
asbag57
(g78
g59
NtRp4393
(dp4394
g62
(dp4395
sg71
g4380
sg64
(lp4396
g57
(g58
g59
NtRp4397
(dp4398
g62
(dp4399
g70
I5
ssg71
g4393
sg64
(lp4400
g57
(g66
g59
NtRp4401
(dp4402
g62
(dp4403
g70
I4
ssg71
Nsg64
(lp4404
g57
(g73
g59
NtRp4405
(dp4406
g62
(dp4407
sg71
g4401
sg64
(lp4408
g57
(g78
g59
NtRp4409
(dp4410
g62
(dp4411
sg71
g4405
sg64
(lp4412
g57
(g58
g59
NtRp4413
(dp4414
g62
(dp4415
g70
I4
ssg71
g4409
sg64
(lp4416
g57
(g66
g59
NtRp4417
(dp4418
g62
(dp4419
g70
I3
ssg71
Nsg64
(lp4420
g57
(g73
g59
NtRp4421
(dp4422
g62
(dp4423
sg71
g4417
sg64
(lp4424
g57
(g78
g59
NtRp4425
(dp4426
g62
(dp4427
sg71
g4421
sg64
(lp4428
g57
(g58
g59
NtRp4429
(dp4430
g62
(dp4431
g70
I3
ssg71
g4425
sg64
(lp4432
cgluon.languages
lazyT_unpickle
p4433
(S't\x04\x00\x00\x00Home'
tRp4434
asbasbasbag57
(g73
g59
NtRp4435
(dp4436
g62
(dp4437
sg71
g4417
sg64
(lp4438
g57
(g78
g59
NtRp4439
(dp4440
g62
(dp4441
sg71
g4435
sg64
(lp4442
g57
(g58
g59
NtRp4443
(dp4444
g62
(dp4445
g70
I3
ssg71
g4439
sg64
(lp4446
g100
asbasbasbag57
(g73
g59
NtRp4447
(dp4448
g62
(dp4449
sg71
g4417
sg64
(lp4450
g57
(g78
g59
NtRp4451
(dp4452
g62
(dp4453
sg71
g4447
sg64
(lp4454
g57
(g58
g59
NtRp4455
(dp4456
g62
(dp4457
g70
I3
ssg71
g4451
sg64
(lp4458
S'/DEV_bootstrap_ch/default/list_all_projects'
p4459
asbasbasbag57
(g73
g59
NtRp4460
(dp4461
g62
(dp4462
sg71
g4417
sg64
(lp4463
g57
(g78
g59
NtRp4464
(dp4465
g62
(dp4466
sg71
g4460
sg64
(lp4467
g57
(g58
g59
NtRp4468
(dp4469
g62
(dp4470
g70
I3
ssg71
g4464
sg64
(lp4471
g57
(g66
g59
NtRp4472
(dp4473
g62
(dp4474
g70
I2
ssg71
Nsg64
(lp4475
sbasbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp4476
(dp4477
g62
(dp4478
sg71
g3812
sg64
(lp4479
g57
(g78
g59
NtRp4480
(dp4481
g62
(dp4482
g82
g83
ssg71
g4476
sg64
(lp4483
S'meta'
p4484
asbag57
(g78
g59
NtRp4485
(dp4486
g62
(dp4487
g89
g90
ssg71
g4476
sg64
(lp4488
S':'
asbag57
(g78
g59
NtRp4489
(dp4490
g62
(dp4491
sg71
g4476
sg64
(lp4492
g57
(g58
g59
NtRp4493
(dp4494
g62
(dp4495
g70
I5
ssg71
g4489
sg64
(lp4496
g57
(g66
g59
NtRp4497
(dp4498
g62
(dp4499
g70
I4
ssg71
Nsg64
(lp4500
g57
(g73
g59
NtRp4501
(dp4502
g62
(dp4503
sg71
g4497
sg64
(lp4504
g57
(g78
g59
NtRp4505
(dp4506
g62
(dp4507
g82
g83
ssg71
g4501
sg64
(lp4508
S'author'
p4509
asbag57
(g78
g59
NtRp4510
(dp4511
g62
(dp4512
g89
g90
ssg71
g4501
sg64
(lp4513
S':'
asbag57
(g78
g59
NtRp4514
(dp4515
g62
(dp4516
sg71
g4501
sg64
(lp4517
g57
(g58
g59
NtRp4518
(dp4519
g62
(dp4520
g70
I4
ssg71
g4514
sg64
(lp4521
S'Vikram Pudi <vikram@iiit.ac.in>'
p4522
asbasbasbag57
(g73
g59
NtRp4523
(dp4524
g62
(dp4525
sg71
g4497
sg64
(lp4526
g57
(g78
g59
NtRp4527
(dp4528
g62
(dp4529
g82
g83
ssg71
g4523
sg64
(lp4530
S'copyright'
p4531
asbag57
(g78
g59
NtRp4532
(dp4533
g62
(dp4534
g89
g90
ssg71
g4523
sg64
(lp4535
S':'
asbag57
(g78
g59
NtRp4536
(dp4537
g62
(dp4538
sg71
g4523
sg64
(lp4539
g57
(g58
g59
NtRp4540
(dp4541
g62
(dp4542
g70
I4
ssg71
g4536
sg64
(lp4543
S'Copyright 2011'
p4544
asbasbasbag57
(g73
g59
NtRp4545
(dp4546
g62
(dp4547
sg71
g4497
sg64
(lp4548
g57
(g78
g59
NtRp4549
(dp4550
g62
(dp4551
g82
g83
ssg71
g4545
sg64
(lp4552
S'description'
p4553
asbag57
(g78
g59
NtRp4554
(dp4555
g62
(dp4556
g89
g90
ssg71
g4545
sg64
(lp4557
S':'
asbag57
(g78
g59
NtRp4558
(dp4559
g62
(dp4560
sg71
g4545
sg64
(lp4561
g57
(g58
g59
NtRp4562
(dp4563
g62
(dp4564
g70
I4
ssg71
g4558
sg64
(lp4565
S'Computational Core for Plant Metabolomics -- A project sanctioned by DBT, Govt. of India'
p4566
asbasbasbag57
(g73
g59
NtRp4567
(dp4568
g62
(dp4569
sg71
g4497
sg64
(lp4570
g57
(g78
g59
NtRp4571
(dp4572
g62
(dp4573
g82
g83
ssg71
g4567
sg64
(lp4574
S'generator'
p4575
asbag57
(g78
g59
NtRp4576
(dp4577
g62
(dp4578
g89
g90
ssg71
g4567
sg64
(lp4579
S':'
asbag57
(g78
g59
NtRp4580
(dp4581
g62
(dp4582
sg71
g4567
sg64
(lp4583
g57
(g58
g59
NtRp4584
(dp4585
g62
(dp4586
g70
I4
ssg71
g4580
sg64
(lp4587
S'Web2py Web Framework'
p4588
asbasbasbag57
(g73
g59
NtRp4589
(dp4590
g62
(dp4591
sg71
g4497
sg64
(lp4592
g57
(g78
g59
NtRp4593
(dp4594
g62
(dp4595
g82
g83
ssg71
g4589
sg64
(lp4596
S'keywords'
p4597
asbag57
(g78
g59
NtRp4598
(dp4599
g62
(dp4600
g89
g90
ssg71
g4589
sg64
(lp4601
S':'
asbag57
(g78
g59
NtRp4602
(dp4603
g62
(dp4604
sg71
g4589
sg64
(lp4605
g57
(g58
g59
NtRp4606
(dp4607
g62
(dp4608
g70
I4
ssg71
g4602
sg64
(lp4609
S'web2py, python, metabolome, metabolomics'
p4610
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4611
(dp4612
g62
(dp4613
sg71
g3812
sg64
(lp4614
g57
(g78
g59
NtRp4615
(dp4616
g62
(dp4617
g82
g83
ssg71
g4611
sg64
(lp4618
S'models_to_run'
p4619
asbag57
(g78
g59
NtRp4620
(dp4621
g62
(dp4622
g89
g90
ssg71
g4611
sg64
(lp4623
S':'
asbag57
(g78
g59
NtRp4624
(dp4625
g62
(dp4626
sg71
g4611
sg64
(lp4627
g57
(g58
g59
NtRp4628
(dp4629
g62
(dp4630
g70
I5
ssg71
g4624
sg64
(lp4631
g57
(g66
g59
NtRp4632
(dp4633
g62
(dp4634
g70
I4
ssg71
Nsg64
(lp4635
g57
(g73
g59
NtRp4636
(dp4637
g62
(dp4638
sg71
g4632
sg64
(lp4639
g57
(g78
g59
NtRp4640
(dp4641
g62
(dp4642
sg71
g4636
sg64
(lp4643
g57
(g58
g59
NtRp4644
(dp4645
g62
(dp4646
g70
I4
ssg71
g4640
sg64
(lp4647
S'^\\w+\\.py$'
p4648
asbasbasbag57
(g73
g59
NtRp4649
(dp4650
g62
(dp4651
sg71
g4632
sg64
(lp4652
g57
(g78
g59
NtRp4653
(dp4654
g62
(dp4655
sg71
g4649
sg64
(lp4656
g57
(g58
g59
NtRp4657
(dp4658
g62
(dp4659
g70
I4
ssg71
g4653
sg64
(lp4660
S'^default/\\w+\\.py$'
p4661
asbasbasbag57
(g73
g59
NtRp4662
(dp4663
g62
(dp4664
sg71
g4632
sg64
(lp4665
g57
(g78
g59
NtRp4666
(dp4667
g62
(dp4668
sg71
g4662
sg64
(lp4669
g57
(g58
g59
NtRp4670
(dp4671
g62
(dp4672
g70
I4
ssg71
g4666
sg64
(lp4673
S'^default/list_all_dev_projects/\\w+\\.py$'
p4674
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4675
(dp4676
g62
(dp4677
sg71
g3812
sg64
(lp4678
g57
(g78
g59
NtRp4679
(dp4680
g62
(dp4681
g82
g83
ssg71
g4675
sg64
(lp4682
S'postprocessing'
p4683
asbag57
(g78
g59
NtRp4684
(dp4685
g62
(dp4686
g89
g90
ssg71
g4675
sg64
(lp4687
S':'
asbag57
(g78
g59
NtRp4688
(dp4689
g62
(dp4690
sg71
g4675
sg64
(lp4691
g57
(g58
g59
NtRp4692
(dp4693
g62
(dp4694
g70
I5
ssg71
g4688
sg64
(lp4695
g57
(g66
g59
NtRp4696
(dp4697
g62
(dp4698
g70
I4
ssg71
Nsg64
(lp4699
sbasbasbasbag57
(g73
g59
NtRp4700
(dp4701
g62
(dp4702
sg71
g3812
sg64
(lp4703
g57
(g78
g59
NtRp4704
(dp4705
g62
(dp4706
g82
g83
ssg71
g4700
sg64
(lp4707
S'session_cookie_expires'
p4708
asbag57
(g78
g59
NtRp4709
(dp4710
g62
(dp4711
g89
g90
ssg71
g4700
sg64
(lp4712
S':'
asbag57
(g78
g59
NtRp4713
(dp4714
g62
(dp4715
sg71
g4700
sg64
(lp4716
g57
(g58
g59
NtRp4717
(dp4718
g62
(dp4719
g70
I5
ssg71
g4713
sg64
(lp4720
S'None'
p4721
asbasbasbag57
(g73
g59
NtRp4722
(dp4723
g62
(dp4724
sg71
g3812
sg64
(lp4725
g57
(g78
g59
NtRp4726
(dp4727
g62
(dp4728
g82
g83
ssg71
g4722
sg64
(lp4729
S'session_data_name'
p4730
asbag57
(g78
g59
NtRp4731
(dp4732
g62
(dp4733
g89
g90
ssg71
g4722
sg64
(lp4734
S':'
asbag57
(g78
g59
NtRp4735
(dp4736
g62
(dp4737
sg71
g4722
sg64
(lp4738
g57
(g58
g59
NtRp4739
(dp4740
g62
(dp4741
g70
I5
ssg71
g4735
sg64
(lp4742
S'session_data_dev_bootstrap_ch'
p4743
asbasbasbag57
(g73
g59
NtRp4744
(dp4745
g62
(dp4746
sg71
g3812
sg64
(lp4747
g57
(g78
g59
NtRp4748
(dp4749
g62
(dp4750
g82
g83
ssg71
g4744
sg64
(lp4751
S'session_file'
p4752
asbag57
(g78
g59
NtRp4753
(dp4754
g62
(dp4755
g89
g90
ssg71
g4744
sg64
(lp4756
S':'
asbag57
(g78
g59
NtRp4757
(dp4758
g62
(dp4759
sg71
g4744
sg64
(lp4760
g57
(g58
g59
NtRp4761
(dp4762
g62
(dp4763
g70
I5
ssg71
g4757
sg64
(lp4764
S"<open file '/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-270b038b-df00-4d5c-949a-e87692880510', mode 'rb+' at 0xb0181bd0>"
p4765
asbasbasbag57
(g73
g59
NtRp4766
(dp4767
g62
(dp4768
sg71
g3812
sg64
(lp4769
g57
(g78
g59
NtRp4770
(dp4771
g62
(dp4772
g82
g83
ssg71
g4766
sg64
(lp4773
S'session_filename'
p4774
asbag57
(g78
g59
NtRp4775
(dp4776
g62
(dp4777
g89
g90
ssg71
g4766
sg64
(lp4778
S':'
asbag57
(g78
g59
NtRp4779
(dp4780
g62
(dp4781
sg71
g4766
sg64
(lp4782
g57
(g58
g59
NtRp4783
(dp4784
g62
(dp4785
g70
I5
ssg71
g4779
sg64
(lp4786
S'/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/sessions/127.0.0.1-270b038b-df00-4d5c-949a-e87692880510'
p4787
asbasbasbag57
(g73
g59
NtRp4788
(dp4789
g62
(dp4790
sg71
g3812
sg64
(lp4791
g57
(g78
g59
NtRp4792
(dp4793
g62
(dp4794
g82
g83
ssg71
g4788
sg64
(lp4795
S'session_id'
p4796
asbag57
(g78
g59
NtRp4797
(dp4798
g62
(dp4799
g89
g90
ssg71
g4788
sg64
(lp4800
S':'
asbag57
(g78
g59
NtRp4801
(dp4802
g62
(dp4803
sg71
g4788
sg64
(lp4804
g57
(g58
g59
NtRp4805
(dp4806
g62
(dp4807
g70
I5
ssg71
g4801
sg64
(lp4808
g344
asbasbasbag57
(g73
g59
NtRp4809
(dp4810
g62
(dp4811
sg71
g3812
sg64
(lp4812
g57
(g78
g59
NtRp4813
(dp4814
g62
(dp4815
g82
g83
ssg71
g4809
sg64
(lp4816
S'session_id_name'
p4817
asbag57
(g78
g59
NtRp4818
(dp4819
g62
(dp4820
g89
g90
ssg71
g4809
sg64
(lp4821
S':'
asbag57
(g78
g59
NtRp4822
(dp4823
g62
(dp4824
sg71
g4809
sg64
(lp4825
g57
(g58
g59
NtRp4826
(dp4827
g62
(dp4828
g70
I5
ssg71
g4822
sg64
(lp4829
g3869
asbasbasbag57
(g73
g59
NtRp4830
(dp4831
g62
(dp4832
sg71
g3812
sg64
(lp4833
g57
(g78
g59
NtRp4834
(dp4835
g62
(dp4836
g82
g83
ssg71
g4830
sg64
(lp4837
S'session_locked'
p4838
asbag57
(g78
g59
NtRp4839
(dp4840
g62
(dp4841
g89
g90
ssg71
g4830
sg64
(lp4842
S':'
asbag57
(g78
g59
NtRp4843
(dp4844
g62
(dp4845
sg71
g4830
sg64
(lp4846
g57
(g58
g59
NtRp4847
(dp4848
g62
(dp4849
g70
I5
ssg71
g4843
sg64
(lp4850
g1506
asbasbasbag57
(g73
g59
NtRp4851
(dp4852
g62
(dp4853
sg71
g3812
sg64
(lp4854
g57
(g78
g59
NtRp4855
(dp4856
g62
(dp4857
g82
g83
ssg71
g4851
sg64
(lp4858
S'session_new'
p4859
asbag57
(g78
g59
NtRp4860
(dp4861
g62
(dp4862
g89
g90
ssg71
g4851
sg64
(lp4863
S':'
asbag57
(g78
g59
NtRp4864
(dp4865
g62
(dp4866
sg71
g4851
sg64
(lp4867
g57
(g58
g59
NtRp4868
(dp4869
g62
(dp4870
g70
I5
ssg71
g4864
sg64
(lp4871
g100
asbasbasbag57
(g73
g59
NtRp4872
(dp4873
g62
(dp4874
sg71
g3812
sg64
(lp4875
g57
(g78
g59
NtRp4876
(dp4877
g62
(dp4878
g82
g83
ssg71
g4872
sg64
(lp4879
S'session_storage_type'
p4880
asbag57
(g78
g59
NtRp4881
(dp4882
g62
(dp4883
g89
g90
ssg71
g4872
sg64
(lp4884
S':'
asbag57
(g78
g59
NtRp4885
(dp4886
g62
(dp4887
sg71
g4872
sg64
(lp4888
g57
(g58
g59
NtRp4889
(dp4890
g62
(dp4891
g70
I5
ssg71
g4885
sg64
(lp4892
g3005
asbasbasbag57
(g73
g59
NtRp4893
(dp4894
g62
(dp4895
sg71
g3812
sg64
(lp4896
g57
(g78
g59
NtRp4897
(dp4898
g62
(dp4899
g82
g83
ssg71
g4893
sg64
(lp4900
S'status'
p4901
asbag57
(g78
g59
NtRp4902
(dp4903
g62
(dp4904
g89
g90
ssg71
g4893
sg64
(lp4905
S':'
asbag57
(g78
g59
NtRp4906
(dp4907
g62
(dp4908
sg71
g4893
sg64
(lp4909
g57
(g58
g59
NtRp4910
(dp4911
g62
(dp4912
g70
I5
ssg71
g4906
sg64
(lp4913
S'200'
p4914
asbasbasbag57
(g73
g59
NtRp4915
(dp4916
g62
(dp4917
sg71
g3812
sg64
(lp4918
g57
(g78
g59
NtRp4919
(dp4920
g62
(dp4921
g82
g83
ssg71
g4915
sg64
(lp4922
S'subtitle'
p4923
asbag57
(g78
g59
NtRp4924
(dp4925
g62
(dp4926
g89
g90
ssg71
g4915
sg64
(lp4927
S':'
asbag57
(g78
g59
NtRp4928
(dp4929
g62
(dp4930
sg71
g4915
sg64
(lp4931
g57
(g58
g59
NtRp4932
(dp4933
g62
(dp4934
g70
I5
ssg71
g4928
sg64
(lp4935
g4433
(S's)\x00\x00\x00Computational Core for Plant Metabolomics'
tRp4936
asbasbasbag57
(g73
g59
NtRp4937
(dp4938
g62
(dp4939
sg71
g3812
sg64
(lp4940
g57
(g78
g59
NtRp4941
(dp4942
g62
(dp4943
g82
g83
ssg71
g4937
sg64
(lp4944
g3678
asbag57
(g78
g59
NtRp4945
(dp4946
g62
(dp4947
g89
g90
ssg71
g4937
sg64
(lp4948
S':'
asbag57
(g78
g59
NtRp4949
(dp4950
g62
(dp4951
sg71
g4937
sg64
(lp4952
g57
(g58
g59
NtRp4953
(dp4954
g62
(dp4955
g70
I5
ssg71
g4949
sg64
(lp4956
g122
asbasbasbag57
(g73
g59
NtRp4957
(dp4958
g62
(dp4959
sg71
g3812
sg64
(lp4960
g57
(g78
g59
NtRp4961
(dp4962
g62
(dp4963
g82
g83
ssg71
g4957
sg64
(lp4964
S'view'
p4965
asbag57
(g78
g59
NtRp4966
(dp4967
g62
(dp4968
g89
g90
ssg71
g4957
sg64
(lp4969
S':'
asbag57
(g78
g59
NtRp4970
(dp4971
g62
(dp4972
sg71
g4957
sg64
(lp4973
g57
(g58
g59
NtRp4974
(dp4975
g62
(dp4976
g70
I5
ssg71
g4970
sg64
(lp4977
S'default/list_all_dev_projects.html'
p4978
asbasbasbasbasbsS'locals'
p4979
(dp4980
S'row'
p4981
S"<Row {'publication_status': False, 'code': '32', 'replica': 'replicate', 'name': '12', 'id': 2}>"
p4982
sssS'traceback'
p4983
S'Traceback (most recent call last):\n  File "/home/anil/bootstrap/web2py/gluon/restricted.py", line 212, in restricted\n    exec ccode in environment\n  File "/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 1134, in <module>\n  File "/home/anil/bootstrap/web2py/gluon/globals.py", line 193, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 325, in list_all_dev_projects\n    grid = SQLFORM.smartgrid(db.project,ck,fields=fi,editable=edit_dict,create=create_dict,deletable=delete_dict,links=links,linked_tables=[\'experiment\',\'sample\',\'biosource\',\'plant_growth_condition\',\'treatments\',\'harvests\',\'extraction_preparation\',\'gas_chromatography\',\'liquid_chromatography\',\'mass_spectroscopy\',\'spectrophotometry\',\'raw_data_storage_information\'],selectable = s)\n  File "/home/anil/bootstrap/web2py/gluon/sqlhtml.py", line 2491, in smartgrid\n    user_signature=user_signature, **kwargs)\n  File "/home/anil/bootstrap/web2py/gluon/sqlhtml.py", line 2258, in grid\n    if link(row):\n  File "/home/anil/bootstrap/web2py/applications/DEV_bootstrap_ch/controllers/default.py", line 317, in <lambda>\n    l1=[lambda row: A(\'replicate\',_href=URL("default","duplicate",args=[request.args+row.id])), \\\nTypeError: can only concatenate list (not "int") to list\n'
p4984
s.